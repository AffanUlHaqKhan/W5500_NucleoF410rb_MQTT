
W5500_StaticIP_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000827c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086bc  080086bc  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080086c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001270  200000ec  080087b0  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000135c  080087b0  0002135c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f83  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003564  00000000  00000000  0003109f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00034608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00035520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017078  00000000  00000000  00036358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eb0  00000000  00000000  0004d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed43  00000000  00000000  00060280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000defc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000df014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008434 	.word	0x08008434

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f0 	.word	0x200000f0
 800020c:	08008434 	.word	0x08008434

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <WIZCHIP_READ+0x94>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <WIZCHIP_READ+0x94>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <WIZCHIP_READ+0x94>)
 80005da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <WIZCHIP_READ+0x24>
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <WIZCHIP_READ+0x94>)
 80005e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d114      	bne.n	8000612 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <WIZCHIP_READ+0x94>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	0c12      	lsrs	r2, r2, #16
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	4610      	mov	r0, r2
 80005f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <WIZCHIP_READ+0x94>)
 80005f8:	6a1b      	ldr	r3, [r3, #32]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	0a12      	lsrs	r2, r2, #8
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	4610      	mov	r0, r2
 8000602:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <WIZCHIP_READ+0x94>)
 8000606:	6a1b      	ldr	r3, [r3, #32]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	4610      	mov	r0, r2
 800060e:	4798      	blx	r3
 8000610:	e011      	b.n	8000636 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	b2db      	uxtb	r3, r3
 8000618:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	b2db      	uxtb	r3, r3
 8000620:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <WIZCHIP_READ+0x94>)
 800062a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800062c:	f107 020c 	add.w	r2, r7, #12
 8000630:	2103      	movs	r1, #3
 8000632:	4610      	mov	r0, r2
 8000634:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <WIZCHIP_READ+0x94>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4798      	blx	r3
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <WIZCHIP_READ+0x94>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <WIZCHIP_READ+0x94>)
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	4798      	blx	r3
   return ret;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004

0800065c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 800067e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000680:	2b00      	cmp	r3, #0
 8000682:	d119      	bne.n	80006b8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	0c12      	lsrs	r2, r2, #16
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	4610      	mov	r0, r2
 8000690:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	0a12      	lsrs	r2, r2, #8
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	4610      	mov	r0, r2
 800069e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	4610      	mov	r0, r2
 80006aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	78fa      	ldrb	r2, [r7, #3]
 80006b2:	4610      	mov	r0, r2
 80006b4:	4798      	blx	r3
 80006b6:	e013      	b.n	80006e0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	0c1b      	lsrs	r3, r3, #16
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 80006d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d6:	f107 020c 	add.w	r2, r7, #12
 80006da:	2104      	movs	r1, #4
 80006dc:	4610      	mov	r0, r2
 80006de:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <WIZCHIP_WRITE+0x98>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	4798      	blx	r3
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000004 	.word	0x20000004

080006f8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	4613      	mov	r3, r2
 8000704:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000706:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000712:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <WIZCHIP_READ_BUF+0x2a>
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 800071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071e:	2b00      	cmp	r3, #0
 8000720:	d126      	bne.n	8000770 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	0c12      	lsrs	r2, r2, #16
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	4610      	mov	r0, r2
 800072e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	0a12      	lsrs	r2, r2, #8
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	4610      	mov	r0, r2
 800073c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	4610      	mov	r0, r2
 8000748:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	82fb      	strh	r3, [r7, #22]
 800074e:	e00a      	b.n	8000766 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	8afa      	ldrh	r2, [r7, #22]
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	188c      	adds	r4, r1, r2
 800075a:	4798      	blx	r3
 800075c:	4603      	mov	r3, r0
 800075e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000760:	8afb      	ldrh	r3, [r7, #22]
 8000762:	3301      	adds	r3, #1
 8000764:	82fb      	strh	r3, [r7, #22]
 8000766:	8afa      	ldrh	r2, [r7, #22]
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3f0      	bcc.n	8000750 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800076e:	e017      	b.n	80007a0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	b2db      	uxtb	r3, r3
 8000776:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	b2db      	uxtb	r3, r3
 800077e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078a:	f107 0210 	add.w	r2, r7, #16
 800078e:	2103      	movs	r1, #3
 8000790:	4610      	mov	r0, r2
 8000792:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 8000796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	4611      	mov	r1, r2
 800079c:	68b8      	ldr	r0, [r7, #8]
 800079e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80007a6:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <WIZCHIP_READ_BUF+0xbc>)
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	4798      	blx	r3
}
 80007ac:	bf00      	nop
 80007ae:	371c      	adds	r7, #28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	20000004 	.word	0x20000004

080007b8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	4613      	mov	r3, r2
 80007c4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4798      	blx	r3
   WIZCHIP.CS._select();
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 80007dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d126      	bne.n	8000830 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 80007e4:	6a1b      	ldr	r3, [r3, #32]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	0c12      	lsrs	r2, r2, #16
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	4610      	mov	r0, r2
 80007ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 80007f2:	6a1b      	ldr	r3, [r3, #32]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	0a12      	lsrs	r2, r2, #8
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	4610      	mov	r0, r2
 80007fc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	4610      	mov	r0, r2
 8000808:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800080a:	2300      	movs	r3, #0
 800080c:	82fb      	strh	r3, [r7, #22]
 800080e:	e00a      	b.n	8000826 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 8000812:	6a1b      	ldr	r3, [r3, #32]
 8000814:	8afa      	ldrh	r2, [r7, #22]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	440a      	add	r2, r1
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	4610      	mov	r0, r2
 800081e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000820:	8afb      	ldrh	r3, [r7, #22]
 8000822:	3301      	adds	r3, #1
 8000824:	82fb      	strh	r3, [r7, #22]
 8000826:	8afa      	ldrh	r2, [r7, #22]
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3f0      	bcc.n	8000810 <WIZCHIP_WRITE_BUF+0x58>
 800082e:	e017      	b.n	8000860 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	0c1b      	lsrs	r3, r3, #16
 8000834:	b2db      	uxtb	r3, r3
 8000836:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2db      	uxtb	r3, r3
 800083e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	f107 0210 	add.w	r2, r7, #16
 800084e:	2103      	movs	r1, #3
 8000850:	4610      	mov	r0, r2
 8000852:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 8000856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	4611      	mov	r1, r2
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <WIZCHIP_WRITE_BUF+0xbc>)
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	4798      	blx	r3
}
 800086c:	bf00      	nop
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000004 	.word	0x20000004

08000878 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000882:	2300      	movs	r3, #0
 8000884:	81fb      	strh	r3, [r7, #14]
 8000886:	2300      	movs	r3, #0
 8000888:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	3301      	adds	r3, #1
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe94 	bl	80005c4 <WIZCHIP_READ>
 800089c:	4603      	mov	r3, r0
 800089e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	b29c      	uxth	r4, r3
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	3301      	adds	r3, #1
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe86 	bl	80005c4 <WIZCHIP_READ>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4423      	add	r3, r4
 80008be:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80008c0:	89bb      	ldrh	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01a      	beq.n	80008fc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	3301      	adds	r3, #1
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe76 	bl	80005c4 <WIZCHIP_READ>
 80008d8:	4603      	mov	r3, r0
 80008da:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80008dc:	89fb      	ldrh	r3, [r7, #14]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b29c      	uxth	r4, r3
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	3301      	adds	r3, #1
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fe68 	bl	80005c4 <WIZCHIP_READ>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4423      	add	r3, r4
 80008fa:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80008fc:	89fa      	ldrh	r2, [r7, #14]
 80008fe:	89bb      	ldrh	r3, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	d1c2      	bne.n	800088a <getSn_TX_FSR+0x12>
   return val;
 8000904:	89fb      	ldrh	r3, [r7, #14]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}

0800090e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800090e:	b590      	push	{r4, r7, lr}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000918:	2300      	movs	r3, #0
 800091a:	81fb      	strh	r3, [r7, #14]
 800091c:	2300      	movs	r3, #0
 800091e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	3301      	adds	r3, #1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fe49 	bl	80005c4 <WIZCHIP_READ>
 8000932:	4603      	mov	r3, r0
 8000934:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000936:	89bb      	ldrh	r3, [r7, #12]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b29c      	uxth	r4, r3
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	3301      	adds	r3, #1
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fe3b 	bl	80005c4 <WIZCHIP_READ>
 800094e:	4603      	mov	r3, r0
 8000950:	b29b      	uxth	r3, r3
 8000952:	4423      	add	r3, r4
 8000954:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000956:	89bb      	ldrh	r3, [r7, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d01a      	beq.n	8000992 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	3301      	adds	r3, #1
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe2b 	bl	80005c4 <WIZCHIP_READ>
 800096e:	4603      	mov	r3, r0
 8000970:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	b29c      	uxth	r4, r3
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	3301      	adds	r3, #1
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe1d 	bl	80005c4 <WIZCHIP_READ>
 800098a:	4603      	mov	r3, r0
 800098c:	b29b      	uxth	r3, r3
 800098e:	4423      	add	r3, r4
 8000990:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000992:	89fa      	ldrh	r2, [r7, #14]
 8000994:	89bb      	ldrh	r3, [r7, #12]
 8000996:	429a      	cmp	r2, r3
 8000998:	d1c2      	bne.n	8000920 <getSn_RX_RSR+0x12>
   return val;
 800099a:	89fb      	ldrh	r3, [r7, #14]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}

080009a4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d048      	beq.n	8000a54 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	3301      	adds	r3, #1
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fdf8 	bl	80005c4 <WIZCHIP_READ>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	b29c      	uxth	r4, r3
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	3301      	adds	r3, #1
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fdeb 	bl	80005c4 <WIZCHIP_READ>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	4423      	add	r3, r4
 80009f4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	0092      	lsls	r2, r2, #2
 80009fe:	3202      	adds	r2, #2
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000a06:	88bb      	ldrh	r3, [r7, #4]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	68b8      	ldr	r0, [r7, #8]
 8000a0e:	f7ff fed3 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000a12:	89fa      	ldrh	r2, [r7, #14]
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	3301      	adds	r3, #1
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000a26:	461a      	mov	r2, r3
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	0a1b      	lsrs	r3, r3, #8
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4619      	mov	r1, r3
 8000a32:	4610      	mov	r0, r2
 8000a34:	f7ff fe12 	bl	800065c <WIZCHIP_WRITE>
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000a44:	461a      	mov	r2, r3
 8000a46:	89fb      	ldrh	r3, [r7, #14]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f7ff fe05 	bl	800065c <WIZCHIP_WRITE>
 8000a52:	e000      	b.n	8000a56 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8000a54:	bf00      	nop
}
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}

08000a5c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d048      	beq.n	8000b0c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	3301      	adds	r3, #1
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd9c 	bl	80005c4 <WIZCHIP_READ>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b29c      	uxth	r4, r3
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	3301      	adds	r3, #1
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fd8f 	bl	80005c4 <WIZCHIP_READ>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	4423      	add	r3, r4
 8000aac:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	3203      	adds	r2, #3
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	6839      	ldr	r1, [r7, #0]
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	f7ff fe17 	bl	80006f8 <WIZCHIP_READ_BUF>
   ptr += len;
 8000aca:	89fa      	ldrh	r2, [r7, #14]
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000ade:	461a      	mov	r2, r3
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4610      	mov	r0, r2
 8000aec:	f7ff fdb6 	bl	800065c <WIZCHIP_WRITE>
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3301      	adds	r3, #1
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000afc:	461a      	mov	r2, r3
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	4610      	mov	r0, r2
 8000b06:	f7ff fda9 	bl	800065c <WIZCHIP_WRITE>
 8000b0a:	e000      	b.n	8000b0e <wiz_recv_data+0xb2>
   if(len == 0) return;
 8000b0c:	bf00      	nop
}
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}

08000b14 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fd45 	bl	80005c4 <WIZCHIP_READ>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b29c      	uxth	r4, r3
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	3301      	adds	r3, #1
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd38 	bl	80005c4 <WIZCHIP_READ>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	4423      	add	r3, r4
 8000b5a:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8000b5c:	89fa      	ldrh	r2, [r7, #14]
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3301      	adds	r3, #1
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000b70:	461a      	mov	r2, r3
 8000b72:	89fb      	ldrh	r3, [r7, #14]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4610      	mov	r0, r2
 8000b7e:	f7ff fd6d 	bl	800065c <WIZCHIP_WRITE>
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	3301      	adds	r3, #1
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000b8e:	461a      	mov	r2, r3
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	4610      	mov	r0, r2
 8000b98:	f7ff fd60 	bl	800065c <WIZCHIP_WRITE>
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}

08000ba4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4604      	mov	r4, r0
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71bb      	strb	r3, [r7, #6]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	80bb      	strh	r3, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d902      	bls.n	8000bce <socket+0x2a>
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	e0f2      	b.n	8000db4 <socket+0x210>
	switch(protocol)
 8000bce:	79bb      	ldrb	r3, [r7, #6]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d005      	beq.n	8000be0 <socket+0x3c>
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	dd11      	ble.n	8000bfc <socket+0x58>
 8000bd8:	3b02      	subs	r3, #2
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d80e      	bhi.n	8000bfc <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000bde:	e011      	b.n	8000c04 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2204      	movs	r2, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000bec:	f7ff fd84 	bl	80006f8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d105      	bne.n	8000c02 <socket+0x5e>
 8000bf6:	f06f 0302 	mvn.w	r3, #2
 8000bfa:	e0db      	b.n	8000db4 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000bfc:	f06f 0304 	mvn.w	r3, #4
 8000c00:	e0d8      	b.n	8000db4 <socket+0x210>
	    break;
 8000c02:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <socket+0x70>
 8000c0e:	f06f 0305 	mvn.w	r3, #5
 8000c12:	e0cf      	b.n	8000db4 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d025      	beq.n	8000c66 <socket+0xc2>
	{
   	switch(protocol)
 8000c1a:	79bb      	ldrb	r3, [r7, #6]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d002      	beq.n	8000c26 <socket+0x82>
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d008      	beq.n	8000c36 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000c24:	e024      	b.n	8000c70 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d11c      	bne.n	8000c6a <socket+0xc6>
 8000c30:	f06f 0305 	mvn.w	r3, #5
 8000c34:	e0be      	b.n	8000db4 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	f003 0320 	and.w	r3, r3, #32
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db02      	blt.n	8000c4e <socket+0xaa>
 8000c48:	f06f 0305 	mvn.w	r3, #5
 8000c4c:	e0b2      	b.n	8000db4 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00a      	beq.n	8000c6e <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db06      	blt.n	8000c6e <socket+0xca>
 8000c60:	f06f 0305 	mvn.w	r3, #5
 8000c64:	e0a6      	b.n	8000db4 <socket+0x210>
   	}
   }
 8000c66:	bf00      	nop
 8000c68:	e002      	b.n	8000c70 <socket+0xcc>
   	      break;
 8000c6a:	bf00      	nop
 8000c6c:	e000      	b.n	8000c70 <socket+0xcc>
   	      break;
 8000c6e:	bf00      	nop
	close(sn);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f8ac 	bl	8000dd0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c86:	f023 030f 	bic.w	r3, r3, #15
 8000c8a:	b25a      	sxtb	r2, r3
 8000c8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	f7ff fce0 	bl	800065c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d110      	bne.n	8000cc4 <socket+0x120>
	{
	   port = sock_any_port++;
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <socket+0x218>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	b291      	uxth	r1, r2
 8000caa:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <socket+0x218>)
 8000cac:	8011      	strh	r1, [r2, #0]
 8000cae:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <socket+0x218>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d103      	bne.n	8000cc4 <socket+0x120>
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <socket+0x218>)
 8000cbe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000cc2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	3301      	adds	r3, #1
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4610      	mov	r0, r2
 8000cde:	f7ff fcbd 	bl	800065c <WIZCHIP_WRITE>
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cee:	461a      	mov	r2, r3
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f7ff fcb0 	bl	800065c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	3301      	adds	r3, #1
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fca6 	bl	800065c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000d10:	bf00      	nop
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	3301      	adds	r3, #1
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fc50 	bl	80005c4 <WIZCHIP_READ>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f3      	bne.n	8000d12 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <socket+0x21c>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	4013      	ands	r3, r2
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <socket+0x21c>)
 8000d46:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <socket+0x21c>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <socket+0x21c>)
 8000d64:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <socket+0x220>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <socket+0x220>)
 8000d82:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <socket+0x224>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <socket+0x228>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000d96:	bf00      	nop
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc0d 	bl	80005c4 <WIZCHIP_READ>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f3      	beq.n	8000d98 <socket+0x1f4>
   return (int8_t)sn;
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000108 	.word	0x20000108
 8000dc4:	2000010a 	.word	0x2000010a
 8000dc8:	2000010c 	.word	0x2000010c
 8000dcc:	2000011c 	.word	0x2000011c

08000dd0 <close>:

int8_t close(uint8_t sn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d902      	bls.n	8000de6 <close+0x16>
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	e055      	b.n	8000e92 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	3301      	adds	r3, #1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000df2:	2110      	movs	r1, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fc31 	bl	800065c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000dfa:	bf00      	nop
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	3301      	adds	r3, #1
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fbdb 	bl	80005c4 <WIZCHIP_READ>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f3      	bne.n	8000dfc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	3301      	adds	r3, #1
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e20:	211f      	movs	r1, #31
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fc1a 	bl	800065c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <close+0xcc>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <close+0xcc>)
 8000e44:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <close+0xd0>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <close+0xd0>)
 8000e62:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <close+0xd4>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <close+0xd8>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000e76:	bf00      	nop
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb9d 	bl	80005c4 <WIZCHIP_READ>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f3      	bne.n	8000e78 <close+0xa8>
	return SOCK_OK;
 8000e90:	2301      	movs	r3, #1
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000108 	.word	0x20000108
 8000ea0:	2000010a 	.word	0x2000010a
 8000ea4:	2000010c 	.word	0x2000010c
 8000ea8:	2000011c 	.word	0x2000011c

08000eac <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d902      	bls.n	8000ec8 <connect+0x1c>
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e0c6      	b.n	8001056 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	3301      	adds	r3, #1
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fb77 	bl	80005c4 <WIZCHIP_READ>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d002      	beq.n	8000ee6 <connect+0x3a>
 8000ee0:	f06f 0304 	mvn.w	r3, #4
 8000ee4:	e0b7      	b.n	8001056 <connect+0x1aa>
   CHECK_SOCKINIT();
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	3301      	adds	r3, #1
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb66 	bl	80005c4 <WIZCHIP_READ>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b13      	cmp	r3, #19
 8000efc:	d002      	beq.n	8000f04 <connect+0x58>
 8000efe:	f06f 0302 	mvn.w	r3, #2
 8000f02:	e0a8      	b.n	8001056 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	3201      	adds	r2, #1
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	3202      	adds	r2, #2
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	3203      	adds	r2, #3
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3a:	d002      	beq.n	8000f42 <connect+0x96>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <connect+0x9c>
 8000f42:	f06f 030b 	mvn.w	r3, #11
 8000f46:	e086      	b.n	8001056 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <connect+0xa8>
 8000f4e:	f06f 030a 	mvn.w	r3, #10
 8000f52:	e080      	b.n	8001056 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	3301      	adds	r3, #1
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000f60:	2204      	movs	r2, #4
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fc27 	bl	80007b8 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	3301      	adds	r3, #1
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f76:	461a      	mov	r2, r3
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f7ff fb6a 	bl	800065c <WIZCHIP_WRITE>
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f94:	461a      	mov	r2, r3
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	f7ff fb5d 	bl	800065c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fb53 	bl	800065c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000fb6:	bf00      	nop
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fafd 	bl	80005c4 <WIZCHIP_READ>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f3      	bne.n	8000fb8 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <connect+0x1b4>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	fa42 f303 	asr.w	r3, r2, r3
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d02b      	beq.n	800103c <connect+0x190>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e036      	b.n	8001056 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	3301      	adds	r3, #1
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fae5 	bl	80005c4 <WIZCHIP_READ>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00c      	beq.n	800101e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3301      	adds	r3, #1
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001010:	2108      	movs	r1, #8
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fb22 	bl	800065c <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8001018:	f06f 030c 	mvn.w	r3, #12
 800101c:	e01b      	b.n	8001056 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	3301      	adds	r3, #1
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff faca 	bl	80005c4 <WIZCHIP_READ>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8001036:	f06f 0303 	mvn.w	r3, #3
 800103a:	e00c      	b.n	8001056 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	3301      	adds	r3, #1
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fabb 	bl	80005c4 <WIZCHIP_READ>
 800104e:	4603      	mov	r3, r0
 8001050:	2b17      	cmp	r3, #23
 8001052:	d1c9      	bne.n	8000fe8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000108 	.word	0x20000108

08001064 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d902      	bls.n	800107a <disconnect+0x16>
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	e062      	b.n	8001140 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	3301      	adds	r3, #1
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa9e 	bl	80005c4 <WIZCHIP_READ>
 8001088:	4603      	mov	r3, r0
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	2b01      	cmp	r3, #1
 8001090:	d002      	beq.n	8001098 <disconnect+0x34>
 8001092:	f06f 0304 	mvn.w	r3, #4
 8001096:	e053      	b.n	8001140 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	3301      	adds	r3, #1
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010a4:	2108      	movs	r1, #8
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fad8 	bl	800065c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80010ac:	bf00      	nop
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	3301      	adds	r3, #1
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa82 	bl	80005c4 <WIZCHIP_READ>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f3      	bne.n	80010ae <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2201      	movs	r2, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <disconnect+0xe4>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4013      	ands	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <disconnect+0xe4>)
 80010e2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <disconnect+0xe8>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	fa42 f303 	asr.w	r3, r2, r3
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d016      	beq.n	8001126 <disconnect+0xc2>
 80010f8:	2300      	movs	r3, #0
 80010fa:	e021      	b.n	8001140 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	3301      	adds	r3, #1
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa5b 	bl	80005c4 <WIZCHIP_READ>
 800110e:	4603      	mov	r3, r0
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <disconnect+0xc2>
	   {
	      close(sn);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fe58 	bl	8000dd0 <close>
	      return SOCKERR_TIMEOUT;
 8001120:	f06f 030c 	mvn.w	r3, #12
 8001124:	e00c      	b.n	8001140 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	3301      	adds	r3, #1
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa46 	bl	80005c4 <WIZCHIP_READ>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1de      	bne.n	80010fc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000010a 	.word	0x2000010a
 800114c:	20000108 	.word	0x20000108

08001150 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001164:	2300      	movs	r3, #0
 8001166:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d902      	bls.n	8001174 <send+0x24>
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e0de      	b.n	8001332 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3301      	adds	r3, #1
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa21 	bl	80005c4 <WIZCHIP_READ>
 8001182:	4603      	mov	r3, r0
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	2b01      	cmp	r3, #1
 800118a:	d002      	beq.n	8001192 <send+0x42>
 800118c:	f06f 0304 	mvn.w	r3, #4
 8001190:	e0cf      	b.n	8001332 <send+0x1e2>
   CHECK_SOCKDATA();
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <send+0x4e>
 8001198:	f06f 030d 	mvn.w	r3, #13
 800119c:	e0c9      	b.n	8001332 <send+0x1e2>
   tmp = getSn_SR(sn);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3301      	adds	r3, #1
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fa0a 	bl	80005c4 <WIZCHIP_READ>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2b17      	cmp	r3, #23
 80011b8:	d005      	beq.n	80011c6 <send+0x76>
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2b1c      	cmp	r3, #28
 80011be:	d002      	beq.n	80011c6 <send+0x76>
 80011c0:	f06f 0306 	mvn.w	r3, #6
 80011c4:	e0b5      	b.n	8001332 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <send+0x1ec>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	fa42 f303 	asr.w	r3, r2, r3
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d039      	beq.n	800124e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	3301      	adds	r3, #1
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9ec 	bl	80005c4 <WIZCHIP_READ>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d019      	beq.n	8001232 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	3301      	adds	r3, #1
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800120a:	2110      	movs	r1, #16
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fa25 	bl	800065c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2201      	movs	r2, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	b21b      	sxth	r3, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <send+0x1ec>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <send+0x1ec>)
 800122e:	801a      	strh	r2, [r3, #0]
 8001230:	e00d      	b.n	800124e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <send+0xfa>
      {
         close(sn);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fdc6 	bl	8000dd0 <close>
         return SOCKERR_TIMEOUT;
 8001244:	f06f 030c 	mvn.w	r3, #12
 8001248:	e073      	b.n	8001332 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800124a:	2300      	movs	r3, #0
 800124c:	e071      	b.n	8001332 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	3301      	adds	r3, #1
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f9b2 	bl	80005c4 <WIZCHIP_READ>
 8001260:	4603      	mov	r3, r0
 8001262:	b29b      	uxth	r3, r3
 8001264:	029b      	lsls	r3, r3, #10
 8001266:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001268:	88ba      	ldrh	r2, [r7, #4]
 800126a:	89bb      	ldrh	r3, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d901      	bls.n	8001274 <send+0x124>
 8001270:	89bb      	ldrh	r3, [r7, #12]
 8001272:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fafe 	bl	8000878 <getSn_TX_FSR>
 800127c:	4603      	mov	r3, r0
 800127e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	3301      	adds	r3, #1
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f999 	bl	80005c4 <WIZCHIP_READ>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b17      	cmp	r3, #23
 800129a:	d009      	beq.n	80012b0 <send+0x160>
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b1c      	cmp	r3, #28
 80012a0:	d006      	beq.n	80012b0 <send+0x160>
      {
         close(sn);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fd93 	bl	8000dd0 <close>
         return SOCKERR_SOCKSTATUS;
 80012aa:	f06f 0306 	mvn.w	r3, #6
 80012ae:	e040      	b.n	8001332 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <send+0x1f0>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	fa42 f303 	asr.w	r3, r2, r3
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <send+0x180>
 80012c4:	88ba      	ldrh	r2, [r7, #4]
 80012c6:	89bb      	ldrh	r3, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d901      	bls.n	80012d0 <send+0x180>
 80012cc:	2300      	movs	r3, #0
 80012ce:	e030      	b.n	8001332 <send+0x1e2>
      if(len <= freesize) break;
 80012d0:	88ba      	ldrh	r2, [r7, #4]
 80012d2:	89bb      	ldrh	r3, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d900      	bls.n	80012da <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80012d8:	e7cc      	b.n	8001274 <send+0x124>
      if(len <= freesize) break;
 80012da:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb5e 	bl	80009a4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	3301      	adds	r3, #1
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012f4:	2120      	movs	r1, #32
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f9b0 	bl	800065c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80012fc:	bf00      	nop
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	3301      	adds	r3, #1
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f95a 	bl	80005c4 <WIZCHIP_READ>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f3      	bne.n	80012fe <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2201      	movs	r2, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <send+0x1ec>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21b      	sxth	r3, r3
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <send+0x1ec>)
 800132e:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001330:	88bb      	ldrh	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000010a 	.word	0x2000010a
 8001340:	20000108 	.word	0x20000108

08001344 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2b08      	cmp	r3, #8
 8001360:	d902      	bls.n	8001368 <recv+0x24>
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e09c      	b.n	80014a2 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	3301      	adds	r3, #1
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f927 	bl	80005c4 <WIZCHIP_READ>
 8001376:	4603      	mov	r3, r0
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	2b01      	cmp	r3, #1
 800137e:	d002      	beq.n	8001386 <recv+0x42>
 8001380:	f06f 0304 	mvn.w	r3, #4
 8001384:	e08d      	b.n	80014a2 <recv+0x15e>
   CHECK_SOCKDATA();
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <recv+0x4e>
 800138c:	f06f 030d 	mvn.w	r3, #13
 8001390:	e087      	b.n	80014a2 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	3301      	adds	r3, #1
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f910 	bl	80005c4 <WIZCHIP_READ>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80013ac:	89ba      	ldrh	r2, [r7, #12]
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d201      	bcs.n	80013b8 <recv+0x74>
 80013b4:	89bb      	ldrh	r3, [r7, #12]
 80013b6:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff faa7 	bl	800090e <getSn_RX_RSR>
 80013c0:	4603      	mov	r3, r0
 80013c2:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	3301      	adds	r3, #1
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8f7 	bl	80005c4 <WIZCHIP_READ>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b17      	cmp	r3, #23
 80013de:	d026      	beq.n	800142e <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b1c      	cmp	r3, #28
 80013e4:	d11c      	bne.n	8001420 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80013e6:	89bb      	ldrh	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d133      	bne.n	8001454 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fa42 	bl	8000878 <getSn_TX_FSR>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461c      	mov	r4, r3
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3301      	adds	r3, #1
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8dd 	bl	80005c4 <WIZCHIP_READ>
 800140a:	4603      	mov	r3, r0
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	429c      	cmp	r4, r3
 8001410:	d10d      	bne.n	800142e <recv+0xea>
               {
                  close(sn);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fcdb 	bl	8000dd0 <close>
                  return SOCKERR_SOCKSTATUS;
 800141a:	f06f 0306 	mvn.w	r3, #6
 800141e:	e040      	b.n	80014a2 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fcd4 	bl	8000dd0 <close>
               return SOCKERR_SOCKSTATUS;
 8001428:	f06f 0306 	mvn.w	r3, #6
 800142c:	e039      	b.n	80014a2 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <recv+0x168>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	fa42 f303 	asr.w	r3, r2, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <recv+0x108>
 8001442:	89bb      	ldrh	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <recv+0x108>
 8001448:	2300      	movs	r3, #0
 800144a:	e02a      	b.n	80014a2 <recv+0x15e>
         if(recvsize != 0) break;
 800144c:	89bb      	ldrh	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8001452:	e7b1      	b.n	80013b8 <recv+0x74>
               if(recvsize != 0) break;
 8001454:	bf00      	nop
 8001456:	e000      	b.n	800145a <recv+0x116>
         if(recvsize != 0) break;
 8001458:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800145a:	89ba      	ldrh	r2, [r7, #12]
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d201      	bcs.n	8001466 <recv+0x122>
 8001462:	89bb      	ldrh	r3, [r7, #12]
 8001464:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001466:	88ba      	ldrh	r2, [r7, #4]
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff faf5 	bl	8000a5c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	3301      	adds	r3, #1
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800147e:	2140      	movs	r1, #64	; 0x40
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f8eb 	bl	800065c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001486:	bf00      	nop
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	3301      	adds	r3, #1
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f895 	bl	80005c4 <WIZCHIP_READ>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f3      	bne.n	8001488 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80014a0:	88bb      	ldrh	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000108 	.word	0x20000108

080014b0 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	4613      	mov	r3, r2
 80014c0:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d902      	bls.n	80014d6 <sendto+0x26>
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	e11b      	b.n	800170e <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	3301      	adds	r3, #1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f870 	bl	80005c4 <WIZCHIP_READ>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b02      	subs	r3, #2
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d902      	bls.n	80014f6 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80014f0:	f06f 0304 	mvn.w	r3, #4
 80014f4:	e10b      	b.n	800170e <sendto+0x25e>
         break;
 80014f6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80014f8:	89bb      	ldrh	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <sendto+0x54>
 80014fe:	f06f 030d 	mvn.w	r3, #13
 8001502:	e104      	b.n	800170e <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	3201      	adds	r2, #1
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	4413      	add	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	3202      	adds	r2, #2
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	4413      	add	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	3203      	adds	r2, #3
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4413      	add	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10e      	bne.n	8001558 <sendto+0xa8>
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	3301      	adds	r3, #1
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f83e 	bl	80005c4 <WIZCHIP_READ>
 8001548:	4603      	mov	r3, r0
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b04      	cmp	r3, #4
 8001550:	d002      	beq.n	8001558 <sendto+0xa8>
 8001552:	f06f 030b 	mvn.w	r3, #11
 8001556:	e0da      	b.n	800170e <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001558:	8c3b      	ldrh	r3, [r7, #32]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10e      	bne.n	800157c <sendto+0xcc>
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3301      	adds	r3, #1
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f82c 	bl	80005c4 <WIZCHIP_READ>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b04      	cmp	r3, #4
 8001574:	d002      	beq.n	800157c <sendto+0xcc>
 8001576:	f06f 030a 	mvn.w	r3, #10
 800157a:	e0c8      	b.n	800170e <sendto+0x25e>
   tmp = getSn_SR(sn);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	3301      	adds	r3, #1
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f81b 	bl	80005c4 <WIZCHIP_READ>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b42      	cmp	r3, #66	; 0x42
 8001596:	d008      	beq.n	80015aa <sendto+0xfa>
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b22      	cmp	r3, #34	; 0x22
 800159c:	d005      	beq.n	80015aa <sendto+0xfa>
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b32      	cmp	r3, #50	; 0x32
 80015a2:	d002      	beq.n	80015aa <sendto+0xfa>
 80015a4:	f06f 0306 	mvn.w	r3, #6
 80015a8:	e0b1      	b.n	800170e <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	3301      	adds	r3, #1
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80015b6:	2204      	movs	r2, #4
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f8fc 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	3301      	adds	r3, #1
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015cc:	461a      	mov	r2, r3
 80015ce:	8c3b      	ldrh	r3, [r7, #32]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f7ff f83f 	bl	800065c <WIZCHIP_WRITE>
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	3301      	adds	r3, #1
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80015ea:	461a      	mov	r2, r3
 80015ec:	8c3b      	ldrh	r3, [r7, #32]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f7ff f832 	bl	800065c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	3301      	adds	r3, #1
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffdd 	bl	80005c4 <WIZCHIP_READ>
 800160a:	4603      	mov	r3, r0
 800160c:	b29b      	uxth	r3, r3
 800160e:	029b      	lsls	r3, r3, #10
 8001610:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001612:	89ba      	ldrh	r2, [r7, #12]
 8001614:	8abb      	ldrh	r3, [r7, #20]
 8001616:	429a      	cmp	r2, r3
 8001618:	d901      	bls.n	800161e <sendto+0x16e>
 800161a:	8abb      	ldrh	r3, [r7, #20]
 800161c:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f929 	bl	8000878 <getSn_TX_FSR>
 8001626:	4603      	mov	r3, r0
 8001628:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	3301      	adds	r3, #1
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ffc4 	bl	80005c4 <WIZCHIP_READ>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <sendto+0x198>
 8001642:	f06f 0303 	mvn.w	r3, #3
 8001646:	e062      	b.n	800170e <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001648:	4b33      	ldr	r3, [pc, #204]	; (8001718 <sendto+0x268>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <sendto+0x1b8>
 800165c:	89ba      	ldrh	r2, [r7, #12]
 800165e:	8abb      	ldrh	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	d901      	bls.n	8001668 <sendto+0x1b8>
 8001664:	2300      	movs	r3, #0
 8001666:	e052      	b.n	800170e <sendto+0x25e>
      if(len <= freesize) break;
 8001668:	89ba      	ldrh	r2, [r7, #12]
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	d900      	bls.n	8001672 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8001670:	e7d5      	b.n	800161e <sendto+0x16e>
      if(len <= freesize) break;
 8001672:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8001674:	89ba      	ldrh	r2, [r7, #12]
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f992 	bl	80009a4 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3301      	adds	r3, #1
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800168c:	2120      	movs	r1, #32
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ffe4 	bl	800065c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001694:	bf00      	nop
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	3301      	adds	r3, #1
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff8e 	bl	80005c4 <WIZCHIP_READ>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f3      	bne.n	8001696 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3301      	adds	r3, #1
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff82 	bl	80005c4 <WIZCHIP_READ>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00c      	beq.n	80016ec <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	3301      	adds	r3, #1
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016de:	2110      	movs	r1, #16
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ffbb 	bl	800065c <WIZCHIP_WRITE>
         break;
 80016e6:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80016e8:	89bb      	ldrh	r3, [r7, #12]
 80016ea:	e010      	b.n	800170e <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0db      	beq.n	80016ae <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	3301      	adds	r3, #1
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001702:	2108      	movs	r1, #8
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ffa9 	bl	800065c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800170a:	f06f 030c 	mvn.w	r3, #12
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000108 	.word	0x20000108

0800171c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	4613      	mov	r3, r2
 800172c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800172e:	2300      	movs	r3, #0
 8001730:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d902      	bls.n	800173e <recvfrom+0x22>
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	e1d4      	b.n	8001ae8 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	3301      	adds	r3, #1
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff3c 	bl	80005c4 <WIZCHIP_READ>
 800174c:	4603      	mov	r3, r0
 800174e:	777b      	strb	r3, [r7, #29]
 8001750:	7f7b      	ldrb	r3, [r7, #29]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b02      	subs	r3, #2
 8001758:	2b02      	cmp	r3, #2
 800175a:	d902      	bls.n	8001762 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800175c:	f06f 0304 	mvn.w	r3, #4
 8001760:	e1c2      	b.n	8001ae8 <recvfrom+0x3cc>
         break;
 8001762:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <recvfrom+0x54>
 800176a:	f06f 030d 	mvn.w	r3, #13
 800176e:	e1bb      	b.n	8001ae8 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	4a88      	ldr	r2, [pc, #544]	; (8001994 <recvfrom+0x278>)
 8001774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d128      	bne.n	80017ce <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f8c5 	bl	800090e <getSn_RX_RSR>
 8001784:	4603      	mov	r3, r0
 8001786:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	3301      	adds	r3, #1
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe ff15 	bl	80005c4 <WIZCHIP_READ>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <recvfrom+0x8a>
 80017a0:	f06f 0303 	mvn.w	r3, #3
 80017a4:	e1a0      	b.n	8001ae8 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80017a6:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <recvfrom+0x27c>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	fa42 f303 	asr.w	r3, r2, r3
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <recvfrom+0xa8>
 80017ba:	8bfb      	ldrh	r3, [r7, #30]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <recvfrom+0xa8>
 80017c0:	2300      	movs	r3, #0
 80017c2:	e191      	b.n	8001ae8 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 80017c4:	8bfb      	ldrh	r3, [r7, #30]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d100      	bne.n	80017cc <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80017ca:	e7d7      	b.n	800177c <recvfrom+0x60>
         if(pack_len != 0) break;
 80017cc:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80017ce:	7f7b      	ldrb	r3, [r7, #29]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d079      	beq.n	80018cc <recvfrom+0x1b0>
 80017d8:	2b04      	cmp	r3, #4
 80017da:	f300 8142 	bgt.w	8001a62 <recvfrom+0x346>
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <recvfrom+0xce>
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	f000 80dc 	beq.w	80019a0 <recvfrom+0x284>
 80017e8:	e13b      	b.n	8001a62 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	4a69      	ldr	r2, [pc, #420]	; (8001994 <recvfrom+0x278>)
 80017ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d152      	bne.n	800189c <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 80017f6:	f107 0114 	add.w	r1, r7, #20
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f92c 	bl	8000a5c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	3301      	adds	r3, #1
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001810:	2140      	movs	r1, #64	; 0x40
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe ff22 	bl	800065c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001818:	bf00      	nop
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	3301      	adds	r3, #1
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fecc 	bl	80005c4 <WIZCHIP_READ>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f3      	bne.n	800181a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8001832:	7d3a      	ldrb	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3301      	adds	r3, #1
 800183c:	7d7a      	ldrb	r2, [r7, #21]
 800183e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3302      	adds	r3, #2
 8001844:	7dba      	ldrb	r2, [r7, #22]
 8001846:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3303      	adds	r3, #3
 800184c:	7dfa      	ldrb	r2, [r7, #23]
 800184e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8001850:	7e3b      	ldrb	r3, [r7, #24]
 8001852:	b29a      	uxth	r2, r3
 8001854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001856:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	b29a      	uxth	r2, r3
 8001860:	7e7b      	ldrb	r3, [r7, #25]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b29a      	uxth	r2, r3
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800186c:	7eba      	ldrb	r2, [r7, #26]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	b291      	uxth	r1, r2
 8001872:	4a48      	ldr	r2, [pc, #288]	; (8001994 <recvfrom+0x278>)
 8001874:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4a46      	ldr	r2, [pc, #280]	; (8001994 <recvfrom+0x278>)
 800187c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b299      	uxth	r1, r3
 8001884:	7efb      	ldrb	r3, [r7, #27]
 8001886:	b29a      	uxth	r2, r3
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	440a      	add	r2, r1
 800188c:	b291      	uxth	r1, r2
 800188e:	4a41      	ldr	r2, [pc, #260]	; (8001994 <recvfrom+0x278>)
 8001890:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	4a41      	ldr	r2, [pc, #260]	; (800199c <recvfrom+0x280>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	4a3d      	ldr	r2, [pc, #244]	; (8001994 <recvfrom+0x278>)
 80018a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a4:	89ba      	ldrh	r2, [r7, #12]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d202      	bcs.n	80018b0 <recvfrom+0x194>
 80018aa:	89bb      	ldrh	r3, [r7, #12]
 80018ac:	83fb      	strh	r3, [r7, #30]
 80018ae:	e004      	b.n	80018ba <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	4a38      	ldr	r2, [pc, #224]	; (8001994 <recvfrom+0x278>)
 80018b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b8:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80018ba:	8bfb      	ldrh	r3, [r7, #30]
 80018bc:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80018be:	8bfa      	ldrh	r2, [r7, #30]
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f8c9 	bl	8000a5c <wiz_recv_data>
			break;
 80018ca:	e0d6      	b.n	8001a7a <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	4a31      	ldr	r2, [pc, #196]	; (8001994 <recvfrom+0x278>)
 80018d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d146      	bne.n	8001966 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 80018d8:	f107 0114 	add.w	r1, r7, #20
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2202      	movs	r2, #2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f8bb 	bl	8000a5c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	3301      	adds	r3, #1
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018f2:	2140      	movs	r1, #64	; 0x40
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe feb1 	bl	800065c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80018fa:	bf00      	nop
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	3301      	adds	r3, #1
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe5b 	bl	80005c4 <WIZCHIP_READ>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f3      	bne.n	80018fc <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8001914:	7d3a      	ldrb	r2, [r7, #20]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	b291      	uxth	r1, r2
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <recvfrom+0x278>)
 800191c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <recvfrom+0x278>)
 8001924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b29a      	uxth	r2, r3
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b29a      	uxth	r2, r3
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	3a02      	subs	r2, #2
 8001938:	b291      	uxth	r1, r2
 800193a:	4a16      	ldr	r2, [pc, #88]	; (8001994 <recvfrom+0x278>)
 800193c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <recvfrom+0x278>)
 8001944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001948:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800194c:	4293      	cmp	r3, r2
 800194e:	d906      	bls.n	800195e <recvfrom+0x242>
   			{
   			   close(sn);
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fa3c 	bl	8000dd0 <close>
   			   return SOCKFATAL_PACKLEN;
 8001958:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800195c:	e0c4      	b.n	8001ae8 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <recvfrom+0x280>)
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <recvfrom+0x278>)
 800196a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800196e:	89ba      	ldrh	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d202      	bcs.n	800197a <recvfrom+0x25e>
 8001974:	89bb      	ldrh	r3, [r7, #12]
 8001976:	83fb      	strh	r3, [r7, #30]
 8001978:	e004      	b.n	8001984 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	4a05      	ldr	r2, [pc, #20]	; (8001994 <recvfrom+0x278>)
 800197e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001982:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8001984:	8bfa      	ldrh	r2, [r7, #30]
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f866 	bl	8000a5c <wiz_recv_data>
		   break;
 8001990:	e073      	b.n	8001a7a <recvfrom+0x35e>
 8001992:	bf00      	nop
 8001994:	2000010c 	.word	0x2000010c
 8001998:	20000108 	.word	0x20000108
 800199c:	2000011c 	.word	0x2000011c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <recvfrom+0x3d4>)
 80019a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d144      	bne.n	8001a36 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 80019ac:	f107 0114 	add.w	r1, r7, #20
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	2206      	movs	r2, #6
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f851 	bl	8000a5c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	3301      	adds	r3, #1
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019c6:	2140      	movs	r1, #64	; 0x40
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fe47 	bl	800065c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80019ce:	bf00      	nop
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	3301      	adds	r3, #1
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdf1 	bl	80005c4 <WIZCHIP_READ>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f3      	bne.n	80019d0 <recvfrom+0x2b4>
   			addr[0] = head[0];
 80019e8:	7d3a      	ldrb	r2, [r7, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	7d7a      	ldrb	r2, [r7, #21]
 80019f4:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3302      	adds	r3, #2
 80019fa:	7dba      	ldrb	r2, [r7, #22]
 80019fc:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3303      	adds	r3, #3
 8001a02:	7dfa      	ldrb	r2, [r7, #23]
 8001a04:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8001a06:	7e3a      	ldrb	r2, [r7, #24]
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	b291      	uxth	r1, r2
 8001a0c:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <recvfrom+0x3d4>)
 8001a0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <recvfrom+0x3d4>)
 8001a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	7e7b      	ldrb	r3, [r7, #25]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	440a      	add	r2, r1
 8001a26:	b291      	uxth	r1, r2
 8001a28:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <recvfrom+0x3d4>)
 8001a2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <recvfrom+0x3d8>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <recvfrom+0x3d4>)
 8001a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a3e:	89ba      	ldrh	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d202      	bcs.n	8001a4a <recvfrom+0x32e>
 8001a44:	89bb      	ldrh	r3, [r7, #12]
 8001a46:	83fb      	strh	r3, [r7, #30]
 8001a48:	e004      	b.n	8001a54 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <recvfrom+0x3d4>)
 8001a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a52:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001a54:	8bfa      	ldrh	r2, [r7, #30]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fffe 	bl	8000a5c <wiz_recv_data>
			break;
 8001a60:	e00b      	b.n	8001a7a <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8001a62:	8bfa      	ldrh	r2, [r7, #30]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f853 	bl	8000b14 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	491f      	ldr	r1, [pc, #124]	; (8001af0 <recvfrom+0x3d4>)
 8001a72:	8bfa      	ldrh	r2, [r7, #30]
 8001a74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8001a78:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	3301      	adds	r3, #1
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fde7 	bl	800065c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8001a8e:	bf00      	nop
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	3301      	adds	r3, #1
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd91 	bl	80005c4 <WIZCHIP_READ>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f3      	bne.n	8001a90 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <recvfrom+0x3d4>)
 8001aac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	8bfa      	ldrh	r2, [r7, #30]
 8001ab4:	1a8a      	subs	r2, r1, r2
 8001ab6:	b291      	uxth	r1, r2
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <recvfrom+0x3d4>)
 8001aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <recvfrom+0x3d4>)
 8001ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <recvfrom+0x3d8>)
 8001ace:	5cd2      	ldrb	r2, [r2, r3]
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	b2d1      	uxtb	r1, r2
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <recvfrom+0x3d8>)
 8001ada:	54d1      	strb	r1, [r2, r3]
 8001adc:	e003      	b.n	8001ae6 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <recvfrom+0x3d8>)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000010c 	.word	0x2000010c
 8001af4:	2000011c 	.word	0x2000011c

08001af8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70fb      	strb	r3, [r7, #3]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	807b      	strh	r3, [r7, #2]
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <reg_wizchip_cs_cbfunc+0x16>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <reg_wizchip_cs_cbfunc+0x40>)
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <reg_wizchip_cs_cbfunc+0x44>)
 8001bda:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <reg_wizchip_cs_cbfunc+0x40>)
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <reg_wizchip_cs_cbfunc+0x48>)
 8001be0:	619a      	str	r2, [r3, #24]
 8001be2:	e006      	b.n	8001bf2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <reg_wizchip_cs_cbfunc+0x40>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <reg_wizchip_cs_cbfunc+0x40>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6193      	str	r3, [r2, #24]
   }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000004 	.word	0x20000004
 8001c04:	08001b15 	.word	0x08001b15
 8001c08:	08001b23 	.word	0x08001b23

08001c0c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001c16:	bf00      	nop
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <reg_wizchip_spi_cbfunc+0x4c>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f9      	beq.n	8001c18 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <reg_wizchip_spi_cbfunc+0x24>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <reg_wizchip_spi_cbfunc+0x4c>)
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <reg_wizchip_spi_cbfunc+0x50>)
 8001c34:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <reg_wizchip_spi_cbfunc+0x4c>)
 8001c38:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <reg_wizchip_spi_cbfunc+0x54>)
 8001c3a:	621a      	str	r2, [r3, #32]
 8001c3c:	e006      	b.n	8001c4c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001c3e:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <reg_wizchip_spi_cbfunc+0x4c>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <reg_wizchip_spi_cbfunc+0x4c>)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6213      	str	r3, [r2, #32]
   }
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	08001b69 	.word	0x08001b69
 8001c60:	08001b79 	.word	0x08001b79

08001c64 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001c6e:	bf00      	nop
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f9      	beq.n	8001c70 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <reg_wizchip_spiburst_cbfunc+0x24>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <reg_wizchip_spiburst_cbfunc+0x50>)
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001c90:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
 8001c94:	e006      	b.n	8001ca4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001c96:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	08001b8f 	.word	0x08001b8f
 8001cb8:	08001ba7 	.word	0x08001ba7

08001cbc <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	f200 80c7 	bhi.w	8001e6a <ctlwizchip+0x1ae>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <ctlwizchip+0x28>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001d25 	.word	0x08001d25
 8001ce8:	08001d2b 	.word	0x08001d2b
 8001cec:	08001d57 	.word	0x08001d57
 8001cf0:	08001d4b 	.word	0x08001d4b
 8001cf4:	08001d65 	.word	0x08001d65
 8001cf8:	08001d71 	.word	0x08001d71
 8001cfc:	08001d7f 	.word	0x08001d7f
 8001d00:	08001da5 	.word	0x08001da5
 8001d04:	08001dcb 	.word	0x08001dcb
 8001d08:	08001e0f 	.word	0x08001e0f
 8001d0c:	08001e15 	.word	0x08001e15
 8001d10:	08001e1d 	.word	0x08001e1d
 8001d14:	08001e71 	.word	0x08001e71
 8001d18:	08001e25 	.word	0x08001e25
 8001d1c:	08001e33 	.word	0x08001e33
 8001d20:	08001e4f 	.word	0x08001e4f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001d24:	f000 f8ac 	bl	8001e80 <wizchip_sw_reset>
         break;
 8001d28:	e0a3      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3308      	adds	r3, #8
 8001d38:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f8e9 	bl	8001f18 <wizchip_init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	e094      	b.n	8001e74 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f96e 	bl	8002030 <wizchip_clrinterrupt>
         break;
 8001d54:	e08d      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001d56:	f000 f99f 	bl	8002098 <wizchip_getinterrupt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	801a      	strh	r2, [r3, #0]
         break;
 8001d62:	e086      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f9ba 	bl	80020e2 <wizchip_setinterruptmask>
         break;         
 8001d6e:	e080      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001d70:	f000 f9d2 	bl	8002118 <wizchip_getinterruptmask>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	801a      	strh	r2, [r3, #0]
         break;
 8001d7c:	e079      	b.n	8001e72 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001d8e:	f7fe fc65 	bl	800065c <WIZCHIP_WRITE>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001d9e:	f7fe fc5d 	bl	800065c <WIZCHIP_WRITE>
         break;
 8001da2:	e066      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001da4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001da8:	f7fe fc0c 	bl	80005c4 <WIZCHIP_READ>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b29c      	uxth	r4, r3
 8001db4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001db8:	f7fe fc04 	bl	80005c4 <WIZCHIP_READ>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4423      	add	r3, r4
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	801a      	strh	r2, [r3, #0]
         break;
 8001dc8:	e053      	b.n	8001e72 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <ctlwizchip+0x1c0>)
 8001dcc:	789a      	ldrb	r2, [r3, #2]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <ctlwizchip+0x1c0>)
 8001dd8:	78d2      	ldrb	r2, [r2, #3]
 8001dda:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3302      	adds	r3, #2
 8001de0:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <ctlwizchip+0x1c0>)
 8001de2:	7912      	ldrb	r2, [r2, #4]
 8001de4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3303      	adds	r3, #3
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <ctlwizchip+0x1c0>)
 8001dec:	7952      	ldrb	r2, [r2, #5]
 8001dee:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <ctlwizchip+0x1c0>)
 8001df6:	7992      	ldrb	r2, [r2, #6]
 8001df8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	3305      	adds	r3, #5
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <ctlwizchip+0x1c0>)
 8001e00:	79d2      	ldrb	r2, [r2, #7]
 8001e02:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3306      	adds	r3, #6
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
         break;
 8001e0c:	e031      	b.n	8001e72 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8001e0e:	f000 f9d5 	bl	80021bc <wizphy_reset>
         break;
 8001e12:	e02e      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001e14:	6838      	ldr	r0, [r7, #0]
 8001e16:	f000 f9f8 	bl	800220a <wizphy_setphyconf>
         break;
 8001e1a:	e02a      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f000 fa36 	bl	800228e <wizphy_getphyconf>
         break;
 8001e22:	e026      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fa99 	bl	8002360 <wizphy_setphypmode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	e020      	b.n	8001e74 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8001e32:	f000 f9aa 	bl	800218a <wizphy_getphypmode>
 8001e36:	4603      	mov	r3, r0
 8001e38:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	d102      	bne.n	8001e46 <ctlwizchip+0x18a>
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	e016      	b.n	8001e74 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7dfa      	ldrb	r2, [r7, #23]
 8001e4a:	701a      	strb	r2, [r3, #0]
         break;
 8001e4c:	e011      	b.n	8001e72 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8001e4e:	f000 f986 	bl	800215e <wizphy_getphylink>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2bff      	cmp	r3, #255	; 0xff
 8001e5a:	d102      	bne.n	8001e62 <ctlwizchip+0x1a6>
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	e008      	b.n	8001e74 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7dfa      	ldrb	r2, [r7, #23]
 8001e66:	701a      	strb	r2, [r3, #0]
         break;
 8001e68:	e003      	b.n	8001e72 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e001      	b.n	8001e74 <ctlwizchip+0x1b8>
         break;
 8001e70:	bf00      	nop
   }
   return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	20000004 	.word	0x20000004

08001e80 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2206      	movs	r2, #6
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001e90:	f7fe fc32 	bl	80006f8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ea0:	f7fe fc2a 	bl	80006f8 <WIZCHIP_READ_BUF>
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001eb0:	f7fe fc22 	bl	80006f8 <WIZCHIP_READ_BUF>
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ec0:	f7fe fc1a 	bl	80006f8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7fe fbc8 	bl	800065c <WIZCHIP_WRITE>
   getMR(); // for delay
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7fe fb79 	bl	80005c4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2206      	movs	r2, #6
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001edc:	f7fe fc6c 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001eec:	f7fe fc64 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001efc:	f7fe fc5c 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2204      	movs	r2, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f0c:	f7fe fc54 	bl	80007b8 <WIZCHIP_WRITE_BUF>
}
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001f26:	f7ff ffab 	bl	8001e80 <wizchip_sw_reset>
   if(txsize)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d03b      	beq.n	8001fa8 <wizchip_init+0x90>
   {
      tmp = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e015      	b.n	8001f66 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	dd02      	ble.n	8001f5a <wizchip_init+0x42>
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	e066      	b.n	8002028 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	2b07      	cmp	r3, #7
 8001f6c:	dde5      	ble.n	8001f3a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e015      	b.n	8001fa0 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001f82:	4618      	mov	r0, r3
 8001f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7fe fb64 	bl	800065c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa4:	2b07      	cmp	r3, #7
 8001fa6:	dde5      	ble.n	8001f74 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d03b      	beq.n	8002026 <wizchip_init+0x10e>
   {
      tmp = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e015      	b.n	8001fe4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	7bbb      	ldrb	r3, [r7, #14]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	dd02      	ble.n	8001fd8 <wizchip_init+0xc0>
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e027      	b.n	8002028 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	dde5      	ble.n	8001fb8 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e015      	b.n	800201e <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002000:	4618      	mov	r0, r3
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fb25 	bl	800065c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	2b07      	cmp	r3, #7
 8002024:	dde5      	ble.n	8001ff2 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b29b      	uxth	r3, r3
 8002044:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	f023 030f 	bic.w	r3, r3, #15
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002054:	f7fe fb02 	bl	800065c <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e014      	b.n	8002088 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800205e:	7bba      	ldrb	r2, [r7, #14]
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	fa42 f303 	asr.w	r3, r2, r3
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <wizchip_clrinterrupt+0x52>
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	3301      	adds	r3, #1
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800207a:	211f      	movs	r1, #31
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe faed 	bl	800065c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	3301      	adds	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b07      	cmp	r3, #7
 800208c:	d9e7      	bls.n	800205e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80020aa:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80020ae:	f7fe fa89 	bl	80005c4 <WIZCHIP_READ>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f023 030f 	bic.w	r3, r3, #15
 80020b8:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80020ba:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80020be:	f7fe fa81 	bl	80005c4 <WIZCHIP_READ>
 80020c2:	4603      	mov	r3, r0
 80020c4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80020ca:	88bb      	ldrh	r3, [r7, #4]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80020d8:	88bb      	ldrh	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4619      	mov	r1, r3
 80020fc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002100:	f7fe faac 	bl	800065c <WIZCHIP_WRITE>
   setSIMR(simr);
 8002104:	7bbb      	ldrb	r3, [r7, #14]
 8002106:	4619      	mov	r1, r3
 8002108:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800210c:	f7fe faa6 	bl	800065c <WIZCHIP_WRITE>
#endif   
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800212a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800212e:	f7fe fa49 	bl	80005c4 <WIZCHIP_READ>
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002136:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800213a:	f7fe fa43 	bl	80005c4 <WIZCHIP_READ>
 800213e:	4603      	mov	r3, r0
 8002140:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002146:	88bb      	ldrh	r3, [r7, #4]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b29a      	uxth	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4413      	add	r3, r2
 8002152:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002154:	88bb      	ldrh	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002164:	2300      	movs	r3, #0
 8002166:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002168:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800216c:	f7fe fa2a 	bl	80005c4 <WIZCHIP_READ>
 8002170:	4603      	mov	r3, r0
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800217a:	2301      	movs	r3, #1
 800217c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002194:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002198:	f7fe fa14 	bl	80005c4 <WIZCHIP_READ>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021a2:	2b30      	cmp	r3, #48	; 0x30
 80021a4:	d102      	bne.n	80021ac <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80021a6:	2301      	movs	r3, #1
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	e001      	b.n	80021b0 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80021ac:	2300      	movs	r3, #0
 80021ae:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80021c2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80021c6:	f7fe f9fd 	bl	80005c4 <WIZCHIP_READ>
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80021de:	f7fe fa3d 	bl	800065c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80021e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80021e6:	f7fe f9ed 	bl	80005c4 <WIZCHIP_READ>
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021f4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80021fe:	f7fe fa2d 	bl	800065c <WIZCHIP_WRITE>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d104      	bne.n	8002228 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e003      	b.n	8002230 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800222e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d104      	bne.n	8002242 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e019      	b.n	8002276 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	78db      	ldrb	r3, [r3, #3]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10d      	bne.n	8002266 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d104      	bne.n	800225c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	f043 0318 	orr.w	r3, r3, #24
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	e00c      	b.n	8002276 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e007      	b.n	8002276 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	789b      	ldrb	r3, [r3, #2]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d103      	bne.n	8002276 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	4619      	mov	r1, r3
 800227a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800227e:	f7fe f9ed 	bl	800065c <WIZCHIP_WRITE>
   wizphy_reset();
 8002282:	f7ff ff9b 	bl	80021bc <wizphy_reset>
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800229a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800229e:	f7fe f991 	bl	80005c4 <WIZCHIP_READ>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	119b      	asrs	r3, r3, #6
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d001      	beq.n	80022c4 <wizphy_getphyconf+0x36>
 80022c0:	2b38      	cmp	r3, #56	; 0x38
 80022c2:	d103      	bne.n	80022cc <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	705a      	strb	r2, [r3, #1]
         break;
 80022ca:	e003      	b.n	80022d4 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	705a      	strb	r2, [r3, #1]
         break;
 80022d2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022da:	3b10      	subs	r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	bf8c      	ite	hi
 80022e0:	2201      	movhi	r2, #1
 80022e2:	2200      	movls	r2, #0
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d111      	bne.n	800230e <wizphy_getphyconf+0x80>
 80022ea:	2201      	movs	r2, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80022f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	709a      	strb	r2, [r3, #2]
         break;
 800230c:	e003      	b.n	8002316 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	709a      	strb	r2, [r3, #2]
         break;
 8002314:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800231c:	3b08      	subs	r3, #8
 800231e:	2b18      	cmp	r3, #24
 8002320:	bf8c      	ite	hi
 8002322:	2201      	movhi	r2, #1
 8002324:	2200      	movls	r2, #0
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	2a00      	cmp	r2, #0
 800232a:	d111      	bne.n	8002350 <wizphy_getphyconf+0xc2>
 800232c:	2201      	movs	r2, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	70da      	strb	r2, [r3, #3]
         break;
 800234e:	e003      	b.n	8002358 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	70da      	strb	r2, [r3, #3]
         break;
 8002356:	bf00      	nop
   }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800236e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002372:	f7fe f927 	bl	80005c4 <WIZCHIP_READ>
 8002376:	4603      	mov	r3, r0
 8002378:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <wizphy_setphypmode+0x2a>
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	e030      	b.n	80023ec <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002390:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d104      	bne.n	80023a2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e003      	b.n	80023aa <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80023a8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80023b2:	f7fe f953 	bl	800065c <WIZCHIP_WRITE>
   wizphy_reset();
 80023b6:	f7ff ff01 	bl	80021bc <wizphy_reset>
   tmp = getPHYCFGR();
 80023ba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80023be:	f7fe f901 	bl	80005c4 <WIZCHIP_READ>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <wizphy_setphypmode+0x88>
 80023d6:	2300      	movs	r3, #0
 80023d8:	e008      	b.n	80023ec <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <wizphy_setphypmode+0x88>
 80023e4:	2300      	movs	r3, #0
 80023e6:	e001      	b.n	80023ec <wizphy_setphypmode+0x8c>
   }
   return -1;
 80023e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2206      	movs	r2, #6
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002406:	f7fe f9d7 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	330e      	adds	r3, #14
 800240e:	2204      	movs	r2, #4
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002416:	f7fe f9cf 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	330a      	adds	r3, #10
 800241e:	2204      	movs	r2, #4
 8002420:	4619      	mov	r1, r3
 8002422:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002426:	f7fe f9c7 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3306      	adds	r3, #6
 800242e:	2204      	movs	r2, #4
 8002430:	4619      	mov	r1, r3
 8002432:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002436:	f7fe f9bf 	bl	80007b8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7c9a      	ldrb	r2, [r3, #18]
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <wizchip_setnetinfo+0x78>)
 8002440:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7cda      	ldrb	r2, [r3, #19]
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <wizchip_setnetinfo+0x78>)
 8002448:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7d1a      	ldrb	r2, [r3, #20]
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <wizchip_setnetinfo+0x78>)
 8002450:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7d5a      	ldrb	r2, [r3, #21]
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <wizchip_setnetinfo+0x78>)
 8002458:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7d9a      	ldrb	r2, [r3, #22]
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <wizchip_setnetinfo+0x7c>)
 8002460:	701a      	strb	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000124 	.word	0x20000124
 8002470:	20000128 	.word	0x20000128

08002474 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b29a      	uxth	r2, r3
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	4413      	add	r3, r2
 8002494:	81fb      	strh	r3, [r7, #14]
	return i;
 8002496:	89fb      	ldrh	r3, [r7, #14]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	b299      	uxth	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]
	return s;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80024da:	b480      	push	{r7}
 80024dc:	b08b      	sub	sp, #44	; 0x2c
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	623a      	str	r2, [r7, #32]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <parse_name+0x34>
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 800250e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002514:	2bc0      	cmp	r3, #192	; 0xc0
 8002516:	d117      	bne.n	8002548 <parse_name+0x6e>
		{
			if (!indirect)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <parse_name+0x4a>
				clen++;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8002524:	2301      	movs	r3, #1
 8002526:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8002528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	4413      	add	r3, r2
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	623a      	str	r2, [r7, #32]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8002548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800254a:	2b00      	cmp	r3, #0
 800254c:	d02b      	beq.n	80025a6 <parse_name+0xcc>
			break;

		len -= slen + 1;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29b      	uxth	r3, r3
 800255a:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800255c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002560:	2b00      	cmp	r3, #0
 8002562:	da02      	bge.n	800256a <parse_name+0x90>
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	e038      	b.n	80025dc <parse_name+0x102>

		if (!indirect) clen += slen;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10c      	bne.n	800258a <parse_name+0xb0>
 8002570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8002578:	e007      	b.n	800258a <parse_name+0xb0>
 800257a:	6a3a      	ldr	r2, [r7, #32]
 800257c:	1c53      	adds	r3, r2, #1
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	6079      	str	r1, [r7, #4]
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f2      	bne.n	800257a <parse_name+0xa0>
		*buf++ = '.';
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	222e      	movs	r2, #46	; 0x2e
 800259c:	701a      	strb	r2, [r3, #0]
		nseg++;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 80025a4:	e7a8      	b.n	80024f8 <parse_name+0x1e>
			break;
 80025a6:	bf00      	nop
	}

	if (nseg == 0)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	222e      	movs	r2, #46	; 0x2e
 80025b6:	701a      	strb	r2, [r3, #0]
		len--;
 80025b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
	len--;
 80025ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80025da:	69fb      	ldr	r3, [r7, #28]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	372c      	adds	r7, #44	; 0x2c
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0b4      	sub	sp, #208	; 0xd0
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80025f2:	f107 020c 	add.w	r2, r7, #12
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ff6d 	bl	80024da <parse_name>
 8002600:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 8002604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d101      	bne.n	8002612 <dns_question+0x2a>
 800260e:	2300      	movs	r3, #0
 8002610:	e00b      	b.n	800262a <dns_question+0x42>

	cp += len;
 8002612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	3302      	adds	r3, #2
 8002620:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3302      	adds	r3, #2
 8002626:	603b      	str	r3, [r7, #0]

	return cp;
 8002628:	683b      	ldr	r3, [r7, #0]
}
 800262a:	4618      	mov	r0, r3
 800262c:	37d0      	adds	r7, #208	; 0xd0
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0b6      	sub	sp, #216	; 0xd8
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002640:	f107 0210 	add.w	r2, r7, #16
 8002644:	23c0      	movs	r3, #192	; 0xc0
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff ff46 	bl	80024da <parse_name>
 800264e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 8002652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d101      	bne.n	8002660 <dns_answer+0x2c>
 800265c:	2300      	movs	r3, #0
 800265e:	e0dd      	b.n	800281c <dns_answer+0x1e8>

	cp += len;
 8002660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800266a:	68b8      	ldr	r0, [r7, #8]
 800266c:	f7ff ff02 	bl	8002474 <get16>
 8002670:	4603      	mov	r3, r0
 8002672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3302      	adds	r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3302      	adds	r3, #2
 8002680:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3304      	adds	r3, #4
 8002686:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3302      	adds	r3, #2
 800268c:	60bb      	str	r3, [r7, #8]


	switch (type)
 800268e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002692:	3b01      	subs	r3, #1
 8002694:	2b0f      	cmp	r3, #15
 8002696:	f200 80bf 	bhi.w	8002818 <dns_answer+0x1e4>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <dns_answer+0x6c>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026e1 	.word	0x080026e1
 80026a4:	08002719 	.word	0x08002719
 80026a8:	08002819 	.word	0x08002819
 80026ac:	08002819 	.word	0x08002819
 80026b0:	08002719 	.word	0x08002719
 80026b4:	080027a5 	.word	0x080027a5
 80026b8:	08002719 	.word	0x08002719
 80026bc:	08002719 	.word	0x08002719
 80026c0:	08002719 	.word	0x08002719
 80026c4:	08002819 	.word	0x08002819
 80026c8:	08002819 	.word	0x08002819
 80026cc:	08002719 	.word	0x08002719
 80026d0:	08002745 	.word	0x08002745
 80026d4:	08002819 	.word	0x08002819
 80026d8:	08002773 	.word	0x08002773
 80026dc:	08002819 	.word	0x08002819
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	3201      	adds	r2, #1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	60ba      	str	r2, [r7, #8]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	3202      	adds	r2, #2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	60ba      	str	r2, [r7, #8]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	3203      	adds	r2, #3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	7013      	strb	r3, [r2, #0]
		break;
 8002716:	e080      	b.n	800281a <dns_answer+0x1e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
 8002718:	f107 0210 	add.w	r2, r7, #16
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff feda 	bl	80024da <parse_name>
 8002726:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800272a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d101      	bne.n	8002738 <dns_answer+0x104>
 8002734:	2300      	movs	r3, #0
 8002736:	e071      	b.n	800281c <dns_answer+0x1e8>

		cp += len;
 8002738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	4413      	add	r3, r2
 8002740:	60bb      	str	r3, [r7, #8]
		break;
 8002742:	e06a      	b.n	800281a <dns_answer+0x1e6>
	case TYPE_HINFO:
		len = *cp++;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	60ba      	str	r2, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8002750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	4413      	add	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]

		len = *cp++;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	60ba      	str	r2, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8002766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
		break;
 8002770:	e053      	b.n	800281a <dns_answer+0x1e6>
	case TYPE_MX:
		cp += 2;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3302      	adds	r3, #2
 8002776:	60bb      	str	r3, [r7, #8]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
 8002778:	f107 0210 	add.w	r2, r7, #16
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff feaa 	bl	80024da <parse_name>
 8002786:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800278a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d101      	bne.n	8002798 <dns_answer+0x164>
 8002794:	2300      	movs	r3, #0
 8002796:	e041      	b.n	800281c <dns_answer+0x1e8>

		cp += len;
 8002798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	4413      	add	r3, r2
 80027a0:	60bb      	str	r3, [r7, #8]
		break;
 80027a2:	e03a      	b.n	800281a <dns_answer+0x1e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
 80027a4:	f107 0210 	add.w	r2, r7, #16
 80027a8:	23c0      	movs	r3, #192	; 0xc0
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fe94 	bl	80024da <parse_name>
 80027b2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80027b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d101      	bne.n	80027c4 <dns_answer+0x190>
 80027c0:	2300      	movs	r3, #0
 80027c2:	e02b      	b.n	800281c <dns_answer+0x1e8>

		cp += len;
 80027c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	4413      	add	r3, r2
 80027cc:	60bb      	str	r3, [r7, #8]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
 80027ce:	f107 0210 	add.w	r2, r7, #16
 80027d2:	23c0      	movs	r3, #192	; 0xc0
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fe7f 	bl	80024da <parse_name>
 80027dc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80027e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d101      	bne.n	80027ee <dns_answer+0x1ba>
 80027ea:	2300      	movs	r3, #0
 80027ec:	e016      	b.n	800281c <dns_answer+0x1e8>

		cp += len;
 80027ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4413      	add	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]

		cp += 4;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3304      	adds	r3, #4
 80027fc:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3304      	adds	r3, #4
 8002802:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	3304      	adds	r3, #4
 8002808:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3304      	adds	r3, #4
 800280e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	3304      	adds	r3, #4
 8002814:	60bb      	str	r3, [r7, #8]
		break;
 8002816:	e000      	b.n	800281a <dns_answer+0x1e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8002818:	bf00      	nop
	}

	return cp;
 800281a:	68bb      	ldr	r3, [r7, #8]
}
 800281c:	4618      	mov	r0, r3
 800281e:	37d8      	adds	r7, #216	; 0xd8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8002834:	2212      	movs	r2, #18
 8002836:	2100      	movs	r1, #0
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f004 fdb3 	bl	80073a4 <memset>

	pdhdr->id = get16(&msg[0]);
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff fe18 	bl	8002474 <get16>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3302      	adds	r3, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fe0f 	bl	8002474 <get16>
 8002856:	4603      	mov	r3, r0
 8002858:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800285a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800285e:	2b00      	cmp	r3, #0
 8002860:	da02      	bge.n	8002868 <parseDNSMSG+0x44>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8002868:	8a7b      	ldrh	r3, [r7, #18]
 800286a:	0adb      	lsrs	r3, r3, #11
 800286c:	b29b      	uxth	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800287a:	8a7b      	ldrh	r3, [r7, #18]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <parseDNSMSG+0x66>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800288a:	8a7b      	ldrh	r3, [r7, #18]
 800288c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <parseDNSMSG+0x76>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800289a:	8a7b      	ldrh	r3, [r7, #18]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <parseDNSMSG+0x86>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80028aa:	8a7b      	ldrh	r3, [r7, #18]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <parseDNSMSG+0x96>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80028ba:	8a7b      	ldrh	r3, [r7, #18]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fdd1 	bl	8002474 <get16>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3306      	adds	r3, #6
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fdc8 	bl	8002474 <get16>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3308      	adds	r3, #8
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fdbf 	bl	8002474 <get16>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	330a      	adds	r3, #10
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fdb6 	bl	8002474 <get16>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	330c      	adds	r3, #12
 8002914:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8002916:	2300      	movs	r3, #0
 8002918:	83fb      	strh	r3, [r7, #30]
 800291a:	e00d      	b.n	8002938 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff fe62 	bl	80025e8 <dns_question>
 8002924:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <parseDNSMSG+0x10e>
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	e03b      	b.n	80029aa <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8002932:	8bfb      	ldrh	r3, [r7, #30]
 8002934:	3301      	adds	r3, #1
 8002936:	83fb      	strh	r3, [r7, #30]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	895b      	ldrh	r3, [r3, #10]
 800293c:	8bfa      	ldrh	r2, [r7, #30]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3ec      	bcc.n	800291c <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	83fb      	strh	r3, [r7, #30]
 8002946:	e00e      	b.n	8002966 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	6978      	ldr	r0, [r7, #20]
 800294e:	f7ff fe71 	bl	8002634 <dns_answer>
 8002952:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <parseDNSMSG+0x13c>
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	e024      	b.n	80029aa <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8002960:	8bfb      	ldrh	r3, [r7, #30]
 8002962:	3301      	adds	r3, #1
 8002964:	83fb      	strh	r3, [r7, #30]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	899b      	ldrh	r3, [r3, #12]
 800296a:	8bfa      	ldrh	r2, [r7, #30]
 800296c:	429a      	cmp	r2, r3
 800296e:	d3eb      	bcc.n	8002948 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8002970:	2300      	movs	r3, #0
 8002972:	83fb      	strh	r3, [r7, #30]
 8002974:	e002      	b.n	800297c <parseDNSMSG+0x158>
 8002976:	8bfb      	ldrh	r3, [r7, #30]
 8002978:	3301      	adds	r3, #1
 800297a:	83fb      	strh	r3, [r7, #30]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	89db      	ldrh	r3, [r3, #14]
 8002980:	8bfa      	ldrh	r2, [r7, #30]
 8002982:	429a      	cmp	r2, r3
 8002984:	d3f7      	bcc.n	8002976 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	83fb      	strh	r3, [r7, #30]
 800298a:	e002      	b.n	8002992 <parseDNSMSG+0x16e>
 800298c:	8bfb      	ldrh	r3, [r7, #30]
 800298e:	3301      	adds	r3, #1
 8002990:	83fb      	strh	r3, [r7, #30]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8a1b      	ldrh	r3, [r3, #16]
 8002996:	8bfa      	ldrh	r2, [r7, #30]
 8002998:	429a      	cmp	r2, r3
 800299a:	d3f7      	bcc.n	800298c <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	7a1b      	ldrb	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <parseDNSMSG+0x184>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <parseDNSMSG+0x186>
	else return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0b8      	sub	sp, #224	; 0xe0
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	81fb      	strh	r3, [r7, #14]
 80029c4:	4613      	mov	r3, r2
 80029c6:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <dns_makequery+0x178>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <dns_makequery+0x178>)
 80029d8:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <dns_makequery+0x178>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80029e4:	f7ff fd5e 	bl	80024a4 <put16>
 80029e8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	02db      	lsls	r3, r3, #11
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 80029fc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a00:	4619      	mov	r1, r3
 8002a02:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002a06:	f7ff fd4d 	bl	80024a4 <put16>
 8002a0a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002a14:	f7ff fd46 	bl	80024a4 <put16>
 8002a18:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002a22:	f7ff fd3f 	bl	80024a4 <put16>
 8002a26:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002a30:	f7ff fd38 	bl	80024a4 <put16>
 8002a34:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8002a38:	2100      	movs	r1, #0
 8002a3a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002a3e:	f7ff fd31 	bl	80024a4 <put16>
 8002a42:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 fe7f 	bl	8007750 <strcpy>
	dname = sname;
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 8002a5a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002a5e:	f7fd fbd7 	bl	8000210 <strlen>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8002a68:	212e      	movs	r1, #46	; 0x2e
 8002a6a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002a6e:	f004 fe62 	bl	8007736 <strchr>
 8002a72:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8002a76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <dns_makequery+0xd8>
 8002a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	81bb      	strh	r3, [r7, #12]
 8002a8a:	e002      	b.n	8002a92 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8002a8c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002a90:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8002a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a9c:	89ba      	ldrh	r2, [r7, #12]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8002aa2:	89bb      	ldrh	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d029      	beq.n	8002afc <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8002aa8:	89bb      	ldrh	r3, [r7, #12]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002ab0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002ab4:	f004 fe68 	bl	8007788 <strncpy>
		cp += len;
 8002ab8:	89bb      	ldrh	r3, [r7, #12]
 8002aba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002abe:	4413      	add	r3, r2
 8002ac0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8002ac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8002acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
			break;
 8002ada:	e010      	b.n	8002afe <dns_makequery+0x14a>
		}
		dname += len+1;
 8002adc:	89bb      	ldrh	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 8002aea:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002aee:	89bb      	ldrh	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 8002afa:	e7b5      	b.n	8002a68 <dns_makequery+0xb4>
		if (len == 0) break;
 8002afc:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8002afe:	2101      	movs	r1, #1
 8002b00:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002b04:	f7ff fcce 	bl	80024a4 <put16>
 8002b08:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002b12:	f7ff fcc7 	bl	80024a4 <put16>
 8002b16:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8002b1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	b21b      	sxth	r3, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	37e0      	adds	r7, #224	; 0xe0
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000132 	.word	0x20000132

08002b30 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <check_DNS_timeout+0x44>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d914      	bls.n	8002b66 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <check_DNS_timeout+0x44>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <check_DNS_timeout+0x48>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d905      	bls.n	8002b56 <check_DNS_timeout+0x26>
			retry_count = 0;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <check_DNS_timeout+0x48>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
 8002b54:	e008      	b.n	8002b68 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <check_DNS_timeout+0x48>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <check_DNS_timeout+0x48>)
 8002b60:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000134 	.word	0x20000134
 8002b78:	20000138 	.word	0x20000138

08002b7c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8002b88:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <DNS_init+0x2c>)
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <DNS_init+0x30>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <DNS_init+0x34>)
 8002b96:	f241 1222 	movw	r2, #4386	; 0x1122
 8002b9a:	801a      	strh	r2, [r3, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	20000130 	.word	0x20000130
 8002bac:	2000012c 	.word	0x2000012c
 8002bb0:	20000132 	.word	0x20000132

08002bb4 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b08f      	sub	sp, #60	; 0x3c
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <DNS_run+0xfc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <DNS_run+0x100>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <DNS_run+0x104>)
 8002bce:	7818      	ldrb	r0, [r3, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	f7fd ffe5 	bl	8000ba4 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <DNS_run+0x108>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff fee5 	bl	80029b4 <dns_makequery>
 8002bea:	4603      	mov	r3, r0
 8002bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <DNS_run+0x104>)
 8002bf0:	7818      	ldrb	r0, [r3, #0]
 8002bf2:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <DNS_run+0x108>)
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002bf8:	2335      	movs	r3, #53	; 0x35
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f7fe fc57 	bl	80014b0 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <DNS_run+0x104>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fe81 	bl	800090e <getSn_RX_RSR>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002c10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d029      	beq.n	8002c6a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8002c16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1c:	d902      	bls.n	8002c24 <DNS_run+0x70>
 8002c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c22:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <DNS_run+0x104>)
 8002c26:	7818      	ldrb	r0, [r3, #0]
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <DNS_run+0x108>)
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	f107 0414 	add.w	r4, r7, #20
 8002c30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c32:	f107 0312 	add.w	r3, r7, #18
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4623      	mov	r3, r4
 8002c3a:	f7fe fd6f 	bl	800171c <recvfrom>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8002c42:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <DNS_run+0x108>)
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	f107 0318 	add.w	r3, r7, #24
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fde9 	bl	8002824 <parseDNSMSG>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8002c58:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <DNS_run+0x104>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe f8b6 	bl	8000dd0 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8002c64:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8002c68:	e01e      	b.n	8002ca8 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8002c6a:	f7ff ff61 	bl	8002b30 <check_DNS_timeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8002c74:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da06      	bge.n	8002c8a <DNS_run+0xd6>
			close(DNS_SOCKET);
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <DNS_run+0x104>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe f8a5 	bl	8000dd0 <close>
			return 0; // timeout occurred
 8002c86:	2300      	movs	r3, #0
 8002c88:	e00e      	b.n	8002ca8 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8002c8a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1b7      	bne.n	8002c02 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <DNS_run+0x104>)
 8002c94:	7818      	ldrb	r0, [r3, #0]
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <DNS_run+0x108>)
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c9c:	2335      	movs	r3, #53	; 0x35
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f7fe fc05 	bl	80014b0 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002ca6:	e7ac      	b.n	8002c02 <DNS_run+0x4e>
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3734      	adds	r7, #52	; 0x34
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	20000138 	.word	0x20000138
 8002cb4:	20000134 	.word	0x20000134
 8002cb8:	20000130 	.word	0x20000130
 8002cbc:	2000012c 	.word	0x2000012c

08002cc0 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <getNextPacketId+0x1c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	e000      	b.n	8002d02 <getNextPacketId+0x1e>
 8002d00:	2301      	movs	r3, #1
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8002d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	617b      	str	r3, [r7, #20]
        sent = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8002d2c:	e018      	b.n	8002d60 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d32:	689c      	ldr	r4, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	18d6      	adds	r6, r2, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fd99 	bl	8003878 <TimerLeftMS>
 8002d46:	4603      	mov	r3, r0
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	47a0      	blx	r4
 8002d50:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0e      	blt.n	8002d76 <sendPacket+0x60>
            break;
        sent += rc;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	da07      	bge.n	8002d78 <sendPacket+0x62>
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fd43 	bl	80037f4 <TimerIsExpired>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0dc      	beq.n	8002d2e <sendPacket+0x18>
 8002d74:	e000      	b.n	8002d78 <sendPacket+0x62>
            break;
 8002d76:	bf00      	nop
    }
    if (sent == length)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10b      	bne.n	8002d98 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f000 fd5b 	bl	8003848 <TimerCountdown>
        rc = SUCCESSS;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	e002      	b.n	8002d9e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	617b      	str	r3, [r7, #20]
    return rc;
 8002d9e:	697b      	ldr	r3, [r7, #20]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e009      	b.n	8002dd6 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	ddf2      	ble.n	8002dc2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df2:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df8:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3354      	adds	r3, #84	; 0x54
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fcde 	bl	80037d8 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8002e1c:	bf00      	nop
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b08b      	sub	sp, #44	; 0x2c
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8002e38:	2304      	movs	r3, #4
 8002e3a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dd03      	ble.n	8002e5e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	61bb      	str	r3, [r7, #24]
            goto exit;
 8002e5c:	e021      	b.n	8002ea2 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	685c      	ldr	r4, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002e68:	f107 0117 	add.w	r1, r7, #23
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	47a0      	blx	r4
 8002e72:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d112      	bne.n	8002ea0 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	441a      	add	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	01db      	lsls	r3, r3, #7
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	dbd1      	blt.n	8002e42 <decodePacket+0x1e>
exit:
 8002e9e:	e000      	b.n	8002ea2 <decodePacket+0x7e>
            goto exit;
 8002ea0:	bf00      	nop
    return len;
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	372c      	adds	r7, #44	; 0x2c
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8002eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
    int len = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ecc:	685c      	ldr	r4, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	695e      	ldr	r6, [r3, #20]
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	f000 fcce 	bl	8003878 <TimerLeftMS>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4631      	mov	r1, r6
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	47a0      	blx	r4
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d13b      	bne.n	8002f64 <readPacket+0xb8>
        goto exit;

    len = 1;
 8002eec:	2301      	movs	r3, #1
 8002eee:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8002ef0:	68b8      	ldr	r0, [r7, #8]
 8002ef2:	f000 fcc1 	bl	8003878 <TimerLeftMS>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	4619      	mov	r1, r3
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff ff90 	bl	8002e24 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f817 	bl	8003f42 <MQTTPacket_encode>
 8002f14:	4602      	mov	r2, r0
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	dd16      	ble.n	8002f50 <readPacket+0xa4>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f26:	685c      	ldr	r4, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	18d6      	adds	r6, r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	68b8      	ldr	r0, [r7, #8]
 8002f3a:	f000 fc9d 	bl	8003878 <TimerLeftMS>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4631      	mov	r1, r6
 8002f44:	4628      	mov	r0, r5
 8002f46:	47a0      	blx	r4
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d10b      	bne.n	8002f68 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8002f58:	7d3b      	ldrb	r3, [r7, #20]
 8002f5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e002      	b.n	8002f6a <readPacket+0xbe>
        goto exit;
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <readPacket+0xbe>
        goto exit;
 8002f68:	bf00      	nop
exit:
    return rc;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3724      	adds	r7, #36	; 0x24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f74 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8002f94:	e039      	b.n	800300a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8002f9c:	d103      	bne.n	8002fa6 <isTopicMatched+0x32>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8002fa4:	d13a      	bne.n	800301c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b2b      	cmp	r3, #43	; 0x2b
 8002fac:	d009      	beq.n	8002fc2 <isTopicMatched+0x4e>
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b23      	cmp	r3, #35	; 0x23
 8002fb4:	d005      	beq.n	8002fc2 <isTopicMatched+0x4e>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d12e      	bne.n	8003020 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b2b      	cmp	r3, #43	; 0x2b
 8002fc8:	d112      	bne.n	8002ff0 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8002fd0:	e005      	b.n	8002fde <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d20b      	bcs.n	8002ffe <isTopicMatched+0x8a>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b2f      	cmp	r3, #47	; 0x2f
 8002fec:	d1f1      	bne.n	8002fd2 <isTopicMatched+0x5e>
 8002fee:	e006      	b.n	8002ffe <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b23      	cmp	r3, #35	; 0x23
 8002ff6:	d102      	bne.n	8002ffe <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	613b      	str	r3, [r7, #16]
        curf++;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
        curn++;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	3301      	adds	r3, #1
 8003008:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <isTopicMatched+0xae>
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	d3bd      	bcc.n	8002f96 <isTopicMatched+0x22>
 800301a:	e002      	b.n	8003022 <isTopicMatched+0xae>
            break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <isTopicMatched+0xae>
            break;
 8003020:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	d105      	bne.n	8003036 <isTopicMatched+0xc2>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <isTopicMatched+0xc2>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <isTopicMatched+0xc4>
 8003036:	2300      	movs	r3, #0
 8003038:	b2db      	uxtb	r3, r3
}
 800303a:	4618      	mov	r0, r3
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
 800305c:	e03f      	b.n	80030de <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	3304      	adds	r3, #4
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d034      	beq.n	80030d8 <deliverMessage+0x92>
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	3304      	adds	r3, #4
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4619      	mov	r1, r3
 800307c:	68b8      	ldr	r0, [r7, #8]
 800307e:	f001 f92f 	bl	80042e0 <MQTTPacket_equals>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10c      	bne.n	80030a2 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	3304      	adds	r3, #4
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff6c 	bl	8002f74 <isTopicMatched>
 800309c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01a      	beq.n	80030d8 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	3304      	adds	r3, #4
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d012      	beq.n	80030d8 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80030b2:	f107 0318 	add.w	r3, r7, #24
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fe00 	bl	8002cc0 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	3304      	adds	r3, #4
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f107 0218 	add.w	r2, r7, #24
 80030d0:	4610      	mov	r0, r2
 80030d2:	4798      	blx	r3
                rc = SUCCESSS;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	3301      	adds	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	ddbc      	ble.n	800305e <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d112      	bne.n	8003112 <deliverMessage+0xcc>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fddf 	bl	8002cc0 <NewMessageData>
        c->defaultMessageHandler(&md);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	f107 0210 	add.w	r2, r7, #16
 800310a:	4610      	mov	r0, r2
 800310c:	4798      	blx	r3
        rc = SUCCESSS;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8003112:	6a3b      	ldr	r3, [r7, #32]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3728      	adds	r7, #40	; 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <keepalive>:


int keepalive(MQTTClient* c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
        goto exit;
 8003136:	e033      	b.n	80031a0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3354      	adds	r3, #84	; 0x54
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fb59 	bl	80037f4 <TimerIsExpired>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d02a      	beq.n	800319e <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	7f1b      	ldrb	r3, [r3, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d126      	bne.n	800319e <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8003150:	f107 0308 	add.w	r3, r7, #8
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fb3f 	bl	80037d8 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fb5c 	bl	8003820 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f000 fe19 	bl	8003daa <MQTTSerialize_pingreq>
 8003178:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	dd0f      	ble.n	80031a0 <keepalive+0x84>
 8003180:	f107 0308 	add.w	r3, r7, #8
 8003184:	461a      	mov	r2, r3
 8003186:	6939      	ldr	r1, [r7, #16]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff fdc4 	bl	8002d16 <sendPacket>
 800318e:	6178      	str	r0, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <keepalive+0x84>
                c->ping_outstanding = 1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	771a      	strb	r2, [r3, #28]
 800319c:	e000      	b.n	80031a0 <keepalive+0x84>
        }
    }

exit:
 800319e:	bf00      	nop
    return rc;
 80031a0:	697b      	ldr	r3, [r7, #20]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80031ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ae:	b095      	sub	sp, #84	; 0x54
 80031b0:	af06      	add	r7, sp, #24
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 80031b6:	6839      	ldr	r1, [r7, #0]
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fe77 	bl	8002eac <readPacket>
 80031be:	4603      	mov	r3, r0
 80031c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 80031c2:	2300      	movs	r3, #0
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 80031c6:	2300      	movs	r3, #0
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 80031ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031cc:	3b02      	subs	r3, #2
 80031ce:	2b0b      	cmp	r3, #11
 80031d0:	f200 80c0 	bhi.w	8003354 <cycle+0x1a8>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <cycle+0x30>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003355 	.word	0x08003355
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	08003355 	.word	0x08003355
 80031e8:	080032d5 	.word	0x080032d5
 80031ec:	08003355 	.word	0x08003355
 80031f0:	08003355 	.word	0x08003355
 80031f4:	08003355 	.word	0x08003355
 80031f8:	08003355 	.word	0x08003355
 80031fc:	08003355 	.word	0x08003355
 8003200:	08003355 	.word	0x08003355
 8003204:	08003355 	.word	0x08003355
 8003208:	08003347 	.word	0x08003347
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8003214:	4616      	mov	r6, r2
 8003216:	f107 0210 	add.w	r2, r7, #16
 800321a:	1d15      	adds	r5, r2, #4
 800321c:	f107 0210 	add.w	r2, r7, #16
 8003220:	1c54      	adds	r4, r2, #1
 8003222:	f107 010c 	add.w	r1, r7, #12
 8003226:	f107 0210 	add.w	r2, r7, #16
 800322a:	1c90      	adds	r0, r2, #2
 800322c:	9604      	str	r6, [sp, #16]
 800322e:	9303      	str	r3, [sp, #12]
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	330c      	adds	r3, #12
 8003236:	9302      	str	r3, [sp, #8]
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	3308      	adds	r3, #8
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	f107 0320 	add.w	r3, r7, #32
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	462b      	mov	r3, r5
 8003248:	4622      	mov	r2, r4
 800324a:	f000 fdbd 	bl	8003dc8 <MQTTDeserialize_publish>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 8083 	bne.w	800335c <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800325c:	f107 0210 	add.w	r2, r7, #16
 8003260:	f107 0320 	add.w	r3, r7, #32
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff feed 	bl	8003046 <deliverMessage>
            if (msg.qos != QOS0)
 800326c:	7c3b      	ldrb	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06d      	beq.n	800334e <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8003272:	7c3b      	ldrb	r3, [r7, #16]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10c      	bne.n	8003292 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6918      	ldr	r0, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4619      	mov	r1, r3
 8003282:	8abb      	ldrh	r3, [r7, #20]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2300      	movs	r3, #0
 8003288:	2204      	movs	r2, #4
 800328a:	f001 f8f6 	bl	800447a <MQTTSerialize_ack>
 800328e:	6378      	str	r0, [r7, #52]	; 0x34
 8003290:	e00e      	b.n	80032b0 <cycle+0x104>
                else if (msg.qos == QOS2)
 8003292:	7c3b      	ldrb	r3, [r7, #16]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d10b      	bne.n	80032b0 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6918      	ldr	r0, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4619      	mov	r1, r3
 80032a2:	8abb      	ldrh	r3, [r7, #20]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	2205      	movs	r2, #5
 80032aa:	f001 f8e6 	bl	800447a <MQTTSerialize_ack>
 80032ae:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dc03      	bgt.n	80032be <cycle+0x112>
                    rc = FAILURE;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
 80032bc:	e005      	b.n	80032ca <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fd27 	bl	8002d16 <sendPacket>
 80032c8:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d13d      	bne.n	800334e <cycle+0x1a2>
                    goto exit; // there was a problem
 80032d2:	e044      	b.n	800335e <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695c      	ldr	r4, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f107 020a 	add.w	r2, r7, #10
 80032e0:	f107 0109 	add.w	r1, r7, #9
 80032e4:	f107 0008 	add.w	r0, r7, #8
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	4623      	mov	r3, r4
 80032ec:	f000 fdde 	bl	8003eac <MQTTDeserialize_ack>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d003      	beq.n	80032fe <cycle+0x152>
                rc = FAILURE;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
 80032fc:	e01e      	b.n	800333c <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6918      	ldr	r0, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	4619      	mov	r1, r3
 8003308:	897b      	ldrh	r3, [r7, #10]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	2206      	movs	r2, #6
 8003310:	f001 f8b3 	bl	800447a <MQTTSerialize_ack>
 8003314:	6378      	str	r0, [r7, #52]	; 0x34
 8003316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003318:	2b00      	cmp	r3, #0
 800331a:	dc03      	bgt.n	8003324 <cycle+0x178>
                rc = FAILURE;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
 8003322:	e00b      	b.n	800333c <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff fcf4 	bl	8002d16 <sendPacket>
 800332e:	6338      	str	r0, [r7, #48]	; 0x30
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <cycle+0x190>
                rc = FAILURE; // there was a problem
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d106      	bne.n	8003352 <cycle+0x1a6>
                goto exit; // there was a problem
 8003344:	e00b      	b.n	800335e <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
            break;
 800334c:	e002      	b.n	8003354 <cycle+0x1a8>
            break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <cycle+0x1a8>
            break;
 8003352:	bf00      	nop
    }
    keepalive(c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fee1 	bl	800311c <keepalive>
 800335a:	e000      	b.n	800335e <cycle+0x1b2>
                goto exit;
 800335c:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <cycle+0x1bc>
        rc = packet_type;
 8003364:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003366:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800336a:	4618      	mov	r0, r3
 800336c:	373c      	adds	r7, #60	; 0x3c
 800336e:	46bd      	mov	sp, r7
 8003370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003372:	bf00      	nop

08003374 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8003382:	f107 030c 	add.w	r3, r7, #12
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fa26 	bl	80037d8 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fa43 	bl	8003820 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ff03 	bl	80031ac <cycle>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d102      	bne.n	80033b4 <MQTTYield+0x40>
    {
        rc = FAILURE;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	617b      	str	r3, [r7, #20]
    }

    return rc;
 80033b4:	697b      	ldr	r3, [r7, #20]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fa0f 	bl	80037f4 <TimerIsExpired>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff fee4 	bl	80031ac <cycle>
 80033e4:	6178      	str	r0, [r7, #20]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d1f0      	bne.n	80033d0 <waitfor+0x12>
 80033ee:	e000      	b.n	80033f2 <waitfor+0x34>
            break; // we timed out
 80033f0:	bf00      	nop

    return rc;
 80033f2:	697b      	ldr	r3, [r7, #20]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b09e      	sub	sp, #120	; 0x78
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800340c:	4a3d      	ldr	r2, [pc, #244]	; (8003504 <MQTTConnect+0x108>)
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	4611      	mov	r1, r2
 8003414:	2258      	movs	r2, #88	; 0x58
 8003416:	4618      	mov	r0, r3
 8003418:	f003 ffb6 	bl	8007388 <memcpy>
    int len = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d15d      	bne.n	80034e4 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8003428:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f9d3 	bl	80037d8 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f9ef 	bl	8003820 <TimerCountdownMS>

    if (options == 0)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8003448:	f107 0310 	add.w	r3, r7, #16
 800344c:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	8b1b      	ldrh	r3, [r3, #24]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f000 f9ef 	bl	8003848 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6918      	ldr	r0, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	4619      	mov	r1, r3
 8003476:	f000 fb1f 	bl	8003ab8 <MQTTSerialize_connect>
 800347a:	6738      	str	r0, [r7, #112]	; 0x70
 800347c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800347e:	2b00      	cmp	r3, #0
 8003480:	dd32      	ble.n	80034e8 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8003482:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003486:	461a      	mov	r2, r3
 8003488:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fc43 	bl	8002d16 <sendPacket>
 8003490:	6778      	str	r0, [r7, #116]	; 0x74
 8003492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003494:	2b00      	cmp	r3, #0
 8003496:	d129      	bne.n	80034ec <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8003498:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800349c:	461a      	mov	r2, r3
 800349e:	2102      	movs	r1, #2
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff8c 	bl	80033be <waitfor>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d117      	bne.n	80034dc <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 80034ac:	23ff      	movs	r3, #255	; 0xff
 80034ae:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f107 010f 	add.w	r1, r7, #15
 80034c0:	f107 000e 	add.w	r0, r7, #14
 80034c4:	f000 fbe4 	bl	8003c90 <MQTTDeserialize_connack>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <MQTTConnect+0xd8>
            rc = connack_rc;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	677b      	str	r3, [r7, #116]	; 0x74
 80034d2:	e00c      	b.n	80034ee <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295
 80034d8:	677b      	str	r3, [r7, #116]	; 0x74
 80034da:	e008      	b.n	80034ee <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	677b      	str	r3, [r7, #116]	; 0x74
 80034e2:	e004      	b.n	80034ee <MQTTConnect+0xf2>
		goto exit;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <MQTTConnect+0xf2>
        goto exit;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <MQTTConnect+0xf2>
        goto exit; // there was a problem
 80034ec:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 80034ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <MQTTConnect+0xfe>
        c->isconnected = 1;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 80034fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3778      	adds	r7, #120	; 0x78
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	0800844c 	.word	0x0800844c

08003508 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8003508:	b5b0      	push	{r4, r5, r7, lr}
 800350a:	b094      	sub	sp, #80	; 0x50
 800350c:	af04      	add	r7, sp, #16
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	2300      	movs	r3, #0
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8083 	beq.w	8003646 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8003540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f947 	bl	80037d8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f963 	bl	8003820 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691c      	ldr	r4, [r3, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	461d      	mov	r5, r3
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f7ff fbbd 	bl	8002ce4 <getNextPacketId>
 800356a:	4603      	mov	r3, r0
 800356c:	b29a      	uxth	r2, r3
 800356e:	f107 031f 	add.w	r3, r7, #31
 8003572:	9302      	str	r3, [sp, #8]
 8003574:	f107 0320 	add.w	r3, r7, #32
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2301      	movs	r3, #1
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	2200      	movs	r2, #0
 8003582:	4629      	mov	r1, r5
 8003584:	4620      	mov	r0, r4
 8003586:	f000 fff4 	bl	8004572 <MQTTSerialize_subscribe>
 800358a:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	dd5b      	ble.n	800364a <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8003592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003596:	461a      	mov	r2, r3
 8003598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff fbbb 	bl	8002d16 <sendPacket>
 80035a0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80035a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d152      	bne.n	800364e <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80035a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ac:	461a      	mov	r2, r3
 80035ae:	2109      	movs	r1, #9
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff ff04 	bl	80033be <waitfor>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	d140      	bne.n	800363e <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	4614      	mov	r4, r2
 80035d0:	f107 0114 	add.w	r1, r7, #20
 80035d4:	f107 0218 	add.w	r2, r7, #24
 80035d8:	f107 0012 	add.w	r0, r7, #18
 80035dc:	9401      	str	r4, [sp, #4]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	460b      	mov	r3, r1
 80035e2:	2101      	movs	r1, #1
 80035e4:	f001 f83f 	bl	8004666 <MQTTDeserialize_suback>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 80035f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d02b      	beq.n	8003650 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80035f8:	2300      	movs	r3, #0
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fc:	e01b      	b.n	8003636 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	3304      	adds	r3, #4
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d110      	bne.n	8003630 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	3304      	adds	r3, #4
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	3304      	adds	r3, #4
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	609a      	str	r2, [r3, #8]
                    rc = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800362e:	e00f      	b.n	8003650 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	3301      	adds	r3, #1
 8003634:	63bb      	str	r3, [r7, #56]	; 0x38
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	2b04      	cmp	r3, #4
 800363a:	dde0      	ble.n	80035fe <MQTTSubscribe+0xf6>
 800363c:	e008      	b.n	8003650 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003644:	e004      	b.n	8003650 <MQTTSubscribe+0x148>
		goto exit;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <MQTTSubscribe+0x148>
        goto exit;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 800364e:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003652:	4618      	mov	r0, r3
 8003654:	3740      	adds	r7, #64	; 0x40
 8003656:	46bd      	mov	sp, r7
 8003658:	bdb0      	pop	{r4, r5, r7, pc}

0800365a <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800365a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365c:	b097      	sub	sp, #92	; 0x5c
 800365e:	af08      	add	r7, sp, #32
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	2300      	movs	r3, #0
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 809b 	beq.w	80037c0 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800368a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f8a2 	bl	80037d8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f8be 	bl	8003820 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d003      	beq.n	80036b4 <MQTTPublish+0x5a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d106      	bne.n	80036c2 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff fb15 	bl	8002ce4 <getNextPacketId>
 80036ba:	4603      	mov	r3, r0
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	469c      	mov	ip, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	469e      	mov	lr, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	785d      	ldrb	r5, [r3, #1]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80036e4:	9206      	str	r2, [sp, #24]
 80036e6:	9305      	str	r3, [sp, #20]
 80036e8:	ac02      	add	r4, sp, #8
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036f6:	9601      	str	r6, [sp, #4]
 80036f8:	9500      	str	r5, [sp, #0]
 80036fa:	4673      	mov	r3, lr
 80036fc:	2200      	movs	r2, #0
 80036fe:	4661      	mov	r1, ip
 8003700:	6838      	ldr	r0, [r7, #0]
 8003702:	f000 fe44 	bl	800438e <MQTTSerialize_publish>
 8003706:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	2b00      	cmp	r3, #0
 800370c:	dd5a      	ble.n	80037c4 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800370e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003712:	461a      	mov	r2, r3
 8003714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff fafd 	bl	8002d16 <sendPacket>
 800371c:	6378      	str	r0, [r7, #52]	; 0x34
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d151      	bne.n	80037c8 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d122      	bne.n	8003772 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800372c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003730:	461a      	mov	r2, r3
 8003732:	2104      	movs	r1, #4
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff fe42 	bl	80033be <waitfor>
 800373a:	4603      	mov	r3, r0
 800373c:	2b04      	cmp	r3, #4
 800373e:	d114      	bne.n	800376a <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	695c      	ldr	r4, [r3, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f107 021a 	add.w	r2, r7, #26
 800374c:	f107 0119 	add.w	r1, r7, #25
 8003750:	f107 0018 	add.w	r0, r7, #24
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4623      	mov	r3, r4
 8003758:	f000 fba8 	bl	8003eac <MQTTDeserialize_ack>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d035      	beq.n	80037ce <MQTTPublish+0x174>
                rc = FAILURE;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
 8003768:	e031      	b.n	80037ce <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800376a:	f04f 33ff 	mov.w	r3, #4294967295
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
 8003770:	e02d      	b.n	80037ce <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d128      	bne.n	80037cc <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800377a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800377e:	461a      	mov	r2, r3
 8003780:	2107      	movs	r1, #7
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff fe1b 	bl	80033be <waitfor>
 8003788:	4603      	mov	r3, r0
 800378a:	2b07      	cmp	r3, #7
 800378c:	d114      	bne.n	80037b8 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	695c      	ldr	r4, [r3, #20]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f107 0216 	add.w	r2, r7, #22
 800379a:	f107 0115 	add.w	r1, r7, #21
 800379e:	f107 0014 	add.w	r0, r7, #20
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4623      	mov	r3, r4
 80037a6:	f000 fb81 	bl	8003eac <MQTTDeserialize_ack>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d00e      	beq.n	80037ce <MQTTPublish+0x174>
                rc = FAILURE;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	e00a      	b.n	80037ce <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
 80037be:	e006      	b.n	80037ce <MQTTPublish+0x174>
		goto exit;
 80037c0:	bf00      	nop
 80037c2:	e004      	b.n	80037ce <MQTTPublish+0x174>
        goto exit;
 80037c4:	bf00      	nop
 80037c6:	e002      	b.n	80037ce <MQTTPublish+0x174>
        goto exit; // there was a problem
 80037c8:	bf00      	nop
 80037ca:	e000      	b.n	80037ce <MQTTPublish+0x174>
    }

exit:
 80037cc:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	373c      	adds	r7, #60	; 0x3c
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d8 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	605a      	str	r2, [r3, #4]
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <TimerIsExpired+0x28>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	0fdb      	lsrs	r3, r3, #31
 800380c:	b2db      	uxtb	r3, r3
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000013c 	.word	0x2000013c

08003820 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <TimerCountdownMS+0x24>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	605a      	str	r2, [r3, #4]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	2000013c 	.word	0x2000013c

08003848 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003858:	fb03 f202 	mul.w	r2, r3, r2
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <TimerCountdown+0x2c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	2000013c 	.word	0x2000013c

08003878 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <TimerLeftMS+0x28>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	2000013c 	.word	0x2000013c

080038a4 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <NewNetwork+0x30>)
 80038b8:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <NewNetwork+0x34>)
 80038be:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a06      	ldr	r2, [pc, #24]	; (80038dc <NewNetwork+0x38>)
 80038c4:	60da      	str	r2, [r3, #12]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	080038e1 	.word	0x080038e1
 80038d8:	0800393b 	.word	0x0800393b
 80038dc:	08003983 	.word	0x08003983

080038e0 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	3301      	adds	r3, #1
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fe61 	bl	80005c4 <WIZCHIP_READ>
 8003902:	4603      	mov	r3, r0
 8003904:	2b17      	cmp	r3, #23
 8003906:	d113      	bne.n	8003930 <w5x00_read+0x50>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fffd 	bl	800090e <getSn_RX_RSR>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	b292      	uxth	r2, r2
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fd0c 	bl	8001344 <recv>
 800392c:	4603      	mov	r3, r0
 800392e:	e000      	b.n	8003932 <w5x00_read+0x52>

	return SOCK_ERROR;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	3301      	adds	r3, #1
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fe34 	bl	80005c4 <WIZCHIP_READ>
 800395c:	4603      	mov	r3, r0
 800395e:	2b17      	cmp	r3, #23
 8003960:	d10a      	bne.n	8003978 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	b292      	uxth	r2, r2
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fbee 	bl	8001150 <send>
 8003974:	4603      	mov	r3, r0
 8003976:	e000      	b.n	800397a <w5x00_write+0x40>

	return SOCK_ERROR;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fb67 	bl	8001064 <disconnect>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	4613      	mov	r3, r2
 80039aa:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 80039ac:	f243 0339 	movw	r3, #12345	; 0x3039
 80039b0:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	b2d8      	uxtb	r0, r3
 80039b8:	8afa      	ldrh	r2, [r7, #22]
 80039ba:	2300      	movs	r3, #0
 80039bc:	2101      	movs	r1, #1
 80039be:	f7fd f8f1 	bl	8000ba4 <socket>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d001      	beq.n	80039d2 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e00d      	b.n	80039ee <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fd fa65 	bl	8000eac <connect>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d001      	beq.n	80039ec <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <ConnectNetwork+0x50>

	return SOCK_OK;
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80039f6:	b590      	push	{r4, r7, lr}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	int len = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7a1b      	ldrb	r3, [r3, #8]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d102      	bne.n	8003a10 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e005      	b.n	8003a1c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7a1b      	ldrb	r3, [r3, #8]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d101      	bne.n	8003a1c <MQTTSerialize_connectLength+0x26>
		len = 10;
 8003a18:	230a      	movs	r3, #10
 8003a1a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a24:	f000 fc43 	bl	80042ae <MQTTstrlen>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7edb      	ldrb	r3, [r3, #27]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d013      	beq.n	8003a62 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3324      	adds	r3, #36	; 0x24
 8003a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a42:	f000 fc34 	bl	80042ae <MQTTstrlen>
 8003a46:	4603      	mov	r3, r0
 8003a48:	1c9c      	adds	r4, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3330      	adds	r3, #48	; 0x30
 8003a4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a52:	f000 fc2c 	bl	80042ae <MQTTstrlen>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4423      	add	r3, r4
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <MQTTSerialize_connectLength+0x7c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3340      	adds	r3, #64	; 0x40
 8003a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a7a:	f000 fc18 	bl	80042ae <MQTTstrlen>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	3302      	adds	r3, #2
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <MQTTSerialize_connectLength+0xa2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	334c      	adds	r3, #76	; 0x4c
 8003a9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aa0:	f000 fc05 	bl	80042ae <MQTTstrlen>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd90      	pop	{r4, r7, pc}

08003ab8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
	int len = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ff8b 	bl	80039f6 <MQTTSerialize_connectLength>
 8003ae0:	6238      	str	r0, [r7, #32]
 8003ae2:	6a38      	ldr	r0, [r7, #32]
 8003ae4:	f000 fa98 	bl	8004018 <MQTTPacket_len>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	da03      	bge.n	8003af8 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8003af0:	f06f 0301 	mvn.w	r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8003af6:	e0c2      	b.n	8003c7e <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8003afc:	7e3b      	ldrb	r3, [r7, #24]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f362 1307 	bfi	r3, r2, #4, #4
 8003b04:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8003b06:	7e3a      	ldrb	r2, [r7, #24]
 8003b08:	f107 031c 	add.w	r3, r7, #28
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fb11 	bl	8004136 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	6a39      	ldr	r1, [r7, #32]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fa12 	bl	8003f42 <MQTTPacket_encode>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7a1b      	ldrb	r3, [r3, #8]
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d10c      	bne.n	8003b48 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	4955      	ldr	r1, [pc, #340]	; (8003c88 <MQTTSerialize_connect+0x1d0>)
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fb3c 	bl	80041b2 <writeCString>
		writeChar(&ptr, (char) 4);
 8003b3a:	f107 031c 	add.w	r3, r7, #28
 8003b3e:	2104      	movs	r1, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 faf8 	bl	8004136 <writeChar>
 8003b46:	e00b      	b.n	8003b60 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	494f      	ldr	r1, [pc, #316]	; (8003c8c <MQTTSerialize_connect+0x1d4>)
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fb2f 	bl	80041b2 <writeCString>
		writeChar(&ptr, (char) 3);
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	2103      	movs	r1, #3
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 faeb 	bl	8004136 <writeChar>
	}

	flags.all = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7e9b      	ldrb	r3, [r3, #26]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	7d3b      	ldrb	r3, [r7, #20]
 8003b70:	f362 0341 	bfi	r3, r2, #1, #1
 8003b74:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7edb      	ldrb	r3, [r3, #27]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	7d3b      	ldrb	r3, [r7, #20]
 8003b86:	f362 0382 	bfi	r3, r2, #2, #1
 8003b8a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8003b8c:	7d3b      	ldrb	r3, [r7, #20]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	7d3b      	ldrb	r3, [r7, #20]
 8003ba6:	f362 03c4 	bfi	r3, r2, #3, #2
 8003baa:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	7d3b      	ldrb	r3, [r7, #20]
 8003bba:	f362 1345 	bfi	r3, r2, #5, #1
 8003bbe:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <MQTTSerialize_connect+0x118>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8003bd0:	7d3b      	ldrb	r3, [r7, #20]
 8003bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd6:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <MQTTSerialize_connect+0x130>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8003be8:	7d3b      	ldrb	r3, [r7, #20]
 8003bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bee:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8003bf0:	7d3a      	ldrb	r2, [r7, #20]
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fa9c 	bl	8004136 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8b1b      	ldrh	r3, [r3, #24]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 faa8 	bl	8004160 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f107 001c 	add.w	r0, r7, #28
 8003c16:	330c      	adds	r3, #12
 8003c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c1a:	f000 fae9 	bl	80041f0 <writeMQTTString>
	if (options->willFlag)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7edb      	ldrb	r3, [r3, #27]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f107 001c 	add.w	r0, r7, #28
 8003c2c:	3324      	adds	r3, #36	; 0x24
 8003c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c30:	f000 fade 	bl	80041f0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f107 001c 	add.w	r0, r7, #28
 8003c3a:	3330      	adds	r3, #48	; 0x30
 8003c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c3e:	f000 fad7 	bl	80041f0 <writeMQTTString>
	}
	if (flags.bits.username)
 8003c42:	7d3b      	ldrb	r3, [r7, #20]
 8003c44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d006      	beq.n	8003c5c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f107 001c 	add.w	r0, r7, #28
 8003c54:	3340      	adds	r3, #64	; 0x40
 8003c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c58:	f000 faca 	bl	80041f0 <writeMQTTString>
	if (flags.bits.password)
 8003c5c:	7d3b      	ldrb	r3, [r7, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f107 001c 	add.w	r0, r7, #28
 8003c6e:	334c      	adds	r3, #76	; 0x4c
 8003c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c72:	f000 fabd 	bl	80041f0 <writeMQTTString>

	rc = ptr - buf;
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	080084a4 	.word	0x080084a4
 8003c8c:	080084ac 	.word	0x080084ac

08003c90 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8003cb2:	f107 0318 	add.w	r3, r7, #24
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fa29 	bl	800410e <readChar>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8003cc0:	7f3b      	ldrb	r3, [r7, #28]
 8003cc2:	f023 030f 	bic.w	r3, r3, #15
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d12e      	bne.n	8003d2a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f107 0214 	add.w	r2, r7, #20
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f9e9 	bl	80040ac <MQTTPacket_decodeBuf>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4413      	add	r3, r2
 8003cea:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	dd1b      	ble.n	8003d2e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8003cf6:	f107 0318 	add.w	r3, r7, #24
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa07 	bl	800410e <readChar>
 8003d00:	4603      	mov	r3, r0
 8003d02:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8003d04:	7c3b      	ldrb	r3, [r7, #16]
 8003d06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8003d12:	f107 0318 	add.w	r3, r7, #24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f9f9 	bl	800410e <readChar>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
 8003d28:	e002      	b.n	8003d30 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8003d2e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3728      	adds	r7, #40	; 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	dc03      	bgt.n	8003d64 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8003d5c:	f06f 0301 	mvn.w	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
		goto exit;
 8003d62:	e01d      	b.n	8003da0 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	7e3b      	ldrb	r3, [r7, #24]
 8003d72:	f362 1307 	bfi	r3, r2, #4, #4
 8003d76:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8003d78:	7e3a      	ldrb	r2, [r7, #24]
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f9d8 	bl	8004136 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f8d9 	bl	8003f42 <MQTTPacket_encode>
 8003d90:	4602      	mov	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4413      	add	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003da0:	69fb      	ldr	r3, [r7, #28]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8003db4:	220c      	movs	r2, #12
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ffbe 	bl	8003d3a <MQTTSerialize_zero>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8003dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ddc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8003dea:	f107 0318 	add.w	r3, r7, #24
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f98d 	bl	800410e <readChar>
 8003df4:	4603      	mov	r3, r0
 8003df6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8003df8:	7f3b      	ldrb	r3, [r7, #28]
 8003dfa:	f023 030f 	bic.w	r3, r3, #15
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d14b      	bne.n	8003e9c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8003e04:	7f3b      	ldrb	r3, [r7, #28]
 8003e06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8003e12:	7f3b      	ldrb	r3, [r7, #28]
 8003e14:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8003e20:	7f3b      	ldrb	r3, [r7, #28]
 8003e22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f107 0214 	add.w	r2, r7, #20
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f938 	bl	80040ac <MQTTPacket_decodeBuf>
 8003e3c:	6278      	str	r0, [r7, #36]	; 0x24
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	4413      	add	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8003e4e:	f107 0318 	add.w	r3, r7, #24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	4619      	mov	r1, r3
 8003e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e58:	f000 f9f8 	bl	800424c <readMQTTLenString>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01e      	beq.n	8003ea0 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db19      	blt.n	8003ea0 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	dd08      	ble.n	8003e86 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8003e74:	f107 0318 	add.w	r3, r7, #24
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f92d 	bl	80040d8 <readInt>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	1ad2      	subs	r2, r2, r3
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	601a      	str	r2, [r3, #0]
	rc = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	e002      	b.n	8003ea2 <MQTTDeserialize_publish+0xda>
		goto exit;
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <MQTTDeserialize_publish+0xda>
		goto exit;
 8003ea0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8003eca:	f107 0318 	add.w	r3, r7, #24
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f91d 	bl	800410e <readChar>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8003ed8:	7f3b      	ldrb	r3, [r7, #28]
 8003eda:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8003ee6:	7f3b      	ldrb	r3, [r7, #28]
 8003ee8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f107 0214 	add.w	r2, r7, #20
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f8d5 	bl	80040ac <MQTTPacket_decodeBuf>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4413      	add	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4413      	add	r3, r2
 8003f12:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	dd0b      	ble.n	8003f36 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8003f1e:	f107 0318 	add.w	r3, r7, #24
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f8d8 	bl	80040d8 <readInt>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8003f30:	2301      	movs	r3, #1
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	e000      	b.n	8003f38 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8003f36:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3728      	adds	r7, #40	; 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	425a      	negs	r2, r3
 8003f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f5c:	bf58      	it	pl
 8003f5e:	4253      	negpl	r3, r2
 8003f60:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	da00      	bge.n	8003f6a <MQTTPacket_encode+0x28>
 8003f68:	337f      	adds	r3, #127	; 0x7f
 8003f6a:	11db      	asrs	r3, r3, #7
 8003f6c:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	dd03      	ble.n	8003f7c <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f7a:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	60fa      	str	r2, [r7, #12]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	7afa      	ldrb	r2, [r7, #11]
 8003f8a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	dcde      	bgt.n	8003f50 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8003f92:	68fb      	ldr	r3, [r7, #12]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
	int len = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	dd03      	ble.n	8003fd2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	60fb      	str	r3, [r7, #12]
			goto exit;
 8003fd0:	e01d      	b.n	800400e <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8003fd2:	f107 020b 	add.w	r2, r7, #11
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4798      	blx	r3
 8003fde:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d112      	bne.n	800400c <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff0:	6979      	ldr	r1, [r7, #20]
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	441a      	add	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	01db      	lsls	r3, r3, #7
 8004000:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	b25b      	sxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	dbd6      	blt.n	8003fb8 <MQTTPacket_decode+0x18>
exit:
 800400a:	e000      	b.n	800400e <MQTTPacket_decode+0x6e>
			goto exit;
 800400c:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800400e:	693b      	ldr	r3, [r7, #16]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3301      	adds	r3, #1
 8004024:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b7f      	cmp	r3, #127	; 0x7f
 800402a:	dc03      	bgt.n	8004034 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3301      	adds	r3, #1
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	e012      	b.n	800405a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403a:	da03      	bge.n	8004044 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3302      	adds	r3, #2
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	e00a      	b.n	800405a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a08      	ldr	r2, [pc, #32]	; (8004068 <MQTTPacket_len+0x50>)
 8004048:	4293      	cmp	r3, r2
 800404a:	dc03      	bgt.n	8004054 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3303      	adds	r3, #3
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	e002      	b.n	800405a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	607b      	str	r3, [r7, #4]
	return rem_len;
 800405a:	687b      	ldr	r3, [r7, #4]
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	001ffffe 	.word	0x001ffffe

0800406c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e00a      	b.n	8004092 <bufchar+0x26>
		*c = *bufptr++;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <bufchar+0x3c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	4909      	ldr	r1, [pc, #36]	; (80040a8 <bufchar+0x3c>)
 8004084:	600a      	str	r2, [r1, #0]
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	dbf0      	blt.n	800407c <bufchar+0x10>
	return count;
 800409a:	683b      	ldr	r3, [r7, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20000140 	.word	0x20000140

080040ac <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 80040b6:	4a06      	ldr	r2, [pc, #24]	; (80040d0 <MQTTPacket_decodeBuf+0x24>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	4805      	ldr	r0, [pc, #20]	; (80040d4 <MQTTPacket_decodeBuf+0x28>)
 80040c0:	f7ff ff6e 	bl	8003fa0 <MQTTPacket_decode>
 80040c4:	4603      	mov	r3, r0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000140 	.word	0x20000140
 80040d4:	0800406d 	.word	0x0800406d

080040d8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	3201      	adds	r2, #1
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1c9a      	adds	r2, r3, #2
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
	return len;
 8004100:	68bb      	ldr	r3, [r7, #8]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
	return c;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	da00      	bge.n	8004172 <writeInt+0x12>
 8004170:	33ff      	adds	r3, #255	; 0xff
 8004172:	121b      	asrs	r3, r3, #8
 8004174:	461a      	mov	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	425a      	negs	r2, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	bf58      	it	pl
 8004192:	4253      	negpl	r3, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 80041bc:	6838      	ldr	r0, [r7, #0]
 80041be:	f7fc f827 	bl	8000210 <strlen>
 80041c2:	4603      	mov	r3, r0
 80041c4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffc9 	bl	8004160 <writeInt>
	memcpy(*pptr, string, len);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f003 f8d6 	bl	8007388 <memcpy>
	*pptr += len;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	441a      	add	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	4638      	mov	r0, r7
 80041fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	dd12      	ble.n	800422a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4619      	mov	r1, r3
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff ffa9 	bl	8004160 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	f003 f8b6 	bl	8007388 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	441a      	add	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8004228:	e00c      	b.n	8004244 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4619      	mov	r1, r3
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff ffbc 	bl	80041b2 <writeCString>
}
 800423a:	e003      	b.n	8004244 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800423c:	2100      	movs	r1, #0
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff8e 	bl	8004160 <writeInt>
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	dd1a      	ble.n	800429e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f7ff ff35 	bl	80040d8 <readInt>
 800426e:	4602      	mov	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	6852      	ldr	r2, [r2, #4]
 800427c:	4413      	add	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d30c      	bcc.n	800429e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	6852      	ldr	r2, [r2, #4]
 8004294:	441a      	add	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	601a      	str	r2, [r3, #0]
			rc = 1;
 800429a:	2301      	movs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 80042a4:	697b      	ldr	r3, [r7, #20]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	1d3b      	adds	r3, r7, #4
 80042b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d006      	beq.n	80042d2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fb ffa2 	bl	8000210 <strlen>
 80042cc:	4603      	mov	r3, r0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e001      	b.n	80042d6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	617b      	str	r3, [r7, #20]
	return rc;
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	int alen = 0,
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
		blen = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fb ff83 	bl	8000210 <strlen>
 800430a:	4603      	mov	r3, r0
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e005      	b.n	800431c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800431c:	6838      	ldr	r0, [r7, #0]
 800431e:	f7fb ff77 	bl	8000210 <strlen>
 8004322:	4603      	mov	r3, r0
 8004324:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	429a      	cmp	r2, r3
 800432c:	d10a      	bne.n	8004344 <MQTTPacket_equals+0x64>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	461a      	mov	r2, r3
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	6938      	ldr	r0, [r7, #16]
 8004336:	f003 fa13 	bl	8007760 <strncmp>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <MQTTPacket_equals+0x64>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <MQTTPacket_equals+0x66>
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	4638      	mov	r0, r7
 8004358:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8004360:	463b      	mov	r3, r7
 8004362:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004366:	f7ff ffa2 	bl	80042ae <MQTTstrlen>
 800436a:	4603      	mov	r3, r0
 800436c:	1c9a      	adds	r2, r3, #2
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	4413      	add	r3, r2
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4413      	add	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	dd02      	ble.n	8004384 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3302      	adds	r3, #2
 8004382:	617b      	str	r3, [r7, #20]
	return len;
 8004384:	697b      	ldr	r3, [r7, #20]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b08a      	sub	sp, #40	; 0x28
 8004392:	af02      	add	r7, sp, #8
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80043ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	f7ff ffc8 	bl	800434e <MQTTSerialize_publishLength>
 80043be:	61b8      	str	r0, [r7, #24]
 80043c0:	69b8      	ldr	r0, [r7, #24]
 80043c2:	f7ff fe29 	bl	8004018 <MQTTPacket_len>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	da03      	bge.n	80043d6 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80043ce:	f06f 0301 	mvn.w	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
		goto exit;
 80043d4:	e04c      	b.n	8004470 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 80043d6:	7c3b      	ldrb	r3, [r7, #16]
 80043d8:	2203      	movs	r2, #3
 80043da:	f362 1307 	bfi	r3, r2, #4, #4
 80043de:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	7c3b      	ldrb	r3, [r7, #16]
 80043ea:	f362 03c3 	bfi	r3, r2, #3, #1
 80043ee:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	7c3b      	ldrb	r3, [r7, #16]
 80043fa:	f362 0342 	bfi	r3, r2, #1, #2
 80043fe:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8004400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	7c3b      	ldrb	r3, [r7, #16]
 800440c:	f362 0300 	bfi	r3, r2, #0, #1
 8004410:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8004412:	7c3a      	ldrb	r2, [r7, #16]
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fe8b 	bl	8004136 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	69b9      	ldr	r1, [r7, #24]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fd8c 	bl	8003f42 <MQTTPacket_encode>
 800442a:	4602      	mov	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8004432:	f107 0014 	add.w	r0, r7, #20
 8004436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800443a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800443c:	f7ff fed8 	bl	80041f0 <writeMQTTString>

	if (qos > 0)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	dd06      	ble.n	8004454 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8004446:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004448:	f107 0314 	add.w	r3, r7, #20
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fe86 	bl	8004160 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800445a:	4618      	mov	r0, r3
 800445c:	f002 ff94 	bl	8007388 <memcpy>
	ptr += payloadlen;
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004464:	4413      	add	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004470:	69fb      	ldr	r3, [r7, #28]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	4611      	mov	r1, r2
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	71fb      	strb	r3, [r7, #7]
 800448c:	4613      	mov	r3, r2
 800448e:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	dc03      	bgt.n	80044aa <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80044a2:	f06f 0301 	mvn.w	r3, #1
 80044a6:	61fb      	str	r3, [r7, #28]
		goto exit;
 80044a8:	e037      	b.n	800451a <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	7e3b      	ldrb	r3, [r7, #24]
 80044b4:	f362 1307 	bfi	r3, r2, #4, #4
 80044b8:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 80044ba:	79bb      	ldrb	r3, [r7, #6]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	7e3b      	ldrb	r3, [r7, #24]
 80044c4:	f362 03c3 	bfi	r3, r2, #3, #1
 80044c8:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	7e3b      	ldrb	r3, [r7, #24]
 80044de:	f362 0342 	bfi	r3, r2, #1, #2
 80044e2:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80044e4:	7e3a      	ldrb	r2, [r7, #24]
 80044e6:	f107 0314 	add.w	r3, r7, #20
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fe22 	bl	8004136 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2102      	movs	r1, #2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fd23 	bl	8003f42 <MQTTPacket_encode>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4413      	add	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8004504:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004506:	f107 0314 	add.w	r3, r7, #20
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fe27 	bl	8004160 <writeInt>
	rc = ptr - buf;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800451a:	69fb      	ldr	r3, [r7, #28]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800452e:	2302      	movs	r3, #2
 8004530:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e013      	b.n	8004560 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	461a      	mov	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4413      	add	r3, r2
 8004548:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800454c:	f7ff feaf 	bl	80042ae <MQTTstrlen>
 8004550:	4603      	mov	r3, r0
 8004552:	3303      	adds	r3, #3
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	4413      	add	r3, r2
 8004558:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	dbe7      	blt.n	8004538 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8004568:	68bb      	ldr	r3, [r7, #8]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b08a      	sub	sp, #40	; 0x28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	4611      	mov	r1, r2
 800457e:	461a      	mov	r2, r3
 8004580:	460b      	mov	r3, r1
 8004582:	71fb      	strb	r3, [r7, #7]
 8004584:	4613      	mov	r3, r2
 8004586:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800459c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800459e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a0:	f7ff ffc0 	bl	8004524 <MQTTSerialize_subscribeLength>
 80045a4:	61f8      	str	r0, [r7, #28]
 80045a6:	69f8      	ldr	r0, [r7, #28]
 80045a8:	f7ff fd36 	bl	8004018 <MQTTPacket_len>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	da03      	bge.n	80045bc <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80045b4:	f06f 0301 	mvn.w	r3, #1
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80045ba:	e04f      	b.n	800465c <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80045c0:	7d3b      	ldrb	r3, [r7, #20]
 80045c2:	2208      	movs	r2, #8
 80045c4:	f362 1307 	bfi	r3, r2, #4, #4
 80045c8:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	7d3b      	ldrb	r3, [r7, #20]
 80045d4:	f362 03c3 	bfi	r3, r2, #3, #1
 80045d8:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80045da:	7d3b      	ldrb	r3, [r7, #20]
 80045dc:	2201      	movs	r2, #1
 80045de:	f362 0342 	bfi	r3, r2, #1, #2
 80045e2:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80045e4:	7d3a      	ldrb	r2, [r7, #20]
 80045e6:	f107 0318 	add.w	r3, r7, #24
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fda2 	bl	8004136 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	69f9      	ldr	r1, [r7, #28]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fca3 	bl	8003f42 <MQTTPacket_encode>
 80045fc:	4602      	mov	r2, r0
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8004604:	88ba      	ldrh	r2, [r7, #4]
 8004606:	f107 0318 	add.w	r3, r7, #24
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fda7 	bl	8004160 <writeInt>

	for (i = 0; i < count; ++i)
 8004612:	2300      	movs	r3, #0
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	e019      	b.n	800464c <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	461a      	mov	r2, r3
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	4413      	add	r3, r2
 8004628:	f107 0018 	add.w	r0, r7, #24
 800462c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800462e:	f7ff fddf 	bl	80041f0 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004636:	4413      	add	r3, r2
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	f107 0318 	add.w	r3, r7, #24
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fd78 	bl	8004136 <writeChar>
	for (i = 0; i < count; ++i)
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	3301      	adds	r3, #1
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	429a      	cmp	r2, r3
 8004652:	dbe1      	blt.n	8004618 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800465e:	4618      	mov	r0, r3
 8004660:	3728      	adds	r7, #40	; 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08a      	sub	sp, #40	; 0x28
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004684:	f107 0318 	add.w	r3, r7, #24
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fd40 	bl	800410e <readChar>
 800468e:	4603      	mov	r3, r0
 8004690:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8004692:	7f3b      	ldrb	r3, [r7, #28]
 8004694:	f023 030f 	bic.w	r3, r3, #15
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b90      	cmp	r3, #144	; 0x90
 800469c:	d142      	bne.n	8004724 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	f107 0214 	add.w	r2, r7, #20
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fd00 	bl	80040ac <MQTTPacket_decodeBuf>
 80046ac:	6278      	str	r0, [r7, #36]	; 0x24
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	dd2f      	ble.n	8004728 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80046c8:	f107 0318 	add.w	r3, r7, #24
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fd03 	bl	80040d8 <readInt>
 80046d2:	4603      	mov	r3, r0
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	801a      	strh	r2, [r3, #0]

	*count = 0;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80046e0:	e019      	b.n	8004716 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	da03      	bge.n	80046f4 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 80046ec:	f04f 33ff 	mov.w	r3, #4294967295
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 80046f2:	e01a      	b.n	800472a <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 80046f4:	f107 0318 	add.w	r3, r7, #24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fd08 	bl	800410e <readChar>
 80046fe:	4603      	mov	r3, r0
 8004700:	4618      	mov	r0, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6011      	str	r1, [r2, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	4602      	mov	r2, r0
 8004714:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6a3a      	ldr	r2, [r7, #32]
 800471a:	429a      	cmp	r2, r3
 800471c:	d8e1      	bhi.n	80046e2 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	e002      	b.n	800472a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8004724:	bf00      	nop
 8004726:	e000      	b.n	800472a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8004728:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	; 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b09f      	sub	sp, #124	; 0x7c
 8004738:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800473a:	f000 fde3 	bl	8005304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800473e:	f000 f85d 	bl	80047fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004742:	f000 f927 	bl	8004994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004746:	f000 f8fb 	bl	8004940 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800474a:	f000 f8c3 	bl	80048d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  w5500_interface_setSPIHandle(hspi2);
 800474e:	4c25      	ldr	r4, [pc, #148]	; (80047e4 <main+0xb0>)
 8004750:	4668      	mov	r0, sp
 8004752:	f104 0310 	add.w	r3, r4, #16
 8004756:	2248      	movs	r2, #72	; 0x48
 8004758:	4619      	mov	r1, r3
 800475a:	f002 fe15 	bl	8007388 <memcpy>
 800475e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004762:	f000 fccb 	bl	80050fc <w5500_interface_setSPIHandle>

  w5500_interface_Initialze();
 8004766:	f000 fd59 	bl	800521c <w5500_interface_Initialze>
  printf("W5500 IC initialized.\n\r");
 800476a:	481f      	ldr	r0, [pc, #124]	; (80047e8 <main+0xb4>)
 800476c:	f002 ff02 	bl	8007574 <iprintf>

  /*Set network informations*/
  w5500_interface_SetNetInfo();
 8004770:	f000 fd42 	bl	80051f8 <w5500_interface_SetNetInfo>

  setMQTTBrokerTargetName((char*)"test.mosquitto.org");
 8004774:	481d      	ldr	r0, [pc, #116]	; (80047ec <main+0xb8>)
 8004776:	f000 f9ab 	bl	8004ad0 <setMQTTBrokerTargetName>
  setMQTTSubTargetName((char*)"topic/twat");
 800477a:	481d      	ldr	r0, [pc, #116]	; (80047f0 <main+0xbc>)
 800477c:	f000 f9b8 	bl	8004af0 <setMQTTSubTargetName>
  MQTTInitialze();
 8004780:	f000 fa46 	bl	8004c10 <MQTTInitialze>

  int sub_status = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
  sub_status = mqttSubscribe();
 8004788:	f000 fad6 	bl	8004d38 <mqttSubscribe>
 800478c:	62f8      	str	r0, [r7, #44]	; 0x2c

  setMQTTPubTargetName((char*)"topic/abc");
 800478e:	4819      	ldr	r0, [pc, #100]	; (80047f4 <main+0xc0>)
 8004790:	f000 f9be 	bl	8004b10 <setMQTTPubTargetName>
  unsigned char PubTopicName[] = "topic/abc";
 8004794:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <main+0xc0>)
 8004796:	f107 0320 	add.w	r3, r7, #32
 800479a:	ca07      	ldmia	r2, {r0, r1, r2}
 800479c:	c303      	stmia	r3!, {r0, r1}
 800479e:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mqttYield();
 80047a0:	f000 faec 	bl	8004d7c <mqttYield>
	  MQTT_Message publish_message;
	  unsigned char message12[6] = {1,2,3,4,5,6};
 80047a4:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <main+0xc4>)
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ac:	6018      	str	r0, [r3, #0]
 80047ae:	3304      	adds	r3, #4
 80047b0:	8019      	strh	r1, [r3, #0]

	  publish_message.message.qos = QOS0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	733b      	strb	r3, [r7, #12]
	  publish_message.message.dup = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73bb      	strb	r3, [r7, #14]
	  publish_message.message.retained = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	737b      	strb	r3, [r7, #13]
	  publish_message.message.id = 5;
 80047be:	2305      	movs	r3, #5
 80047c0:	823b      	strh	r3, [r7, #16]
	  publish_message.message.payload = &message12;
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	617b      	str	r3, [r7, #20]
	  publish_message.message.payloadlen = 6;
 80047c6:	2306      	movs	r3, #6
 80047c8:	61bb      	str	r3, [r7, #24]

	  setMQTTPubData(publish_message.message);
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047d0:	f000 f9ae 	bl	8004b30 <setMQTTPubData>
	  MQTTPublishMessage();
 80047d4:	f000 f9c0 	bl	8004b58 <MQTTPublishMessage>

	  HAL_Delay(1000);
 80047d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047dc:	f000 fe04 	bl	80053e8 <HAL_Delay>
  {
 80047e0:	e7de      	b.n	80047a0 <main+0x6c>
 80047e2:	bf00      	nop
 80047e4:	20000144 	.word	0x20000144
 80047e8:	080084b4 	.word	0x080084b4
 80047ec:	080084cc 	.word	0x080084cc
 80047f0:	080084e0 	.word	0x080084e0
 80047f4:	080084ec 	.word	0x080084ec
 80047f8:	080084f8 	.word	0x080084f8

080047fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b094      	sub	sp, #80	; 0x50
 8004800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004802:	f107 031c 	add.w	r3, r7, #28
 8004806:	2234      	movs	r2, #52	; 0x34
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f002 fdca 	bl	80073a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004810:	f107 0308 	add.w	r3, r7, #8
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	2300      	movs	r3, #0
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <SystemClock_Config+0xd0>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	4a28      	ldr	r2, [pc, #160]	; (80048cc <SystemClock_Config+0xd0>)
 800482a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482e:	6413      	str	r3, [r2, #64]	; 0x40
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <SystemClock_Config+0xd0>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800483c:	2300      	movs	r3, #0
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <SystemClock_Config+0xd4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <SystemClock_Config+0xd4>)
 8004846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <SystemClock_Config+0xd4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004858:	2302      	movs	r3, #2
 800485a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800485c:	2301      	movs	r3, #1
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004860:	2310      	movs	r3, #16
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004864:	2302      	movs	r3, #2
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004868:	2300      	movs	r3, #0
 800486a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800486c:	2310      	movs	r3, #16
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004870:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004876:	2304      	movs	r3, #4
 8004878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800487a:	2304      	movs	r3, #4
 800487c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800487e:	2302      	movs	r3, #2
 8004880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004882:	f107 031c 	add.w	r3, r7, #28
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fa66 	bl	8005d58 <HAL_RCC_OscConfig>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004892:	f000 f917 	bl	8004ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004896:	230f      	movs	r3, #15
 8004898:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800489a:	2302      	movs	r3, #2
 800489c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80048a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80048ac:	f107 0308 	add.w	r3, r7, #8
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 f830 	bl	8005918 <HAL_RCC_ClockConfig>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80048be:	f000 f901 	bl	8004ac4 <Error_Handler>
  }
}
 80048c2:	bf00      	nop
 80048c4:	3750      	adds	r7, #80	; 0x50
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40007000 	.word	0x40007000

080048d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <MX_SPI2_Init+0x64>)
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <MX_SPI2_Init+0x68>)
 80048dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <MX_SPI2_Init+0x64>)
 80048e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <MX_SPI2_Init+0x64>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <MX_SPI2_Init+0x64>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <MX_SPI2_Init+0x64>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <MX_SPI2_Init+0x64>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <MX_SPI2_Init+0x64>)
 8004900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004904:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <MX_SPI2_Init+0x64>)
 8004908:	2200      	movs	r2, #0
 800490a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <MX_SPI2_Init+0x64>)
 800490e:	2200      	movs	r2, #0
 8004910:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <MX_SPI2_Init+0x64>)
 8004914:	2200      	movs	r2, #0
 8004916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <MX_SPI2_Init+0x64>)
 800491a:	2200      	movs	r2, #0
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 15;
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <MX_SPI2_Init+0x64>)
 8004920:	220f      	movs	r2, #15
 8004922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004924:	4804      	ldr	r0, [pc, #16]	; (8004938 <MX_SPI2_Init+0x64>)
 8004926:	f001 fc9b 	bl	8006260 <HAL_SPI_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004930:	f000 f8c8 	bl	8004ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000144 	.word	0x20000144
 800493c:	40003800 	.word	0x40003800

08004940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <MX_USART2_UART_Init+0x50>)
 8004948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <MX_USART2_UART_Init+0x4c>)
 800494c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004954:	2200      	movs	r2, #0
 8004956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <MX_USART2_UART_Init+0x4c>)
 800495a:	2200      	movs	r2, #0
 800495c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004960:	2200      	movs	r2, #0
 8004962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004966:	220c      	movs	r2, #12
 8004968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <MX_USART2_UART_Init+0x4c>)
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004972:	2200      	movs	r2, #0
 8004974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004976:	4805      	ldr	r0, [pc, #20]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004978:	f002 fa1a 	bl	8006db0 <HAL_UART_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004982:	f000 f89f 	bl	8004ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2000019c 	.word	0x2000019c
 8004990:	40004400 	.word	0x40004400

08004994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	4b3a      	ldr	r3, [pc, #232]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	4a39      	ldr	r2, [pc, #228]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
 80049d6:	4b37      	ldr	r3, [pc, #220]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	4b33      	ldr	r3, [pc, #204]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	4a32      	ldr	r2, [pc, #200]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6313      	str	r3, [r2, #48]	; 0x30
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <MX_GPIO_Init+0x120>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <MX_GPIO_Init+0x120>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <MX_GPIO_Init+0x120>)
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <MX_GPIO_Init+0x120>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	4826      	ldr	r0, [pc, #152]	; (8004ab8 <MX_GPIO_Init+0x124>)
 8004a20:	f000 ff60 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8004a24:	2200      	movs	r2, #0
 8004a26:	2130      	movs	r1, #48	; 0x30
 8004a28:	4824      	ldr	r0, [pc, #144]	; (8004abc <MX_GPIO_Init+0x128>)
 8004a2a:	f000 ff5b 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a34:	4822      	ldr	r0, [pc, #136]	; (8004ac0 <MX_GPIO_Init+0x12c>)
 8004a36:	f000 ff55 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004a4a:	f107 0314 	add.w	r3, r7, #20
 8004a4e:	4619      	mov	r1, r3
 8004a50:	481a      	ldr	r0, [pc, #104]	; (8004abc <MX_GPIO_Init+0x128>)
 8004a52:	f000 fdd3 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004a56:	2320      	movs	r3, #32
 8004a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a62:	2300      	movs	r3, #0
 8004a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004a66:	f107 0314 	add.w	r3, r7, #20
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4812      	ldr	r0, [pc, #72]	; (8004ab8 <MX_GPIO_Init+0x124>)
 8004a6e:	f000 fdc5 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a72:	2330      	movs	r3, #48	; 0x30
 8004a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a82:	f107 0314 	add.w	r3, r7, #20
 8004a86:	4619      	mov	r1, r3
 8004a88:	480c      	ldr	r0, [pc, #48]	; (8004abc <MX_GPIO_Init+0x128>)
 8004a8a:	f000 fdb7 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a94:	2301      	movs	r3, #1
 8004a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4806      	ldr	r0, [pc, #24]	; (8004ac0 <MX_GPIO_Init+0x12c>)
 8004aa8:	f000 fda8 	bl	80055fc <HAL_GPIO_Init>

}
 8004aac:	bf00      	nop
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40020000 	.word	0x40020000
 8004abc:	40020800 	.word	0x40020800
 8004ac0:	40020400 	.word	0x40020400

08004ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac8:	b672      	cpsid	i
}
 8004aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004acc:	e7fe      	b.n	8004acc <Error_Handler+0x8>
	...

08004ad0 <setMQTTBrokerTargetName>:
{
	(char*)"stdout-subscriber", 0, (char*)"\n", QOS0, "", "", (char*)"192.168.178.25", 1883, 0
};

void setMQTTBrokerTargetName(char* Target)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	BrokerTargetName = Target;
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <setMQTTBrokerTargetName+0x1c>)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6013      	str	r3, [r2, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	200001e4 	.word	0x200001e4

08004af0 <setMQTTSubTargetName>:
void setMQTTSubTargetName(char* Target)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	SubTargetName = Target;
 8004af8:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <setMQTTSubTargetName+0x1c>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6013      	str	r3, [r2, #0]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	200001e8 	.word	0x200001e8

08004b10 <setMQTTPubTargetName>:
void setMQTTPubTargetName(char* Target)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	PubTargetName = Target;
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <setMQTTPubTargetName+0x1c>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6013      	str	r3, [r2, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	200001ec 	.word	0x200001ec

08004b30 <setMQTTPubData>:
{
	opts.password = Target;
}

void setMQTTPubData(MQTTMessage message)
{
 8004b30:	b490      	push	{r4, r7}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	463c      	mov	r4, r7
 8004b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messagePub = message;
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <setMQTTPubData+0x24>)
 8004b3e:	461c      	mov	r4, r3
 8004b40:	463b      	mov	r3, r7
 8004b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc90      	pop	{r4, r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	200001f0 	.word	0x200001f0

08004b58 <MQTTPublishMessage>:

void MQTTPublishMessage()
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
	MQTTPublish(&mqtt_client,PubTargetName ,&messagePub);
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <MQTTPublishMessage+0x18>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <MQTTPublishMessage+0x1c>)
 8004b62:	4619      	mov	r1, r3
 8004b64:	4804      	ldr	r0, [pc, #16]	; (8004b78 <MQTTPublishMessage+0x20>)
 8004b66:	f7fe fd78 	bl	800365a <MQTTPublish>
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200001ec 	.word	0x200001ec
 8004b74:	200001f0 	.word	0x200001f0
 8004b78:	20000210 	.word	0x20000210

08004b7c <MQTTmessageArrived>:

void MQTTmessageArrived(MessageData* md)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b09c      	sub	sp, #112	; 0x70
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	unsigned char testbuffer[100];
	MQTTMessage* message = md->message;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (opts.showtopics)
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <MQTTmessageArrived+0x80>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d017      	beq.n	8004bc2 <MQTTmessageArrived+0x46>
	{
		memcpy(testbuffer,(char*)message->payload,(int)message->payloadlen);
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	6899      	ldr	r1, [r3, #8]
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 fbf2 	bl	8007388 <memcpy>
		*(testbuffer + (int)message->payloadlen + 1) = "\n";
 8004ba4:	4916      	ldr	r1, [pc, #88]	; (8004c00 <MQTTmessageArrived+0x84>)
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	f107 0208 	add.w	r2, r7, #8
 8004bb0:	4413      	add	r3, r2
 8004bb2:	b2ca      	uxtb	r2, r1
 8004bb4:	701a      	strb	r2, [r3, #0]
		printf("%s\r\n",testbuffer);
 8004bb6:	f107 0308 	add.w	r3, r7, #8
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4811      	ldr	r0, [pc, #68]	; (8004c04 <MQTTmessageArrived+0x88>)
 8004bbe:	f002 fcd9 	bl	8007574 <iprintf>
	}
	if (opts.nodelimiter)
 8004bc2:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <MQTTmessageArrived+0x80>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <MQTTmessageArrived+0x62>
		printf("%.*s", (int)message->payloadlen, (char*)message->payload);
 8004bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	480c      	ldr	r0, [pc, #48]	; (8004c08 <MQTTmessageArrived+0x8c>)
 8004bd8:	f002 fccc 	bl	8007574 <iprintf>
	else
		printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
}
 8004bdc:	e009      	b.n	8004bf2 <MQTTmessageArrived+0x76>
		printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 8004bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4619      	mov	r1, r3
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <MQTTmessageArrived+0x80>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4807      	ldr	r0, [pc, #28]	; (8004c0c <MQTTmessageArrived+0x90>)
 8004bee:	f002 fcc1 	bl	8007574 <iprintf>
}
 8004bf2:	bf00      	nop
 8004bf4:	3770      	adds	r7, #112	; 0x70
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000038 	.word	0x20000038
 8004c00:	08008514 	.word	0x08008514
 8004c04:	0800852c 	.word	0x0800852c
 8004c08:	08008534 	.word	0x08008534
 8004c0c:	0800853c 	.word	0x0800853c

08004c10 <MQTTInitialze>:

void MQTTInitialze()
{
 8004c10:	b5b0      	push	{r4, r5, r7, lr}
 8004c12:	b0a0      	sub	sp, #128	; 0x80
 8004c14:	af04      	add	r7, sp, #16
	mqtt_network.my_socket = 0;
 8004c16:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <MQTTInitialze+0xec>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
	DNS_init(1,tempBuffer_DNS);
 8004c1c:	4938      	ldr	r1, [pc, #224]	; (8004d00 <MQTTInitialze+0xf0>)
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f7fd ffac 	bl	8002b7c <DNS_init>
	WIZNETINFO = Get_Wiz_NetInfo();
 8004c24:	4c37      	ldr	r4, [pc, #220]	; (8004d04 <MQTTInitialze+0xf4>)
 8004c26:	463b      	mov	r3, r7
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fa4b 	bl	80050c4 <Get_Wiz_NetInfo>
 8004c2e:	4625      	mov	r5, r4
 8004c30:	463c      	mov	r4, r7
 8004c32:	6820      	ldr	r0, [r4, #0]
 8004c34:	6861      	ldr	r1, [r4, #4]
 8004c36:	68a2      	ldr	r2, [r4, #8]
 8004c38:	68e3      	ldr	r3, [r4, #12]
 8004c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c3c:	6920      	ldr	r0, [r4, #16]
 8004c3e:	6028      	str	r0, [r5, #0]
 8004c40:	8aa3      	ldrh	r3, [r4, #20]
 8004c42:	7da2      	ldrb	r2, [r4, #22]
 8004c44:	80ab      	strh	r3, [r5, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	71ab      	strb	r3, [r5, #6]
	while(DNS_run(WIZNETINFO.dns,BrokerTargetName,targetIP) == 0){}
 8004c4a:	bf00      	nop
 8004c4c:	4b2e      	ldr	r3, [pc, #184]	; (8004d08 <MQTTInitialze+0xf8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2e      	ldr	r2, [pc, #184]	; (8004d0c <MQTTInitialze+0xfc>)
 8004c52:	4619      	mov	r1, r3
 8004c54:	482e      	ldr	r0, [pc, #184]	; (8004d10 <MQTTInitialze+0x100>)
 8004c56:	f7fd ffad 	bl	8002bb4 <DNS_run>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f5      	beq.n	8004c4c <MQTTInitialze+0x3c>
	NewNetwork(&mqtt_network, 0);
 8004c60:	2100      	movs	r1, #0
 8004c62:	4826      	ldr	r0, [pc, #152]	; (8004cfc <MQTTInitialze+0xec>)
 8004c64:	f7fe fe1e 	bl	80038a4 <NewNetwork>

	ConnectNetwork(&mqtt_network, targetIP_local, targetPort);
 8004c68:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <MQTTInitialze+0x104>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4929      	ldr	r1, [pc, #164]	; (8004d18 <MQTTInitialze+0x108>)
 8004c72:	4822      	ldr	r0, [pc, #136]	; (8004cfc <MQTTInitialze+0xec>)
 8004c74:	f7fe fe93 	bl	800399e <ConnectNetwork>
	MQTTClientInit(&mqtt_client,&mqtt_network,1000,buf,100,tempBuffer,2048);
 8004c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c7c:	9302      	str	r3, [sp, #8]
 8004c7e:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <MQTTInitialze+0x10c>)
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	2364      	movs	r3, #100	; 0x64
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <MQTTInitialze+0x110>)
 8004c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c8c:	491b      	ldr	r1, [pc, #108]	; (8004cfc <MQTTInitialze+0xec>)
 8004c8e:	4825      	ldr	r0, [pc, #148]	; (8004d24 <MQTTInitialze+0x114>)
 8004c90:	f7fe f88a 	bl	8002da8 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <MQTTInitialze+0x118>)
 8004c96:	f107 0318 	add.w	r3, r7, #24
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	2258      	movs	r2, #88	; 0x58
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f002 fb72 	bl	8007388 <memcpy>
	data.willFlag = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data.MQTTVersion = 3;
 8004caa:	2303      	movs	r3, #3
 8004cac:	f887 3020 	strb.w	r3, [r7, #32]
	data.clientID.cstring = opts.clientid;
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <MQTTInitialze+0x11c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
	data.username.cstring = opts.username;
 8004cb6:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <MQTTInitialze+0x11c>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	65bb      	str	r3, [r7, #88]	; 0x58
	data.password.cstring = opts.password;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <MQTTInitialze+0x11c>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	667b      	str	r3, [r7, #100]	; 0x64

	data.keepAliveInterval = HAL_MAX_DELAY;
 8004cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cc6:	863b      	strh	r3, [r7, #48]	; 0x30
	data.cleansession = 1;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	rc = MQTTConnect(&mqtt_client, &data);
 8004cce:	f107 0318 	add.w	r3, r7, #24
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4813      	ldr	r0, [pc, #76]	; (8004d24 <MQTTInitialze+0x114>)
 8004cd6:	f7fe fb91 	bl	80033fc <MQTTConnect>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <MQTTInitialze+0x120>)
 8004cde:	6013      	str	r3, [r2, #0]
	printf("Connected %d\r\n", rc);
 8004ce0:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <MQTTInitialze+0x120>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4813      	ldr	r0, [pc, #76]	; (8004d34 <MQTTInitialze+0x124>)
 8004ce8:	f002 fc44 	bl	8007574 <iprintf>
	opts.showtopics = 1;
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <MQTTInitialze+0x11c>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	621a      	str	r2, [r3, #32]

}
 8004cf2:	bf00      	nop
 8004cf4:	3770      	adds	r7, #112	; 0x70
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000200 	.word	0x20000200
 8004d00:	200002ec 	.word	0x200002ec
 8004d04:	2000026c 	.word	0x2000026c
 8004d08:	200001e4 	.word	0x200001e4
 8004d0c:	200001e0 	.word	0x200001e0
 8004d10:	2000027e 	.word	0x2000027e
 8004d14:	20000034 	.word	0x20000034
 8004d18:	20000030 	.word	0x20000030
 8004d1c:	20000aec 	.word	0x20000aec
 8004d20:	20000284 	.word	0x20000284
 8004d24:	20000210 	.word	0x20000210
 8004d28:	08008554 	.word	0x08008554
 8004d2c:	20000038 	.word	0x20000038
 8004d30:	200002e8 	.word	0x200002e8
 8004d34:	08008544 	.word	0x08008544

08004d38 <mqttSubscribe>:

int mqttSubscribe()
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	int status = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
	status = MQTTSubscribe(&mqtt_client, SubTargetName, opts.qos, MQTTmessageArrived);
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <mqttSubscribe+0x30>)
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <mqttSubscribe+0x34>)
 8004d48:	7b1a      	ldrb	r2, [r3, #12]
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <mqttSubscribe+0x38>)
 8004d4c:	4809      	ldr	r0, [pc, #36]	; (8004d74 <mqttSubscribe+0x3c>)
 8004d4e:	f7fe fbdb 	bl	8003508 <MQTTSubscribe>
 8004d52:	6078      	str	r0, [r7, #4]
	printf("Subscribed %d\r\n", status);
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4808      	ldr	r0, [pc, #32]	; (8004d78 <mqttSubscribe+0x40>)
 8004d58:	f002 fc0c 	bl	8007574 <iprintf>
	return status;
 8004d5c:	687b      	ldr	r3, [r7, #4]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200001e8 	.word	0x200001e8
 8004d6c:	20000038 	.word	0x20000038
 8004d70:	08004b7d 	.word	0x08004b7d
 8004d74:	20000210 	.word	0x20000210
 8004d78:	080085ac 	.word	0x080085ac

08004d7c <mqttYield>:
void mqttYield()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
	MQTTYield(&mqtt_client, 1000);
 8004d80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d84:	4802      	ldr	r0, [pc, #8]	; (8004d90 <mqttYield+0x14>)
 8004d86:	f7fe faf5 	bl	8003374 <MQTTYield>
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000210 	.word	0x20000210

08004d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <HAL_MspInit+0x4c>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <HAL_MspInit+0x4c>)
 8004da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da8:	6453      	str	r3, [r2, #68]	; 0x44
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <HAL_MspInit+0x4c>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_MspInit+0x4c>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <HAL_MspInit+0x4c>)
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_MspInit+0x4c>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004dd2:	2007      	movs	r0, #7
 8004dd4:	f000 fbde 	bl	8005594 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800

08004de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <HAL_SPI_MspInit+0x84>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d12c      	bne.n	8004e60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_SPI_MspInit+0x88>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <HAL_SPI_MspInit+0x88>)
 8004e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e14:	6413      	str	r3, [r2, #64]	; 0x40
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <HAL_SPI_MspInit+0x88>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_SPI_MspInit+0x88>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <HAL_SPI_MspInit+0x88>)
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	6313      	str	r3, [r2, #48]	; 0x30
 8004e32:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <HAL_SPI_MspInit+0x88>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004e3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e44:	2302      	movs	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e50:	2305      	movs	r3, #5
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4805      	ldr	r0, [pc, #20]	; (8004e70 <HAL_SPI_MspInit+0x8c>)
 8004e5c:	f000 fbce 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e60:	bf00      	nop
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40003800 	.word	0x40003800
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40020400 	.word	0x40020400

08004e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_UART_MspInit+0x84>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d12b      	bne.n	8004eee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_UART_MspInit+0x88>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a17      	ldr	r2, [pc, #92]	; (8004efc <HAL_UART_MspInit+0x88>)
 8004ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <HAL_UART_MspInit+0x88>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_UART_MspInit+0x88>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <HAL_UART_MspInit+0x88>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_UART_MspInit+0x88>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004ece:	230c      	movs	r3, #12
 8004ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eda:	2303      	movs	r3, #3
 8004edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ede:	2307      	movs	r3, #7
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4805      	ldr	r0, [pc, #20]	; (8004f00 <HAL_UART_MspInit+0x8c>)
 8004eea:	f000 fb87 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004eee:	bf00      	nop
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40004400 	.word	0x40004400
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40020000 	.word	0x40020000

08004f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f08:	e7fe      	b.n	8004f08 <NMI_Handler+0x4>

08004f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f0e:	e7fe      	b.n	8004f0e <HardFault_Handler+0x4>

08004f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f14:	e7fe      	b.n	8004f14 <MemManage_Handler+0x4>

08004f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f16:	b480      	push	{r7}
 8004f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f1a:	e7fe      	b.n	8004f1a <BusFault_Handler+0x4>

08004f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f20:	e7fe      	b.n	8004f20 <UsageFault_Handler+0x4>

08004f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f50:	f000 fa2a 	bl	80053a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e00a      	b.n	8004f80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f6a:	f3af 8000 	nop.w
 8004f6e:	4601      	mov	r1, r0
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	60ba      	str	r2, [r7, #8]
 8004f76:	b2ca      	uxtb	r2, r1
 8004f78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	dbf0      	blt.n	8004f6a <_read+0x12>
	}

return len;
 8004f88:	687b      	ldr	r3, [r7, #4]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e009      	b.n	8004fb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	60ba      	str	r2, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	dbf1      	blt.n	8004fa4 <_write+0x12>
	}
	return len;
 8004fc0:	687b      	ldr	r3, [r7, #4]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <_close>:

int _close(int file)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
	return -1;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ff2:	605a      	str	r2, [r3, #4]
	return 0;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <_isatty>:

int _isatty(int file)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
	return 1;
 800500a:	2301      	movs	r3, #1
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
	return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800503c:	4a14      	ldr	r2, [pc, #80]	; (8005090 <_sbrk+0x5c>)
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <_sbrk+0x60>)
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005048:	4b13      	ldr	r3, [pc, #76]	; (8005098 <_sbrk+0x64>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <_sbrk+0x64>)
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <_sbrk+0x68>)
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <_sbrk+0x64>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	429a      	cmp	r2, r3
 8005062:	d207      	bcs.n	8005074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005064:	f002 f966 	bl	8007334 <__errno>
 8005068:	4603      	mov	r3, r0
 800506a:	220c      	movs	r2, #12
 800506c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	e009      	b.n	8005088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005074:	4b08      	ldr	r3, [pc, #32]	; (8005098 <_sbrk+0x64>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800507a:	4b07      	ldr	r3, [pc, #28]	; (8005098 <_sbrk+0x64>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	4a05      	ldr	r2, [pc, #20]	; (8005098 <_sbrk+0x64>)
 8005084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20008000 	.word	0x20008000
 8005094:	00000400 	.word	0x00000400
 8005098:	200012ec 	.word	0x200012ec
 800509c:	20001360 	.word	0x20001360

080050a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <SystemInit+0x20>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <SystemInit+0x20>)
 80050ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <Get_Wiz_NetInfo>:


////##########################################
////##########################################
wiz_NetInfo Get_Wiz_NetInfo()
{
 80050c4:	b4b0      	push	{r4, r5, r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	return gWIZNETINFO;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <Get_Wiz_NetInfo+0x34>)
 80050d0:	461c      	mov	r4, r3
 80050d2:	4615      	mov	r5, r2
 80050d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d6:	6020      	str	r0, [r4, #0]
 80050d8:	6061      	str	r1, [r4, #4]
 80050da:	60a2      	str	r2, [r4, #8]
 80050dc:	60e3      	str	r3, [r4, #12]
 80050de:	6828      	ldr	r0, [r5, #0]
 80050e0:	6120      	str	r0, [r4, #16]
 80050e2:	88ab      	ldrh	r3, [r5, #4]
 80050e4:	79aa      	ldrb	r2, [r5, #6]
 80050e6:	82a3      	strh	r3, [r4, #20]
 80050e8:	4613      	mov	r3, r2
 80050ea:	75a3      	strb	r3, [r4, #22]
}
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bcb0      	pop	{r4, r5, r7}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000068 	.word	0x20000068

080050fc <w5500_interface_setSPIHandle>:
////##########################################
////##########################################
void w5500_interface_setSPIHandle(SPI_HandleTypeDef spiHandle)
{
 80050fc:	b084      	sub	sp, #16
 80050fe:	b580      	push	{r7, lr}
 8005100:	af00      	add	r7, sp, #0
 8005102:	f107 0c08 	add.w	ip, r7, #8
 8005106:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	handle_spi = spiHandle;
 800510a:	4b07      	ldr	r3, [pc, #28]	; (8005128 <w5500_interface_setSPIHandle+0x2c>)
 800510c:	4618      	mov	r0, r3
 800510e:	f107 0308 	add.w	r3, r7, #8
 8005112:	2258      	movs	r2, #88	; 0x58
 8005114:	4619      	mov	r1, r3
 8005116:	f002 f937 	bl	8007388 <memcpy>
}
 800511a:	bf00      	nop
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005122:	b004      	add	sp, #16
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	200012f0 	.word	0x200012f0

0800512c <w5500_interface_WriteBuff>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
}
////##########################################
////##########################################
void w5500_interface_WriteBuff(uint8_t* pBuf, uint16_t len)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&handle_spi, pBuf, len, 0xffff);
 8005138:	887a      	ldrh	r2, [r7, #2]
 800513a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4803      	ldr	r0, [pc, #12]	; (8005150 <w5500_interface_WriteBuff+0x24>)
 8005142:	f001 f916 	bl	8006372 <HAL_SPI_Transmit>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200012f0 	.word	0x200012f0

08005154 <w5500_interface_ReadBuff>:
////##########################################
////##########################################
void w5500_interface_ReadBuff(uint8_t* pBuf, uint16_t len)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&handle_spi, pBuf, len, 0xffff);
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4803      	ldr	r0, [pc, #12]	; (8005178 <w5500_interface_ReadBuff+0x24>)
 800516a:	f001 fa3e 	bl	80065ea <HAL_SPI_Receive>
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200012f0 	.word	0x200012f0

0800517c <w5500_interface_WriteByte>:
////##########################################
////##########################################
void w5500_interface_WriteByte(unsigned char byte)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handle_spi, &byte, 1, 0xffff);
 8005186:	1df9      	adds	r1, r7, #7
 8005188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800518c:	2201      	movs	r2, #1
 800518e:	4803      	ldr	r0, [pc, #12]	; (800519c <w5500_interface_WriteByte+0x20>)
 8005190:	f001 f8ef 	bl	8006372 <HAL_SPI_Transmit>
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200012f0 	.word	0x200012f0

080051a0 <w5500_interface_ReadByte>:
////##########################################
////##########################################
unsigned char w5500_interface_ReadByte(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
	uint8_t rd_byte = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&handle_spi, &rd_byte, 1, 0xffff);
 80051aa:	1df9      	adds	r1, r7, #7
 80051ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051b0:	2201      	movs	r2, #1
 80051b2:	4804      	ldr	r0, [pc, #16]	; (80051c4 <w5500_interface_ReadByte+0x24>)
 80051b4:	f001 fa19 	bl	80065ea <HAL_SPI_Receive>
	return rd_byte;
 80051b8:	79fb      	ldrb	r3, [r7, #7]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200012f0 	.word	0x200012f0

080051c8 <w5500_interface_Select>:
////##########################################
////##########################################
void w5500_interface_Select(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051d2:	4802      	ldr	r0, [pc, #8]	; (80051dc <w5500_interface_Select+0x14>)
 80051d4:	f000 fb86 	bl	80058e4 <HAL_GPIO_WritePin>
}
 80051d8:	bf00      	nop
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40020400 	.word	0x40020400

080051e0 <w5500_interface_DeSelect>:
////##########################################
////##########################################
void w5500_interface_DeSelect(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80051e4:	2201      	movs	r2, #1
 80051e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051ea:	4802      	ldr	r0, [pc, #8]	; (80051f4 <w5500_interface_DeSelect+0x14>)
 80051ec:	f000 fb7a 	bl	80058e4 <HAL_GPIO_WritePin>
}
 80051f0:	bf00      	nop
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40020400 	.word	0x40020400

080051f8 <w5500_interface_SetNetInfo>:

////##########################################
////##########################################
void w5500_interface_SetNetInfo()
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
	/*Set network informations*/
	wizchip_setnetinfo(&gWIZNETINFO);
 80051fc:	4805      	ldr	r0, [pc, #20]	; (8005214 <w5500_interface_SetNetInfo+0x1c>)
 80051fe:	f7fd f8f9 	bl	80023f4 <wizchip_setnetinfo>

	setSHAR(mac_address);
 8005202:	2206      	movs	r2, #6
 8005204:	4904      	ldr	r1, [pc, #16]	; (8005218 <w5500_interface_SetNetInfo+0x20>)
 8005206:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800520a:	f7fb fad5 	bl	80007b8 <WIZCHIP_WRITE_BUF>
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000068 	.word	0x20000068
 8005218:	20000060 	.word	0x20000060

0800521c <w5500_interface_Initialze>:
////##########################################
////##########################################
void w5500_interface_Initialze(void)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
	unsigned char temp;
	unsigned char W5500FifoSize[2][8] = {{2,2,2,2,2,2,2,2,},{2,2,2,2,2,2,2,2}};
 8005222:	4b1a      	ldr	r3, [pc, #104]	; (800528c <w5500_interface_Initialze+0x70>)
 8005224:	1d3c      	adds	r4, r7, #4
 8005226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	w5500_interface_DeSelect();
 800522c:	f7ff ffd8 	bl	80051e0 <w5500_interface_DeSelect>

	/* spi function register */
	reg_wizchip_spi_cbfunc(w5500_interface_ReadByte, w5500_interface_WriteByte);
 8005230:	4917      	ldr	r1, [pc, #92]	; (8005290 <w5500_interface_Initialze+0x74>)
 8005232:	4818      	ldr	r0, [pc, #96]	; (8005294 <w5500_interface_Initialze+0x78>)
 8005234:	f7fc fcea 	bl	8001c0c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(w5500_interface_ReadBuff, w5500_interface_WriteBuff);
 8005238:	4917      	ldr	r1, [pc, #92]	; (8005298 <w5500_interface_Initialze+0x7c>)
 800523a:	4818      	ldr	r0, [pc, #96]	; (800529c <w5500_interface_Initialze+0x80>)
 800523c:	f7fc fd12 	bl	8001c64 <reg_wizchip_spiburst_cbfunc>

	/* CS function register */
	reg_wizchip_cs_cbfunc(w5500_interface_Select,w5500_interface_DeSelect);
 8005240:	4917      	ldr	r1, [pc, #92]	; (80052a0 <w5500_interface_Initialze+0x84>)
 8005242:	4818      	ldr	r0, [pc, #96]	; (80052a4 <w5500_interface_Initialze+0x88>)
 8005244:	f7fc fcbc 	bl	8001bc0 <reg_wizchip_cs_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5500FifoSize) == -1)
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	4619      	mov	r1, r3
 800524c:	2001      	movs	r0, #1
 800524e:	f7fc fd35 	bl	8001cbc <ctlwizchip>
 8005252:	4603      	mov	r3, r0
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d102      	bne.n	8005260 <w5500_interface_Initialze+0x44>
	{
		printf("W5500 initialized fail.\r\n");
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <w5500_interface_Initialze+0x8c>)
 800525c:	f002 fa10 	bl	8007680 <puts>
	}

	do{//check phy status.
		if(ctlwizchip(CW_GET_PHYLINK,(void*)&temp) == -1){
 8005260:	f107 0317 	add.w	r3, r7, #23
 8005264:	4619      	mov	r1, r3
 8005266:	200f      	movs	r0, #15
 8005268:	f7fc fd28 	bl	8001cbc <ctlwizchip>
 800526c:	4603      	mov	r3, r0
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d102      	bne.n	800527a <w5500_interface_Initialze+0x5e>
			printf("Unknown PHY link status.\r\n");
 8005274:	480d      	ldr	r0, [pc, #52]	; (80052ac <w5500_interface_Initialze+0x90>)
 8005276:	f002 fa03 	bl	8007680 <puts>
		}
	}while(temp == PHY_LINK_OFF);
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0ef      	beq.n	8005260 <w5500_interface_Initialze+0x44>

}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd90      	pop	{r4, r7, pc}
 800528a:	bf00      	nop
 800528c:	080085f4 	.word	0x080085f4
 8005290:	0800517d 	.word	0x0800517d
 8005294:	080051a1 	.word	0x080051a1
 8005298:	0800512d 	.word	0x0800512d
 800529c:	08005155 	.word	0x08005155
 80052a0:	080051e1 	.word	0x080051e1
 80052a4:	080051c9 	.word	0x080051c9
 80052a8:	080085bc 	.word	0x080085bc
 80052ac:	080085d8 	.word	0x080085d8

080052b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80052b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052b4:	480d      	ldr	r0, [pc, #52]	; (80052ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052b6:	490e      	ldr	r1, [pc, #56]	; (80052f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052b8:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052bc:	e002      	b.n	80052c4 <LoopCopyDataInit>

080052be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052c2:	3304      	adds	r3, #4

080052c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052c8:	d3f9      	bcc.n	80052be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052ca:	4a0b      	ldr	r2, [pc, #44]	; (80052f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052cc:	4c0b      	ldr	r4, [pc, #44]	; (80052fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80052ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052d0:	e001      	b.n	80052d6 <LoopFillZerobss>

080052d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052d4:	3204      	adds	r2, #4

080052d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052d8:	d3fb      	bcc.n	80052d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052da:	f7ff fee1 	bl	80050a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052de:	f002 f82f 	bl	8007340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052e2:	f7ff fa27 	bl	8004734 <main>
  bx  lr    
 80052e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80052e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80052ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052f0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80052f4:	080086c4 	.word	0x080086c4
  ldr r2, =_sbss
 80052f8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80052fc:	2000135c 	.word	0x2000135c

08005300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005300:	e7fe      	b.n	8005300 <ADC_IRQHandler>
	...

08005304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <HAL_Init+0x40>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <HAL_Init+0x40>)
 800530e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_Init+0x40>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <HAL_Init+0x40>)
 800531a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800531e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005320:	4b08      	ldr	r3, [pc, #32]	; (8005344 <HAL_Init+0x40>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a07      	ldr	r2, [pc, #28]	; (8005344 <HAL_Init+0x40>)
 8005326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800532c:	2003      	movs	r0, #3
 800532e:	f000 f931 	bl	8005594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005332:	2000      	movs	r0, #0
 8005334:	f000 f808 	bl	8005348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005338:	f7ff fd2c 	bl	8004d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40023c00 	.word	0x40023c00

08005348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005350:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_InitTick+0x54>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_InitTick+0x58>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	4619      	mov	r1, r3
 800535a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800535e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f93b 	bl	80055e2 <HAL_SYSTICK_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e00e      	b.n	8005394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b0f      	cmp	r3, #15
 800537a:	d80a      	bhi.n	8005392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800537c:	2200      	movs	r2, #0
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	f000 f911 	bl	80055aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005388:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <HAL_InitTick+0x5c>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e000      	b.n	8005394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	2000005c 	.word	0x2000005c
 80053a0:	20000084 	.word	0x20000084
 80053a4:	20000080 	.word	0x20000080

080053a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_IncTick+0x20>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_IncTick+0x24>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4413      	add	r3, r2
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <HAL_IncTick+0x24>)
 80053ba:	6013      	str	r3, [r2, #0]
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000084 	.word	0x20000084
 80053cc:	20001348 	.word	0x20001348

080053d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return uwTick;
 80053d4:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <HAL_GetTick+0x14>)
 80053d6:	681b      	ldr	r3, [r3, #0]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20001348 	.word	0x20001348

080053e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053f0:	f7ff ffee 	bl	80053d0 <HAL_GetTick>
 80053f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d005      	beq.n	800540e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <HAL_Delay+0x44>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800540e:	bf00      	nop
 8005410:	f7ff ffde 	bl	80053d0 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d8f7      	bhi.n	8005410 <HAL_Delay+0x28>
  {
  }
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000084 	.word	0x20000084

08005430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800545c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005462:	4a04      	ldr	r2, [pc, #16]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	60d3      	str	r3, [r2, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <__NVIC_GetPriorityGrouping+0x18>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 0307 	and.w	r3, r3, #7
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db0a      	blt.n	80054be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	490c      	ldr	r1, [pc, #48]	; (80054e0 <__NVIC_SetPriority+0x4c>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	440b      	add	r3, r1
 80054b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054bc:	e00a      	b.n	80054d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4908      	ldr	r1, [pc, #32]	; (80054e4 <__NVIC_SetPriority+0x50>)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3b04      	subs	r3, #4
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	761a      	strb	r2, [r3, #24]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f1c3 0307 	rsb	r3, r3, #7
 8005502:	2b04      	cmp	r3, #4
 8005504:	bf28      	it	cs
 8005506:	2304      	movcs	r3, #4
 8005508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3304      	adds	r3, #4
 800550e:	2b06      	cmp	r3, #6
 8005510:	d902      	bls.n	8005518 <NVIC_EncodePriority+0x30>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3b03      	subs	r3, #3
 8005516:	e000      	b.n	800551a <NVIC_EncodePriority+0x32>
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	401a      	ands	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005530:	f04f 31ff 	mov.w	r1, #4294967295
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	43d9      	mvns	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	4313      	orrs	r3, r2
         );
}
 8005542:	4618      	mov	r0, r3
 8005544:	3724      	adds	r7, #36	; 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005560:	d301      	bcc.n	8005566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005562:	2301      	movs	r3, #1
 8005564:	e00f      	b.n	8005586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005566:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <SysTick_Config+0x40>)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3b01      	subs	r3, #1
 800556c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800556e:	210f      	movs	r1, #15
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	f7ff ff8e 	bl	8005494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <SysTick_Config+0x40>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <SysTick_Config+0x40>)
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	e000e010 	.word	0xe000e010

08005594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ff47 	bl	8005430 <__NVIC_SetPriorityGrouping>
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	4603      	mov	r3, r0
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055bc:	f7ff ff5c 	bl	8005478 <__NVIC_GetPriorityGrouping>
 80055c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	6978      	ldr	r0, [r7, #20]
 80055c8:	f7ff ff8e 	bl	80054e8 <NVIC_EncodePriority>
 80055cc:	4602      	mov	r2, r0
 80055ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff ff5d 	bl	8005494 <__NVIC_SetPriority>
}
 80055da:	bf00      	nop
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ffb0 	bl	8005550 <SysTick_Config>
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800560e:	2300      	movs	r3, #0
 8005610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	e14d      	b.n	80058b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005618:	2201      	movs	r2, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4013      	ands	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	429a      	cmp	r2, r3
 8005632:	f040 813c 	bne.w	80058ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d005      	beq.n	800564e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800564a:	2b02      	cmp	r3, #2
 800564c:	d130      	bne.n	80056b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	2203      	movs	r2, #3
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005684:	2201      	movs	r2, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 0201 	and.w	r2, r3, #1
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d017      	beq.n	80056ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d123      	bne.n	8005740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	08da      	lsrs	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3208      	adds	r2, #8
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	220f      	movs	r2, #15
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	08da      	lsrs	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3208      	adds	r2, #8
 800573a:	69b9      	ldr	r1, [r7, #24]
 800573c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2203      	movs	r2, #3
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0203 	and.w	r2, r3, #3
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8096 	beq.w	80058ae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	4b51      	ldr	r3, [pc, #324]	; (80058cc <HAL_GPIO_Init+0x2d0>)
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	4a50      	ldr	r2, [pc, #320]	; (80058cc <HAL_GPIO_Init+0x2d0>)
 800578c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005790:	6453      	str	r3, [r2, #68]	; 0x44
 8005792:	4b4e      	ldr	r3, [pc, #312]	; (80058cc <HAL_GPIO_Init+0x2d0>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800579e:	4a4c      	ldr	r2, [pc, #304]	; (80058d0 <HAL_GPIO_Init+0x2d4>)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	3302      	adds	r3, #2
 80057a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	220f      	movs	r2, #15
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4013      	ands	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a43      	ldr	r2, [pc, #268]	; (80058d4 <HAL_GPIO_Init+0x2d8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00d      	beq.n	80057e6 <HAL_GPIO_Init+0x1ea>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a42      	ldr	r2, [pc, #264]	; (80058d8 <HAL_GPIO_Init+0x2dc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <HAL_GPIO_Init+0x1e6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a41      	ldr	r2, [pc, #260]	; (80058dc <HAL_GPIO_Init+0x2e0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_GPIO_Init+0x1e2>
 80057da:	2302      	movs	r3, #2
 80057dc:	e004      	b.n	80057e8 <HAL_GPIO_Init+0x1ec>
 80057de:	2307      	movs	r3, #7
 80057e0:	e002      	b.n	80057e8 <HAL_GPIO_Init+0x1ec>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_GPIO_Init+0x1ec>
 80057e6:	2300      	movs	r3, #0
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	f002 0203 	and.w	r2, r2, #3
 80057ee:	0092      	lsls	r2, r2, #2
 80057f0:	4093      	lsls	r3, r2
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057f8:	4935      	ldr	r1, [pc, #212]	; (80058d0 <HAL_GPIO_Init+0x2d4>)
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	089b      	lsrs	r3, r3, #2
 80057fe:	3302      	adds	r3, #2
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005806:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	43db      	mvns	r3, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4013      	ands	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800582a:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005830:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005854:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800585a:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800587e:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005884:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058a8:	4a0d      	ldr	r2, [pc, #52]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3301      	adds	r3, #1
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b0f      	cmp	r3, #15
 80058b8:	f67f aeae 	bls.w	8005618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800
 80058d0:	40013800 	.word	0x40013800
 80058d4:	40020000 	.word	0x40020000
 80058d8:	40020400 	.word	0x40020400
 80058dc:	40020800 	.word	0x40020800
 80058e0:	40013c00 	.word	0x40013c00

080058e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
 80058f0:	4613      	mov	r3, r2
 80058f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058f4:	787b      	ldrb	r3, [r7, #1]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005900:	e003      	b.n	800590a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	041a      	lsls	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	619a      	str	r2, [r3, #24]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0cc      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4b68      	ldr	r3, [pc, #416]	; (8005ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d90c      	bls.n	8005954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b65      	ldr	r3, [pc, #404]	; (8005ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0b8      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d020      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800596c:	4b59      	ldr	r3, [pc, #356]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4a58      	ldr	r2, [pc, #352]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005984:	4b53      	ldr	r3, [pc, #332]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4a52      	ldr	r2, [pc, #328]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800598e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005990:	4b50      	ldr	r3, [pc, #320]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	494d      	ldr	r1, [pc, #308]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d044      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d107      	bne.n	80059c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b6:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d119      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e07f      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d003      	beq.n	80059d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d107      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d6:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e06f      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e6:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e067      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059f6:	4b37      	ldr	r3, [pc, #220]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f023 0203 	bic.w	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4934      	ldr	r1, [pc, #208]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a08:	f7ff fce2 	bl	80053d0 <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a10:	f7ff fcde 	bl	80053d0 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e04f      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a26:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 020c 	and.w	r2, r3, #12
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d1eb      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a38:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d20c      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e032      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6c:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4916      	ldr	r1, [pc, #88]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	490e      	ldr	r1, [pc, #56]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a9e:	f000 f821 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	490a      	ldr	r1, [pc, #40]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ab0:	5ccb      	ldrb	r3, [r1, r3]
 8005ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <HAL_RCC_ClockConfig+0x1c4>)
 8005ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fc42 	bl	8005348 <HAL_InitTick>

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40023c00 	.word	0x40023c00
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	08008604 	.word	0x08008604
 8005adc:	2000005c 	.word	0x2000005c
 8005ae0:	20000080 	.word	0x20000080

08005ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae8:	b094      	sub	sp, #80	; 0x50
 8005aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	647b      	str	r3, [r7, #68]	; 0x44
 8005af0:	2300      	movs	r3, #0
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af4:	2300      	movs	r3, #0
 8005af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005afc:	4b79      	ldr	r3, [pc, #484]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 030c 	and.w	r3, r3, #12
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d00d      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0x40>
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	f200 80e1 	bhi.w	8005cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x34>
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d003      	beq.n	8005b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b16:	e0db      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b18:	4b73      	ldr	r3, [pc, #460]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b1c:	e0db      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b1e:	4b73      	ldr	r3, [pc, #460]	; (8005cec <HAL_RCC_GetSysClockFreq+0x208>)
 8005b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b22:	e0d8      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b24:	4b6f      	ldr	r3, [pc, #444]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b2e:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d063      	beq.n	8005c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3a:	4b6a      	ldr	r3, [pc, #424]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	2200      	movs	r2, #0
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
 8005b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	f04f 0000 	mov.w	r0, #0
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	0159      	lsls	r1, r3, #5
 8005b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b68:	0150      	lsls	r0, r2, #5
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4621      	mov	r1, r4
 8005b70:	1a51      	subs	r1, r2, r1
 8005b72:	6139      	str	r1, [r7, #16]
 8005b74:	4629      	mov	r1, r5
 8005b76:	eb63 0301 	sbc.w	r3, r3, r1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b88:	4659      	mov	r1, fp
 8005b8a:	018b      	lsls	r3, r1, #6
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b92:	4651      	mov	r1, sl
 8005b94:	018a      	lsls	r2, r1, #6
 8005b96:	4651      	mov	r1, sl
 8005b98:	ebb2 0801 	subs.w	r8, r2, r1
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bb6:	4690      	mov	r8, r2
 8005bb8:	4699      	mov	r9, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	eb18 0303 	adds.w	r3, r8, r3
 8005bc0:	60bb      	str	r3, [r7, #8]
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	eb49 0303 	adc.w	r3, r9, r3
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	024b      	lsls	r3, r1, #9
 8005bda:	4621      	mov	r1, r4
 8005bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005be0:	4621      	mov	r1, r4
 8005be2:	024a      	lsls	r2, r1, #9
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bea:	2200      	movs	r2, #0
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bf4:	f7fa fb64 	bl	80002c0 <__aeabi_uldivmod>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c00:	e058      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c02:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	099b      	lsrs	r3, r3, #6
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	2300      	movs	r3, #0
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
 8005c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	f04f 0000 	mov.w	r0, #0
 8005c24:	f04f 0100 	mov.w	r1, #0
 8005c28:	0159      	lsls	r1, r3, #5
 8005c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c2e:	0150      	lsls	r0, r2, #5
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4641      	mov	r1, r8
 8005c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c54:	ebb2 040a 	subs.w	r4, r2, sl
 8005c58:	eb63 050b 	sbc.w	r5, r3, fp
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	00eb      	lsls	r3, r5, #3
 8005c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c6a:	00e2      	lsls	r2, r4, #3
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	461d      	mov	r5, r3
 8005c70:	4643      	mov	r3, r8
 8005c72:	18e3      	adds	r3, r4, r3
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	464b      	mov	r3, r9
 8005c78:	eb45 0303 	adc.w	r3, r5, r3
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	028b      	lsls	r3, r1, #10
 8005c8e:	4621      	mov	r1, r4
 8005c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c94:	4621      	mov	r1, r4
 8005c96:	028a      	lsls	r2, r1, #10
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	61fa      	str	r2, [r7, #28]
 8005ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca8:	f7fa fb0a 	bl	80002c0 <__aeabi_uldivmod>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cce:	e002      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3750      	adds	r7, #80	; 0x50
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	00f42400 	.word	0x00f42400
 8005cec:	007a1200 	.word	0x007a1200

08005cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf4:	4b03      	ldr	r3, [pc, #12]	; (8005d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000005c 	.word	0x2000005c

08005d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d0c:	f7ff fff0 	bl	8005cf0 <HAL_RCC_GetHCLKFreq>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	0a9b      	lsrs	r3, r3, #10
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	4903      	ldr	r1, [pc, #12]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d1e:	5ccb      	ldrb	r3, [r1, r3]
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	08008614 	.word	0x08008614

08005d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d34:	f7ff ffdc 	bl	8005cf0 <HAL_RCC_GetHCLKFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	0b5b      	lsrs	r3, r3, #13
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	4903      	ldr	r1, [pc, #12]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40023800 	.word	0x40023800
 8005d54:	08008614 	.word	0x08008614

08005d58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e273      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d075      	beq.n	8005e62 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d76:	4b88      	ldr	r3, [pc, #544]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d00c      	beq.n	8005d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d82:	4b85      	ldr	r3, [pc, #532]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d112      	bne.n	8005db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d8e:	4b82      	ldr	r3, [pc, #520]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9a:	d10b      	bne.n	8005db4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d9c:	4b7e      	ldr	r3, [pc, #504]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d05b      	beq.n	8005e60 <HAL_RCC_OscConfig+0x108>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d157      	bne.n	8005e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e24e      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dbc:	d106      	bne.n	8005dcc <HAL_RCC_OscConfig+0x74>
 8005dbe:	4b76      	ldr	r3, [pc, #472]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a75      	ldr	r2, [pc, #468]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e01d      	b.n	8005e08 <HAL_RCC_OscConfig+0xb0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dd4:	d10c      	bne.n	8005df0 <HAL_RCC_OscConfig+0x98>
 8005dd6:	4b70      	ldr	r3, [pc, #448]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a6f      	ldr	r2, [pc, #444]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	4b6d      	ldr	r3, [pc, #436]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a6c      	ldr	r2, [pc, #432]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e00b      	b.n	8005e08 <HAL_RCC_OscConfig+0xb0>
 8005df0:	4b69      	ldr	r3, [pc, #420]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a68      	ldr	r2, [pc, #416]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4b66      	ldr	r3, [pc, #408]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a65      	ldr	r2, [pc, #404]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d013      	beq.n	8005e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e10:	f7ff fade 	bl	80053d0 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e18:	f7ff fada 	bl	80053d0 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b64      	cmp	r3, #100	; 0x64
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e213      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2a:	4b5b      	ldr	r3, [pc, #364]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0xc0>
 8005e36:	e014      	b.n	8005e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7ff faca 	bl	80053d0 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e40:	f7ff fac6 	bl	80053d0 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	; 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e1ff      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e52:	4b51      	ldr	r3, [pc, #324]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f0      	bne.n	8005e40 <HAL_RCC_OscConfig+0xe8>
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d063      	beq.n	8005f36 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e6e:	4b4a      	ldr	r3, [pc, #296]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 030c 	and.w	r3, r3, #12
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e7a:	4b47      	ldr	r3, [pc, #284]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d11c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e86:	4b44      	ldr	r3, [pc, #272]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d116      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e92:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_RCC_OscConfig+0x152>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e1d3      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4937      	ldr	r1, [pc, #220]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ebe:	e03a      	b.n	8005f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d020      	beq.n	8005f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ec8:	4b34      	ldr	r3, [pc, #208]	; (8005f9c <HAL_RCC_OscConfig+0x244>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ece:	f7ff fa7f 	bl	80053d0 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed6:	f7ff fa7b 	bl	80053d0 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e1b4      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee8:	4b2b      	ldr	r3, [pc, #172]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef4:	4b28      	ldr	r3, [pc, #160]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4925      	ldr	r1, [pc, #148]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]
 8005f08:	e015      	b.n	8005f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f0a:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <HAL_RCC_OscConfig+0x244>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7ff fa5e 	bl	80053d0 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f18:	f7ff fa5a 	bl	80053d0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e193      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d036      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f4a:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <HAL_RCC_OscConfig+0x248>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f50:	f7ff fa3e 	bl	80053d0 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f58:	f7ff fa3a 	bl	80053d0 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e173      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x200>
 8005f76:	e01b      	b.n	8005fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <HAL_RCC_OscConfig+0x248>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7e:	f7ff fa27 	bl	80053d0 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f84:	e00e      	b.n	8005fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f86:	f7ff fa23 	bl	80053d0 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d907      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e15c      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	42470000 	.word	0x42470000
 8005fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa4:	4b8a      	ldr	r3, [pc, #552]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8005fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1ea      	bne.n	8005f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8097 	beq.w	80060ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc2:	4b83      	ldr	r3, [pc, #524]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10f      	bne.n	8005fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	4b7f      	ldr	r3, [pc, #508]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	4a7e      	ldr	r2, [pc, #504]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8005fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fde:	4b7c      	ldr	r3, [pc, #496]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	60bb      	str	r3, [r7, #8]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fee:	4b79      	ldr	r3, [pc, #484]	; (80061d4 <HAL_RCC_OscConfig+0x47c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d118      	bne.n	800602c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ffa:	4b76      	ldr	r3, [pc, #472]	; (80061d4 <HAL_RCC_OscConfig+0x47c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a75      	ldr	r2, [pc, #468]	; (80061d4 <HAL_RCC_OscConfig+0x47c>)
 8006000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006006:	f7ff f9e3 	bl	80053d0 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600e:	f7ff f9df 	bl	80053d0 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e118      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006020:	4b6c      	ldr	r3, [pc, #432]	; (80061d4 <HAL_RCC_OscConfig+0x47c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f0      	beq.n	800600e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d106      	bne.n	8006042 <HAL_RCC_OscConfig+0x2ea>
 8006034:	4b66      	ldr	r3, [pc, #408]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8006036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006038:	4a65      	ldr	r2, [pc, #404]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	6713      	str	r3, [r2, #112]	; 0x70
 8006040:	e01c      	b.n	800607c <HAL_RCC_OscConfig+0x324>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b05      	cmp	r3, #5
 8006048:	d10c      	bne.n	8006064 <HAL_RCC_OscConfig+0x30c>
 800604a:	4b61      	ldr	r3, [pc, #388]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 800604c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604e:	4a60      	ldr	r2, [pc, #384]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8006050:	f043 0304 	orr.w	r3, r3, #4
 8006054:	6713      	str	r3, [r2, #112]	; 0x70
 8006056:	4b5e      	ldr	r3, [pc, #376]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	4a5d      	ldr	r2, [pc, #372]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	6713      	str	r3, [r2, #112]	; 0x70
 8006062:	e00b      	b.n	800607c <HAL_RCC_OscConfig+0x324>
 8006064:	4b5a      	ldr	r3, [pc, #360]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	4a59      	ldr	r2, [pc, #356]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	6713      	str	r3, [r2, #112]	; 0x70
 8006070:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006074:	4a56      	ldr	r2, [pc, #344]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8006076:	f023 0304 	bic.w	r3, r3, #4
 800607a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d015      	beq.n	80060b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006084:	f7ff f9a4 	bl	80053d0 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608a:	e00a      	b.n	80060a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800608c:	f7ff f9a0 	bl	80053d0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f241 3288 	movw	r2, #5000	; 0x1388
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e0d7      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a2:	4b4b      	ldr	r3, [pc, #300]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0ee      	beq.n	800608c <HAL_RCC_OscConfig+0x334>
 80060ae:	e014      	b.n	80060da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b0:	f7ff f98e 	bl	80053d0 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b6:	e00a      	b.n	80060ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b8:	f7ff f98a 	bl	80053d0 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e0c1      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ce:	4b40      	ldr	r3, [pc, #256]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1ee      	bne.n	80060b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d105      	bne.n	80060ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e0:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	4a3a      	ldr	r2, [pc, #232]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 80060e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80ad 	beq.w	8006250 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060f6:	4b36      	ldr	r3, [pc, #216]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d060      	beq.n	80061c4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d145      	bne.n	8006196 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610a:	4b33      	ldr	r3, [pc, #204]	; (80061d8 <HAL_RCC_OscConfig+0x480>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7ff f95e 	bl	80053d0 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006118:	f7ff f95a 	bl	80053d0 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e093      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612a:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	019b      	lsls	r3, r3, #6
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	3b01      	subs	r3, #1
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	061b      	lsls	r3, r3, #24
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	071b      	lsls	r3, r3, #28
 8006162:	491b      	ldr	r1, [pc, #108]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 8006164:	4313      	orrs	r3, r2
 8006166:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006168:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x480>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7ff f92f 	bl	80053d0 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006176:	f7ff f92b 	bl	80053d0 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e064      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x41e>
 8006194:	e05c      	b.n	8006250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <HAL_RCC_OscConfig+0x480>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7ff f918 	bl	80053d0 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a4:	f7ff f914 	bl	80053d0 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e04d      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <HAL_RCC_OscConfig+0x478>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x44c>
 80061c2:	e045      	b.n	8006250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d107      	bne.n	80061dc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e040      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	40007000 	.word	0x40007000
 80061d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061dc:	4b1f      	ldr	r3, [pc, #124]	; (800625c <HAL_RCC_OscConfig+0x504>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d030      	beq.n	800624c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d129      	bne.n	800624c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d122      	bne.n	800624c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006214:	4293      	cmp	r3, r2
 8006216:	d119      	bne.n	800624c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	3b01      	subs	r3, #1
 8006226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006228:	429a      	cmp	r2, r3
 800622a:	d10f      	bne.n	800624c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d107      	bne.n	800624c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800

08006260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e07b      	b.n	800636a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d108      	bne.n	800628c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006282:	d009      	beq.n	8006298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	61da      	str	r2, [r3, #28]
 800628a:	e005      	b.n	8006298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fe fd96 	bl	8004de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	ea42 0103 	orr.w	r1, r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	f003 0104 	and.w	r1, r3, #4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	f003 0210 	and.w	r2, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b088      	sub	sp, #32
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	603b      	str	r3, [r7, #0]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_SPI_Transmit+0x22>
 8006390:	2302      	movs	r3, #2
 8006392:	e126      	b.n	80065e2 <HAL_SPI_Transmit+0x270>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800639c:	f7ff f818 	bl	80053d0 <HAL_GetTick>
 80063a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d002      	beq.n	80063b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
 80063b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063b6:	e10b      	b.n	80065d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_SPI_Transmit+0x52>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063c8:	e102      	b.n	80065d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2203      	movs	r2, #3
 80063ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006410:	d10f      	bne.n	8006432 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006420:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006430:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d007      	beq.n	8006450 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006458:	d14b      	bne.n	80064f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_SPI_Transmit+0xf6>
 8006462:	8afb      	ldrh	r3, [r7, #22]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d13e      	bne.n	80064e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	881a      	ldrh	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	1c9a      	adds	r2, r3, #2
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800648c:	e02b      	b.n	80064e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b02      	cmp	r3, #2
 800649a:	d112      	bne.n	80064c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	86da      	strh	r2, [r3, #54]	; 0x36
 80064c0:	e011      	b.n	80064e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064c2:	f7fe ff85 	bl	80053d0 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d803      	bhi.n	80064da <HAL_SPI_Transmit+0x168>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_Transmit+0x16e>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064e4:	e074      	b.n	80065d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ce      	bne.n	800648e <HAL_SPI_Transmit+0x11c>
 80064f0:	e04c      	b.n	800658c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_Transmit+0x18e>
 80064fa:	8afb      	ldrh	r3, [r7, #22]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d140      	bne.n	8006582 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	330c      	adds	r3, #12
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006526:	e02c      	b.n	8006582 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d113      	bne.n	800655e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	86da      	strh	r2, [r3, #54]	; 0x36
 800655c:	e011      	b.n	8006582 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800655e:	f7fe ff37 	bl	80053d0 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d803      	bhi.n	8006576 <HAL_SPI_Transmit+0x204>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d102      	bne.n	800657c <HAL_SPI_Transmit+0x20a>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006580:	e026      	b.n	80065d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1cd      	bne.n	8006528 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fbcb 	bl	8006d2c <SPI_EndRxTxTransaction>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e000      	b.n	80065d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b088      	sub	sp, #32
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	603b      	str	r3, [r7, #0]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006606:	d112      	bne.n	800662e <HAL_SPI_Receive+0x44>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10e      	bne.n	800662e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2204      	movs	r2, #4
 8006614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f8f1 	bl	800680c <HAL_SPI_TransmitReceive>
 800662a:	4603      	mov	r3, r0
 800662c:	e0ea      	b.n	8006804 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_SPI_Receive+0x52>
 8006638:	2302      	movs	r3, #2
 800663a:	e0e3      	b.n	8006804 <HAL_SPI_Receive+0x21a>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006644:	f7fe fec4 	bl	80053d0 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b01      	cmp	r3, #1
 8006654:	d002      	beq.n	800665c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800665a:	e0ca      	b.n	80067f2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_SPI_Receive+0x7e>
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800666c:	e0c1      	b.n	80067f2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2204      	movs	r2, #4
 8006672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	88fa      	ldrh	r2, [r7, #6]
 8006686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	d10f      	bne.n	80066d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	d007      	beq.n	80066f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d162      	bne.n	80067c2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066fc:	e02e      	b.n	800675c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b01      	cmp	r3, #1
 800670a:	d115      	bne.n	8006738 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f103 020c 	add.w	r2, r3, #12
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	7812      	ldrb	r2, [r2, #0]
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006736:	e011      	b.n	800675c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006738:	f7fe fe4a 	bl	80053d0 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d803      	bhi.n	8006750 <HAL_SPI_Receive+0x166>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d102      	bne.n	8006756 <HAL_SPI_Receive+0x16c>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	75fb      	strb	r3, [r7, #23]
          goto error;
 800675a:	e04a      	b.n	80067f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1cb      	bne.n	80066fe <HAL_SPI_Receive+0x114>
 8006766:	e031      	b.n	80067cc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b01      	cmp	r3, #1
 8006774:	d113      	bne.n	800679e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	b292      	uxth	r2, r2
 8006782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800679c:	e011      	b.n	80067c2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800679e:	f7fe fe17 	bl	80053d0 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d803      	bhi.n	80067b6 <HAL_SPI_Receive+0x1cc>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d102      	bne.n	80067bc <HAL_SPI_Receive+0x1d2>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067c0:	e017      	b.n	80067f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1cd      	bne.n	8006768 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fa45 	bl	8006c60 <SPI_EndRxTransaction>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]
 80067ee:	e000      	b.n	80067f2 <HAL_SPI_Receive+0x208>
  }

error :
 80067f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800681a:	2301      	movs	r3, #1
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x26>
 800682e:	2302      	movs	r3, #2
 8006830:	e18a      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x33c>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683a:	f7fe fdc9 	bl	80053d0 <HAL_GetTick>
 800683e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006850:	887b      	ldrh	r3, [r7, #2]
 8006852:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006858:	2b01      	cmp	r3, #1
 800685a:	d00f      	beq.n	800687c <HAL_SPI_TransmitReceive+0x70>
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006862:	d107      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x68>
 800686c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006870:	2b04      	cmp	r3, #4
 8006872:	d003      	beq.n	800687c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006874:	2302      	movs	r3, #2
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800687a:	e15b      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_SPI_TransmitReceive+0x82>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_SPI_TransmitReceive+0x82>
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006894:	e14e      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d003      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2205      	movs	r2, #5
 80068a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	887a      	ldrh	r2, [r7, #2]
 80068ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	887a      	ldrh	r2, [r7, #2]
 80068c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	887a      	ldrh	r2, [r7, #2]
 80068cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	887a      	ldrh	r2, [r7, #2]
 80068d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d007      	beq.n	80068fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006906:	d178      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_SPI_TransmitReceive+0x10a>
 8006910:	8b7b      	ldrh	r3, [r7, #26]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d166      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	881a      	ldrh	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	1c9a      	adds	r2, r3, #2
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800693a:	e053      	b.n	80069e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d11b      	bne.n	8006982 <HAL_SPI_TransmitReceive+0x176>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x176>
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d113      	bne.n	8006982 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	1c9a      	adds	r2, r3, #2
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d119      	bne.n	80069c4 <HAL_SPI_TransmitReceive+0x1b8>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	b292      	uxth	r2, r2
 80069a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	1c9a      	adds	r2, r3, #2
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069c0:	2301      	movs	r3, #1
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069c4:	f7fe fd04 	bl	80053d0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d807      	bhi.n	80069e4 <HAL_SPI_TransmitReceive+0x1d8>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d003      	beq.n	80069e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069e2:	e0a7      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1a6      	bne.n	800693c <HAL_SPI_TransmitReceive+0x130>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1a1      	bne.n	800693c <HAL_SPI_TransmitReceive+0x130>
 80069f8:	e07c      	b.n	8006af4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0x1fc>
 8006a02:	8b7b      	ldrh	r3, [r7, #26]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d16b      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	7812      	ldrb	r2, [r2, #0]
 8006a14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a2e:	e057      	b.n	8006ae0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d11c      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x26c>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d017      	beq.n	8006a78 <HAL_SPI_TransmitReceive+0x26c>
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d114      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	7812      	ldrb	r2, [r2, #0]
 8006a5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d119      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x2ae>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d014      	beq.n	8006aba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aba:	f7fe fc89 	bl	80053d0 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d803      	bhi.n	8006ad2 <HAL_SPI_TransmitReceive+0x2c6>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x2cc>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ade:	e029      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1a2      	bne.n	8006a30 <HAL_SPI_TransmitReceive+0x224>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d19d      	bne.n	8006a30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f917 	bl	8006d2c <SPI_EndRxTxTransaction>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d006      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b10:	e010      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	e000      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3730      	adds	r7, #48	; 0x30
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b60:	f7fe fc36 	bl	80053d0 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	1a9b      	subs	r3, r3, r2
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b70:	f7fe fc2e 	bl	80053d0 <HAL_GetTick>
 8006b74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	015b      	lsls	r3, r3, #5
 8006b7c:	0d1b      	lsrs	r3, r3, #20
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b86:	e054      	b.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d050      	beq.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b90:	f7fe fc1e 	bl	80053d0 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d902      	bls.n	8006ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d13d      	bne.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bbe:	d111      	bne.n	8006be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc8:	d004      	beq.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd2:	d107      	bne.n	8006be4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bec:	d10f      	bne.n	8006c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e017      	b.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d19b      	bne.n	8006b88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3720      	adds	r7, #32
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	2000005c 	.word	0x2000005c

08006c60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c74:	d111      	bne.n	8006c9a <SPI_EndRxTransaction+0x3a>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d004      	beq.n	8006c8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c88:	d107      	bne.n	8006c9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca2:	d12a      	bne.n	8006cfa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cac:	d012      	beq.n	8006cd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff ff49 	bl	8006b50 <SPI_WaitFlagStateUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d02d      	beq.n	8006d20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	f043 0220 	orr.w	r2, r3, #32
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e026      	b.n	8006d22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2101      	movs	r1, #1
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff ff36 	bl	8006b50 <SPI_WaitFlagStateUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01a      	beq.n	8006d20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e013      	b.n	8006d22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	2101      	movs	r1, #1
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff ff23 	bl	8006b50 <SPI_WaitFlagStateUntilTimeout>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	f043 0220 	orr.w	r2, r3, #32
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e000      	b.n	8006d22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d38:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <SPI_EndRxTxTransaction+0x7c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <SPI_EndRxTxTransaction+0x80>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	0d5b      	lsrs	r3, r3, #21
 8006d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d56:	d112      	bne.n	8006d7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2180      	movs	r1, #128	; 0x80
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f7ff fef4 	bl	8006b50 <SPI_WaitFlagStateUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d016      	beq.n	8006d9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e00f      	b.n	8006d9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d0f2      	beq.n	8006d7e <SPI_EndRxTxTransaction+0x52>
 8006d98:	e000      	b.n	8006d9c <SPI_EndRxTxTransaction+0x70>
        break;
 8006d9a:	bf00      	nop
  }

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	2000005c 	.word	0x2000005c
 8006dac:	165e9f81 	.word	0x165e9f81

08006db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e03f      	b.n	8006e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fe f84c 	bl	8004e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	; 0x24
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f829 	bl	8006e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e50:	b0c0      	sub	sp, #256	; 0x100
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e68:	68d9      	ldr	r1, [r3, #12]
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	ea40 0301 	orr.w	r3, r0, r1
 8006e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ea4:	f021 010c 	bic.w	r1, r1, #12
 8006ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec6:	6999      	ldr	r1, [r3, #24]
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	ea40 0301 	orr.w	r3, r0, r1
 8006ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b8f      	ldr	r3, [pc, #572]	; (8007118 <UART_SetConfig+0x2cc>)
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d005      	beq.n	8006eec <UART_SetConfig+0xa0>
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	4b8d      	ldr	r3, [pc, #564]	; (800711c <UART_SetConfig+0x2d0>)
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d104      	bne.n	8006ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006eec:	f7fe ff20 	bl	8005d30 <HAL_RCC_GetPCLK2Freq>
 8006ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ef4:	e003      	b.n	8006efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ef6:	f7fe ff07 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 8006efa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f08:	f040 810c 	bne.w	8007124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f1e:	4622      	mov	r2, r4
 8006f20:	462b      	mov	r3, r5
 8006f22:	1891      	adds	r1, r2, r2
 8006f24:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f26:	415b      	adcs	r3, r3
 8006f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f2e:	4621      	mov	r1, r4
 8006f30:	eb12 0801 	adds.w	r8, r2, r1
 8006f34:	4629      	mov	r1, r5
 8006f36:	eb43 0901 	adc.w	r9, r3, r1
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f4e:	4690      	mov	r8, r2
 8006f50:	4699      	mov	r9, r3
 8006f52:	4623      	mov	r3, r4
 8006f54:	eb18 0303 	adds.w	r3, r8, r3
 8006f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	eb49 0303 	adc.w	r3, r9, r3
 8006f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	18db      	adds	r3, r3, r3
 8006f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f80:	4613      	mov	r3, r2
 8006f82:	eb42 0303 	adc.w	r3, r2, r3
 8006f86:	657b      	str	r3, [r7, #84]	; 0x54
 8006f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f90:	f7f9 f996 	bl	80002c0 <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4b61      	ldr	r3, [pc, #388]	; (8007120 <UART_SetConfig+0x2d4>)
 8006f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	011c      	lsls	r4, r3, #4
 8006fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	1891      	adds	r1, r2, r2
 8006fba:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fbc:	415b      	adcs	r3, r3
 8006fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8006fca:	4649      	mov	r1, r9
 8006fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fe4:	4692      	mov	sl, r2
 8006fe6:	469b      	mov	fp, r3
 8006fe8:	4643      	mov	r3, r8
 8006fea:	eb1a 0303 	adds.w	r3, sl, r3
 8006fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800700c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007010:	460b      	mov	r3, r1
 8007012:	18db      	adds	r3, r3, r3
 8007014:	643b      	str	r3, [r7, #64]	; 0x40
 8007016:	4613      	mov	r3, r2
 8007018:	eb42 0303 	adc.w	r3, r2, r3
 800701c:	647b      	str	r3, [r7, #68]	; 0x44
 800701e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007026:	f7f9 f94b 	bl	80002c0 <__aeabi_uldivmod>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4611      	mov	r1, r2
 8007030:	4b3b      	ldr	r3, [pc, #236]	; (8007120 <UART_SetConfig+0x2d4>)
 8007032:	fba3 2301 	umull	r2, r3, r3, r1
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	2264      	movs	r2, #100	; 0x64
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	1acb      	subs	r3, r1, r3
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007046:	4b36      	ldr	r3, [pc, #216]	; (8007120 <UART_SetConfig+0x2d4>)
 8007048:	fba3 2302 	umull	r2, r3, r3, r2
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007054:	441c      	add	r4, r3
 8007056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800705a:	2200      	movs	r2, #0
 800705c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007060:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	1891      	adds	r1, r2, r2
 800706e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007070:	415b      	adcs	r3, r3
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007078:	4641      	mov	r1, r8
 800707a:	1851      	adds	r1, r2, r1
 800707c:	6339      	str	r1, [r7, #48]	; 0x30
 800707e:	4649      	mov	r1, r9
 8007080:	414b      	adcs	r3, r1
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007090:	4659      	mov	r1, fp
 8007092:	00cb      	lsls	r3, r1, #3
 8007094:	4651      	mov	r1, sl
 8007096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800709a:	4651      	mov	r1, sl
 800709c:	00ca      	lsls	r2, r1, #3
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	4642      	mov	r2, r8
 80070a6:	189b      	adds	r3, r3, r2
 80070a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070ac:	464b      	mov	r3, r9
 80070ae:	460a      	mov	r2, r1
 80070b0:	eb42 0303 	adc.w	r3, r2, r3
 80070b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070cc:	460b      	mov	r3, r1
 80070ce:	18db      	adds	r3, r3, r3
 80070d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d2:	4613      	mov	r3, r2
 80070d4:	eb42 0303 	adc.w	r3, r2, r3
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070e2:	f7f9 f8ed 	bl	80002c0 <__aeabi_uldivmod>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <UART_SetConfig+0x2d4>)
 80070ec:	fba3 1302 	umull	r1, r3, r3, r2
 80070f0:	095b      	lsrs	r3, r3, #5
 80070f2:	2164      	movs	r1, #100	; 0x64
 80070f4:	fb01 f303 	mul.w	r3, r1, r3
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	3332      	adds	r3, #50	; 0x32
 80070fe:	4a08      	ldr	r2, [pc, #32]	; (8007120 <UART_SetConfig+0x2d4>)
 8007100:	fba2 2303 	umull	r2, r3, r2, r3
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	f003 0207 	and.w	r2, r3, #7
 800710a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4422      	add	r2, r4
 8007112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007114:	e105      	b.n	8007322 <UART_SetConfig+0x4d6>
 8007116:	bf00      	nop
 8007118:	40011000 	.word	0x40011000
 800711c:	40011400 	.word	0x40011400
 8007120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007128:	2200      	movs	r2, #0
 800712a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800712e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007136:	4642      	mov	r2, r8
 8007138:	464b      	mov	r3, r9
 800713a:	1891      	adds	r1, r2, r2
 800713c:	6239      	str	r1, [r7, #32]
 800713e:	415b      	adcs	r3, r3
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
 8007142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007146:	4641      	mov	r1, r8
 8007148:	1854      	adds	r4, r2, r1
 800714a:	4649      	mov	r1, r9
 800714c:	eb43 0501 	adc.w	r5, r3, r1
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	00eb      	lsls	r3, r5, #3
 800715a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800715e:	00e2      	lsls	r2, r4, #3
 8007160:	4614      	mov	r4, r2
 8007162:	461d      	mov	r5, r3
 8007164:	4643      	mov	r3, r8
 8007166:	18e3      	adds	r3, r4, r3
 8007168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800716c:	464b      	mov	r3, r9
 800716e:	eb45 0303 	adc.w	r3, r5, r3
 8007172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007192:	4629      	mov	r1, r5
 8007194:	008b      	lsls	r3, r1, #2
 8007196:	4621      	mov	r1, r4
 8007198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800719c:	4621      	mov	r1, r4
 800719e:	008a      	lsls	r2, r1, #2
 80071a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071a4:	f7f9 f88c 	bl	80002c0 <__aeabi_uldivmod>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4b60      	ldr	r3, [pc, #384]	; (8007330 <UART_SetConfig+0x4e4>)
 80071ae:	fba3 2302 	umull	r2, r3, r3, r2
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	011c      	lsls	r4, r3, #4
 80071b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071c8:	4642      	mov	r2, r8
 80071ca:	464b      	mov	r3, r9
 80071cc:	1891      	adds	r1, r2, r2
 80071ce:	61b9      	str	r1, [r7, #24]
 80071d0:	415b      	adcs	r3, r3
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071d8:	4641      	mov	r1, r8
 80071da:	1851      	adds	r1, r2, r1
 80071dc:	6139      	str	r1, [r7, #16]
 80071de:	4649      	mov	r1, r9
 80071e0:	414b      	adcs	r3, r1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071f0:	4659      	mov	r1, fp
 80071f2:	00cb      	lsls	r3, r1, #3
 80071f4:	4651      	mov	r1, sl
 80071f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fa:	4651      	mov	r1, sl
 80071fc:	00ca      	lsls	r2, r1, #3
 80071fe:	4610      	mov	r0, r2
 8007200:	4619      	mov	r1, r3
 8007202:	4603      	mov	r3, r0
 8007204:	4642      	mov	r2, r8
 8007206:	189b      	adds	r3, r3, r2
 8007208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800720c:	464b      	mov	r3, r9
 800720e:	460a      	mov	r2, r1
 8007210:	eb42 0303 	adc.w	r3, r2, r3
 8007214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	67bb      	str	r3, [r7, #120]	; 0x78
 8007222:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007230:	4649      	mov	r1, r9
 8007232:	008b      	lsls	r3, r1, #2
 8007234:	4641      	mov	r1, r8
 8007236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800723a:	4641      	mov	r1, r8
 800723c:	008a      	lsls	r2, r1, #2
 800723e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007242:	f7f9 f83d 	bl	80002c0 <__aeabi_uldivmod>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4b39      	ldr	r3, [pc, #228]	; (8007330 <UART_SetConfig+0x4e4>)
 800724c:	fba3 1302 	umull	r1, r3, r3, r2
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	2164      	movs	r1, #100	; 0x64
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	3332      	adds	r3, #50	; 0x32
 800725e:	4a34      	ldr	r2, [pc, #208]	; (8007330 <UART_SetConfig+0x4e4>)
 8007260:	fba2 2303 	umull	r2, r3, r2, r3
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800726a:	441c      	add	r4, r3
 800726c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007270:	2200      	movs	r2, #0
 8007272:	673b      	str	r3, [r7, #112]	; 0x70
 8007274:	677a      	str	r2, [r7, #116]	; 0x74
 8007276:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800727a:	4642      	mov	r2, r8
 800727c:	464b      	mov	r3, r9
 800727e:	1891      	adds	r1, r2, r2
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	415b      	adcs	r3, r3
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800728a:	4641      	mov	r1, r8
 800728c:	1851      	adds	r1, r2, r1
 800728e:	6039      	str	r1, [r7, #0]
 8007290:	4649      	mov	r1, r9
 8007292:	414b      	adcs	r3, r1
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	f04f 0300 	mov.w	r3, #0
 800729e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072a2:	4659      	mov	r1, fp
 80072a4:	00cb      	lsls	r3, r1, #3
 80072a6:	4651      	mov	r1, sl
 80072a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ac:	4651      	mov	r1, sl
 80072ae:	00ca      	lsls	r2, r1, #3
 80072b0:	4610      	mov	r0, r2
 80072b2:	4619      	mov	r1, r3
 80072b4:	4603      	mov	r3, r0
 80072b6:	4642      	mov	r2, r8
 80072b8:	189b      	adds	r3, r3, r2
 80072ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80072bc:	464b      	mov	r3, r9
 80072be:	460a      	mov	r2, r1
 80072c0:	eb42 0303 	adc.w	r3, r2, r3
 80072c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	663b      	str	r3, [r7, #96]	; 0x60
 80072d0:	667a      	str	r2, [r7, #100]	; 0x64
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80072de:	4649      	mov	r1, r9
 80072e0:	008b      	lsls	r3, r1, #2
 80072e2:	4641      	mov	r1, r8
 80072e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072e8:	4641      	mov	r1, r8
 80072ea:	008a      	lsls	r2, r1, #2
 80072ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072f0:	f7f8 ffe6 	bl	80002c0 <__aeabi_uldivmod>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <UART_SetConfig+0x4e4>)
 80072fa:	fba3 1302 	umull	r1, r3, r3, r2
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	2164      	movs	r1, #100	; 0x64
 8007302:	fb01 f303 	mul.w	r3, r1, r3
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	3332      	adds	r3, #50	; 0x32
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <UART_SetConfig+0x4e4>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	f003 020f 	and.w	r2, r3, #15
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4422      	add	r2, r4
 8007320:	609a      	str	r2, [r3, #8]
}
 8007322:	bf00      	nop
 8007324:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007328:	46bd      	mov	sp, r7
 800732a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800732e:	bf00      	nop
 8007330:	51eb851f 	.word	0x51eb851f

08007334 <__errno>:
 8007334:	4b01      	ldr	r3, [pc, #4]	; (800733c <__errno+0x8>)
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	20000088 	.word	0x20000088

08007340 <__libc_init_array>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	4d0d      	ldr	r5, [pc, #52]	; (8007378 <__libc_init_array+0x38>)
 8007344:	4c0d      	ldr	r4, [pc, #52]	; (800737c <__libc_init_array+0x3c>)
 8007346:	1b64      	subs	r4, r4, r5
 8007348:	10a4      	asrs	r4, r4, #2
 800734a:	2600      	movs	r6, #0
 800734c:	42a6      	cmp	r6, r4
 800734e:	d109      	bne.n	8007364 <__libc_init_array+0x24>
 8007350:	4d0b      	ldr	r5, [pc, #44]	; (8007380 <__libc_init_array+0x40>)
 8007352:	4c0c      	ldr	r4, [pc, #48]	; (8007384 <__libc_init_array+0x44>)
 8007354:	f001 f86e 	bl	8008434 <_init>
 8007358:	1b64      	subs	r4, r4, r5
 800735a:	10a4      	asrs	r4, r4, #2
 800735c:	2600      	movs	r6, #0
 800735e:	42a6      	cmp	r6, r4
 8007360:	d105      	bne.n	800736e <__libc_init_array+0x2e>
 8007362:	bd70      	pop	{r4, r5, r6, pc}
 8007364:	f855 3b04 	ldr.w	r3, [r5], #4
 8007368:	4798      	blx	r3
 800736a:	3601      	adds	r6, #1
 800736c:	e7ee      	b.n	800734c <__libc_init_array+0xc>
 800736e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007372:	4798      	blx	r3
 8007374:	3601      	adds	r6, #1
 8007376:	e7f2      	b.n	800735e <__libc_init_array+0x1e>
 8007378:	080086bc 	.word	0x080086bc
 800737c:	080086bc 	.word	0x080086bc
 8007380:	080086bc 	.word	0x080086bc
 8007384:	080086c0 	.word	0x080086c0

08007388 <memcpy>:
 8007388:	440a      	add	r2, r1
 800738a:	4291      	cmp	r1, r2
 800738c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007390:	d100      	bne.n	8007394 <memcpy+0xc>
 8007392:	4770      	bx	lr
 8007394:	b510      	push	{r4, lr}
 8007396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800739e:	4291      	cmp	r1, r2
 80073a0:	d1f9      	bne.n	8007396 <memcpy+0xe>
 80073a2:	bd10      	pop	{r4, pc}

080073a4 <memset>:
 80073a4:	4402      	add	r2, r0
 80073a6:	4603      	mov	r3, r0
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d100      	bne.n	80073ae <memset+0xa>
 80073ac:	4770      	bx	lr
 80073ae:	f803 1b01 	strb.w	r1, [r3], #1
 80073b2:	e7f9      	b.n	80073a8 <memset+0x4>

080073b4 <_free_r>:
 80073b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d044      	beq.n	8007444 <_free_r+0x90>
 80073ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073be:	9001      	str	r0, [sp, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f1a1 0404 	sub.w	r4, r1, #4
 80073c6:	bfb8      	it	lt
 80073c8:	18e4      	addlt	r4, r4, r3
 80073ca:	f000 fd05 	bl	8007dd8 <__malloc_lock>
 80073ce:	4a1e      	ldr	r2, [pc, #120]	; (8007448 <_free_r+0x94>)
 80073d0:	9801      	ldr	r0, [sp, #4]
 80073d2:	6813      	ldr	r3, [r2, #0]
 80073d4:	b933      	cbnz	r3, 80073e4 <_free_r+0x30>
 80073d6:	6063      	str	r3, [r4, #4]
 80073d8:	6014      	str	r4, [r2, #0]
 80073da:	b003      	add	sp, #12
 80073dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e0:	f000 bd00 	b.w	8007de4 <__malloc_unlock>
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	d908      	bls.n	80073fa <_free_r+0x46>
 80073e8:	6825      	ldr	r5, [r4, #0]
 80073ea:	1961      	adds	r1, r4, r5
 80073ec:	428b      	cmp	r3, r1
 80073ee:	bf01      	itttt	eq
 80073f0:	6819      	ldreq	r1, [r3, #0]
 80073f2:	685b      	ldreq	r3, [r3, #4]
 80073f4:	1949      	addeq	r1, r1, r5
 80073f6:	6021      	streq	r1, [r4, #0]
 80073f8:	e7ed      	b.n	80073d6 <_free_r+0x22>
 80073fa:	461a      	mov	r2, r3
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	b10b      	cbz	r3, 8007404 <_free_r+0x50>
 8007400:	42a3      	cmp	r3, r4
 8007402:	d9fa      	bls.n	80073fa <_free_r+0x46>
 8007404:	6811      	ldr	r1, [r2, #0]
 8007406:	1855      	adds	r5, r2, r1
 8007408:	42a5      	cmp	r5, r4
 800740a:	d10b      	bne.n	8007424 <_free_r+0x70>
 800740c:	6824      	ldr	r4, [r4, #0]
 800740e:	4421      	add	r1, r4
 8007410:	1854      	adds	r4, r2, r1
 8007412:	42a3      	cmp	r3, r4
 8007414:	6011      	str	r1, [r2, #0]
 8007416:	d1e0      	bne.n	80073da <_free_r+0x26>
 8007418:	681c      	ldr	r4, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	6053      	str	r3, [r2, #4]
 800741e:	4421      	add	r1, r4
 8007420:	6011      	str	r1, [r2, #0]
 8007422:	e7da      	b.n	80073da <_free_r+0x26>
 8007424:	d902      	bls.n	800742c <_free_r+0x78>
 8007426:	230c      	movs	r3, #12
 8007428:	6003      	str	r3, [r0, #0]
 800742a:	e7d6      	b.n	80073da <_free_r+0x26>
 800742c:	6825      	ldr	r5, [r4, #0]
 800742e:	1961      	adds	r1, r4, r5
 8007430:	428b      	cmp	r3, r1
 8007432:	bf04      	itt	eq
 8007434:	6819      	ldreq	r1, [r3, #0]
 8007436:	685b      	ldreq	r3, [r3, #4]
 8007438:	6063      	str	r3, [r4, #4]
 800743a:	bf04      	itt	eq
 800743c:	1949      	addeq	r1, r1, r5
 800743e:	6021      	streq	r1, [r4, #0]
 8007440:	6054      	str	r4, [r2, #4]
 8007442:	e7ca      	b.n	80073da <_free_r+0x26>
 8007444:	b003      	add	sp, #12
 8007446:	bd30      	pop	{r4, r5, pc}
 8007448:	2000134c 	.word	0x2000134c

0800744c <sbrk_aligned>:
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	4e0e      	ldr	r6, [pc, #56]	; (8007488 <sbrk_aligned+0x3c>)
 8007450:	460c      	mov	r4, r1
 8007452:	6831      	ldr	r1, [r6, #0]
 8007454:	4605      	mov	r5, r0
 8007456:	b911      	cbnz	r1, 800745e <sbrk_aligned+0x12>
 8007458:	f000 f91a 	bl	8007690 <_sbrk_r>
 800745c:	6030      	str	r0, [r6, #0]
 800745e:	4621      	mov	r1, r4
 8007460:	4628      	mov	r0, r5
 8007462:	f000 f915 	bl	8007690 <_sbrk_r>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	d00a      	beq.n	8007480 <sbrk_aligned+0x34>
 800746a:	1cc4      	adds	r4, r0, #3
 800746c:	f024 0403 	bic.w	r4, r4, #3
 8007470:	42a0      	cmp	r0, r4
 8007472:	d007      	beq.n	8007484 <sbrk_aligned+0x38>
 8007474:	1a21      	subs	r1, r4, r0
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f90a 	bl	8007690 <_sbrk_r>
 800747c:	3001      	adds	r0, #1
 800747e:	d101      	bne.n	8007484 <sbrk_aligned+0x38>
 8007480:	f04f 34ff 	mov.w	r4, #4294967295
 8007484:	4620      	mov	r0, r4
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	20001350 	.word	0x20001350

0800748c <_malloc_r>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	1ccd      	adds	r5, r1, #3
 8007492:	f025 0503 	bic.w	r5, r5, #3
 8007496:	3508      	adds	r5, #8
 8007498:	2d0c      	cmp	r5, #12
 800749a:	bf38      	it	cc
 800749c:	250c      	movcc	r5, #12
 800749e:	2d00      	cmp	r5, #0
 80074a0:	4607      	mov	r7, r0
 80074a2:	db01      	blt.n	80074a8 <_malloc_r+0x1c>
 80074a4:	42a9      	cmp	r1, r5
 80074a6:	d905      	bls.n	80074b4 <_malloc_r+0x28>
 80074a8:	230c      	movs	r3, #12
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	2600      	movs	r6, #0
 80074ae:	4630      	mov	r0, r6
 80074b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b4:	4e2e      	ldr	r6, [pc, #184]	; (8007570 <_malloc_r+0xe4>)
 80074b6:	f000 fc8f 	bl	8007dd8 <__malloc_lock>
 80074ba:	6833      	ldr	r3, [r6, #0]
 80074bc:	461c      	mov	r4, r3
 80074be:	bb34      	cbnz	r4, 800750e <_malloc_r+0x82>
 80074c0:	4629      	mov	r1, r5
 80074c2:	4638      	mov	r0, r7
 80074c4:	f7ff ffc2 	bl	800744c <sbrk_aligned>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	4604      	mov	r4, r0
 80074cc:	d14d      	bne.n	800756a <_malloc_r+0xde>
 80074ce:	6834      	ldr	r4, [r6, #0]
 80074d0:	4626      	mov	r6, r4
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	d140      	bne.n	8007558 <_malloc_r+0xcc>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	4631      	mov	r1, r6
 80074da:	4638      	mov	r0, r7
 80074dc:	eb04 0803 	add.w	r8, r4, r3
 80074e0:	f000 f8d6 	bl	8007690 <_sbrk_r>
 80074e4:	4580      	cmp	r8, r0
 80074e6:	d13a      	bne.n	800755e <_malloc_r+0xd2>
 80074e8:	6821      	ldr	r1, [r4, #0]
 80074ea:	3503      	adds	r5, #3
 80074ec:	1a6d      	subs	r5, r5, r1
 80074ee:	f025 0503 	bic.w	r5, r5, #3
 80074f2:	3508      	adds	r5, #8
 80074f4:	2d0c      	cmp	r5, #12
 80074f6:	bf38      	it	cc
 80074f8:	250c      	movcc	r5, #12
 80074fa:	4629      	mov	r1, r5
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff ffa5 	bl	800744c <sbrk_aligned>
 8007502:	3001      	adds	r0, #1
 8007504:	d02b      	beq.n	800755e <_malloc_r+0xd2>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	442b      	add	r3, r5
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	e00e      	b.n	800752c <_malloc_r+0xa0>
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	1b52      	subs	r2, r2, r5
 8007512:	d41e      	bmi.n	8007552 <_malloc_r+0xc6>
 8007514:	2a0b      	cmp	r2, #11
 8007516:	d916      	bls.n	8007546 <_malloc_r+0xba>
 8007518:	1961      	adds	r1, r4, r5
 800751a:	42a3      	cmp	r3, r4
 800751c:	6025      	str	r5, [r4, #0]
 800751e:	bf18      	it	ne
 8007520:	6059      	strne	r1, [r3, #4]
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	bf08      	it	eq
 8007526:	6031      	streq	r1, [r6, #0]
 8007528:	5162      	str	r2, [r4, r5]
 800752a:	604b      	str	r3, [r1, #4]
 800752c:	4638      	mov	r0, r7
 800752e:	f104 060b 	add.w	r6, r4, #11
 8007532:	f000 fc57 	bl	8007de4 <__malloc_unlock>
 8007536:	f026 0607 	bic.w	r6, r6, #7
 800753a:	1d23      	adds	r3, r4, #4
 800753c:	1af2      	subs	r2, r6, r3
 800753e:	d0b6      	beq.n	80074ae <_malloc_r+0x22>
 8007540:	1b9b      	subs	r3, r3, r6
 8007542:	50a3      	str	r3, [r4, r2]
 8007544:	e7b3      	b.n	80074ae <_malloc_r+0x22>
 8007546:	6862      	ldr	r2, [r4, #4]
 8007548:	42a3      	cmp	r3, r4
 800754a:	bf0c      	ite	eq
 800754c:	6032      	streq	r2, [r6, #0]
 800754e:	605a      	strne	r2, [r3, #4]
 8007550:	e7ec      	b.n	800752c <_malloc_r+0xa0>
 8007552:	4623      	mov	r3, r4
 8007554:	6864      	ldr	r4, [r4, #4]
 8007556:	e7b2      	b.n	80074be <_malloc_r+0x32>
 8007558:	4634      	mov	r4, r6
 800755a:	6876      	ldr	r6, [r6, #4]
 800755c:	e7b9      	b.n	80074d2 <_malloc_r+0x46>
 800755e:	230c      	movs	r3, #12
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	4638      	mov	r0, r7
 8007564:	f000 fc3e 	bl	8007de4 <__malloc_unlock>
 8007568:	e7a1      	b.n	80074ae <_malloc_r+0x22>
 800756a:	6025      	str	r5, [r4, #0]
 800756c:	e7de      	b.n	800752c <_malloc_r+0xa0>
 800756e:	bf00      	nop
 8007570:	2000134c 	.word	0x2000134c

08007574 <iprintf>:
 8007574:	b40f      	push	{r0, r1, r2, r3}
 8007576:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <iprintf+0x2c>)
 8007578:	b513      	push	{r0, r1, r4, lr}
 800757a:	681c      	ldr	r4, [r3, #0]
 800757c:	b124      	cbz	r4, 8007588 <iprintf+0x14>
 800757e:	69a3      	ldr	r3, [r4, #24]
 8007580:	b913      	cbnz	r3, 8007588 <iprintf+0x14>
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fb10 	bl	8007ba8 <__sinit>
 8007588:	ab05      	add	r3, sp, #20
 800758a:	9a04      	ldr	r2, [sp, #16]
 800758c:	68a1      	ldr	r1, [r4, #8]
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fc57 	bl	8007e44 <_vfiprintf_r>
 8007596:	b002      	add	sp, #8
 8007598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800759c:	b004      	add	sp, #16
 800759e:	4770      	bx	lr
 80075a0:	20000088 	.word	0x20000088

080075a4 <_puts_r>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	460e      	mov	r6, r1
 80075a8:	4605      	mov	r5, r0
 80075aa:	b118      	cbz	r0, 80075b4 <_puts_r+0x10>
 80075ac:	6983      	ldr	r3, [r0, #24]
 80075ae:	b90b      	cbnz	r3, 80075b4 <_puts_r+0x10>
 80075b0:	f000 fafa 	bl	8007ba8 <__sinit>
 80075b4:	69ab      	ldr	r3, [r5, #24]
 80075b6:	68ac      	ldr	r4, [r5, #8]
 80075b8:	b913      	cbnz	r3, 80075c0 <_puts_r+0x1c>
 80075ba:	4628      	mov	r0, r5
 80075bc:	f000 faf4 	bl	8007ba8 <__sinit>
 80075c0:	4b2c      	ldr	r3, [pc, #176]	; (8007674 <_puts_r+0xd0>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d120      	bne.n	8007608 <_puts_r+0x64>
 80075c6:	686c      	ldr	r4, [r5, #4]
 80075c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075ca:	07db      	lsls	r3, r3, #31
 80075cc:	d405      	bmi.n	80075da <_puts_r+0x36>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	0598      	lsls	r0, r3, #22
 80075d2:	d402      	bmi.n	80075da <_puts_r+0x36>
 80075d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075d6:	f000 fb85 	bl	8007ce4 <__retarget_lock_acquire_recursive>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	0719      	lsls	r1, r3, #28
 80075de:	d51d      	bpl.n	800761c <_puts_r+0x78>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	b1db      	cbz	r3, 800761c <_puts_r+0x78>
 80075e4:	3e01      	subs	r6, #1
 80075e6:	68a3      	ldr	r3, [r4, #8]
 80075e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075ec:	3b01      	subs	r3, #1
 80075ee:	60a3      	str	r3, [r4, #8]
 80075f0:	bb39      	cbnz	r1, 8007642 <_puts_r+0x9e>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da38      	bge.n	8007668 <_puts_r+0xc4>
 80075f6:	4622      	mov	r2, r4
 80075f8:	210a      	movs	r1, #10
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f8d8 	bl	80077b0 <__swbuf_r>
 8007600:	3001      	adds	r0, #1
 8007602:	d011      	beq.n	8007628 <_puts_r+0x84>
 8007604:	250a      	movs	r5, #10
 8007606:	e011      	b.n	800762c <_puts_r+0x88>
 8007608:	4b1b      	ldr	r3, [pc, #108]	; (8007678 <_puts_r+0xd4>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d101      	bne.n	8007612 <_puts_r+0x6e>
 800760e:	68ac      	ldr	r4, [r5, #8]
 8007610:	e7da      	b.n	80075c8 <_puts_r+0x24>
 8007612:	4b1a      	ldr	r3, [pc, #104]	; (800767c <_puts_r+0xd8>)
 8007614:	429c      	cmp	r4, r3
 8007616:	bf08      	it	eq
 8007618:	68ec      	ldreq	r4, [r5, #12]
 800761a:	e7d5      	b.n	80075c8 <_puts_r+0x24>
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f92a 	bl	8007878 <__swsetup_r>
 8007624:	2800      	cmp	r0, #0
 8007626:	d0dd      	beq.n	80075e4 <_puts_r+0x40>
 8007628:	f04f 35ff 	mov.w	r5, #4294967295
 800762c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800762e:	07da      	lsls	r2, r3, #31
 8007630:	d405      	bmi.n	800763e <_puts_r+0x9a>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	059b      	lsls	r3, r3, #22
 8007636:	d402      	bmi.n	800763e <_puts_r+0x9a>
 8007638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800763a:	f000 fb54 	bl	8007ce6 <__retarget_lock_release_recursive>
 800763e:	4628      	mov	r0, r5
 8007640:	bd70      	pop	{r4, r5, r6, pc}
 8007642:	2b00      	cmp	r3, #0
 8007644:	da04      	bge.n	8007650 <_puts_r+0xac>
 8007646:	69a2      	ldr	r2, [r4, #24]
 8007648:	429a      	cmp	r2, r3
 800764a:	dc06      	bgt.n	800765a <_puts_r+0xb6>
 800764c:	290a      	cmp	r1, #10
 800764e:	d004      	beq.n	800765a <_puts_r+0xb6>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	6022      	str	r2, [r4, #0]
 8007656:	7019      	strb	r1, [r3, #0]
 8007658:	e7c5      	b.n	80075e6 <_puts_r+0x42>
 800765a:	4622      	mov	r2, r4
 800765c:	4628      	mov	r0, r5
 800765e:	f000 f8a7 	bl	80077b0 <__swbuf_r>
 8007662:	3001      	adds	r0, #1
 8007664:	d1bf      	bne.n	80075e6 <_puts_r+0x42>
 8007666:	e7df      	b.n	8007628 <_puts_r+0x84>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	250a      	movs	r5, #10
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	6022      	str	r2, [r4, #0]
 8007670:	701d      	strb	r5, [r3, #0]
 8007672:	e7db      	b.n	800762c <_puts_r+0x88>
 8007674:	08008640 	.word	0x08008640
 8007678:	08008660 	.word	0x08008660
 800767c:	08008620 	.word	0x08008620

08007680 <puts>:
 8007680:	4b02      	ldr	r3, [pc, #8]	; (800768c <puts+0xc>)
 8007682:	4601      	mov	r1, r0
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	f7ff bf8d 	b.w	80075a4 <_puts_r>
 800768a:	bf00      	nop
 800768c:	20000088 	.word	0x20000088

08007690 <_sbrk_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d06      	ldr	r5, [pc, #24]	; (80076ac <_sbrk_r+0x1c>)
 8007694:	2300      	movs	r3, #0
 8007696:	4604      	mov	r4, r0
 8007698:	4608      	mov	r0, r1
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	f7fd fcca 	bl	8005034 <_sbrk>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_sbrk_r+0x1a>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_sbrk_r+0x1a>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20001358 	.word	0x20001358

080076b0 <__sread>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f000 fe88 	bl	80083cc <_read_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	bfab      	itete	ge
 80076c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076c2:	89a3      	ldrhlt	r3, [r4, #12]
 80076c4:	181b      	addge	r3, r3, r0
 80076c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076ca:	bfac      	ite	ge
 80076cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80076ce:	81a3      	strhlt	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__swrite>:
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	461f      	mov	r7, r3
 80076d8:	898b      	ldrh	r3, [r1, #12]
 80076da:	05db      	lsls	r3, r3, #23
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	4616      	mov	r6, r2
 80076e2:	d505      	bpl.n	80076f0 <__swrite+0x1e>
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	2302      	movs	r3, #2
 80076ea:	2200      	movs	r2, #0
 80076ec:	f000 fafc 	bl	8007ce8 <_lseek_r>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007706:	f000 b8a5 	b.w	8007854 <_write_r>

0800770a <__sseek>:
 800770a:	b510      	push	{r4, lr}
 800770c:	460c      	mov	r4, r1
 800770e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007712:	f000 fae9 	bl	8007ce8 <_lseek_r>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	bf15      	itete	ne
 800771c:	6560      	strne	r0, [r4, #84]	; 0x54
 800771e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007726:	81a3      	strheq	r3, [r4, #12]
 8007728:	bf18      	it	ne
 800772a:	81a3      	strhne	r3, [r4, #12]
 800772c:	bd10      	pop	{r4, pc}

0800772e <__sclose>:
 800772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007732:	f000 b90f 	b.w	8007954 <_close_r>

08007736 <strchr>:
 8007736:	b2c9      	uxtb	r1, r1
 8007738:	4603      	mov	r3, r0
 800773a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773e:	b11a      	cbz	r2, 8007748 <strchr+0x12>
 8007740:	428a      	cmp	r2, r1
 8007742:	d1f9      	bne.n	8007738 <strchr+0x2>
 8007744:	4618      	mov	r0, r3
 8007746:	4770      	bx	lr
 8007748:	2900      	cmp	r1, #0
 800774a:	bf18      	it	ne
 800774c:	2300      	movne	r3, #0
 800774e:	e7f9      	b.n	8007744 <strchr+0xe>

08007750 <strcpy>:
 8007750:	4603      	mov	r3, r0
 8007752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007756:	f803 2b01 	strb.w	r2, [r3], #1
 800775a:	2a00      	cmp	r2, #0
 800775c:	d1f9      	bne.n	8007752 <strcpy+0x2>
 800775e:	4770      	bx	lr

08007760 <strncmp>:
 8007760:	b510      	push	{r4, lr}
 8007762:	b17a      	cbz	r2, 8007784 <strncmp+0x24>
 8007764:	4603      	mov	r3, r0
 8007766:	3901      	subs	r1, #1
 8007768:	1884      	adds	r4, r0, r2
 800776a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800776e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007772:	4290      	cmp	r0, r2
 8007774:	d101      	bne.n	800777a <strncmp+0x1a>
 8007776:	42a3      	cmp	r3, r4
 8007778:	d101      	bne.n	800777e <strncmp+0x1e>
 800777a:	1a80      	subs	r0, r0, r2
 800777c:	bd10      	pop	{r4, pc}
 800777e:	2800      	cmp	r0, #0
 8007780:	d1f3      	bne.n	800776a <strncmp+0xa>
 8007782:	e7fa      	b.n	800777a <strncmp+0x1a>
 8007784:	4610      	mov	r0, r2
 8007786:	e7f9      	b.n	800777c <strncmp+0x1c>

08007788 <strncpy>:
 8007788:	b510      	push	{r4, lr}
 800778a:	3901      	subs	r1, #1
 800778c:	4603      	mov	r3, r0
 800778e:	b132      	cbz	r2, 800779e <strncpy+0x16>
 8007790:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007794:	f803 4b01 	strb.w	r4, [r3], #1
 8007798:	3a01      	subs	r2, #1
 800779a:	2c00      	cmp	r4, #0
 800779c:	d1f7      	bne.n	800778e <strncpy+0x6>
 800779e:	441a      	add	r2, r3
 80077a0:	2100      	movs	r1, #0
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d100      	bne.n	80077a8 <strncpy+0x20>
 80077a6:	bd10      	pop	{r4, pc}
 80077a8:	f803 1b01 	strb.w	r1, [r3], #1
 80077ac:	e7f9      	b.n	80077a2 <strncpy+0x1a>
	...

080077b0 <__swbuf_r>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	460e      	mov	r6, r1
 80077b4:	4614      	mov	r4, r2
 80077b6:	4605      	mov	r5, r0
 80077b8:	b118      	cbz	r0, 80077c2 <__swbuf_r+0x12>
 80077ba:	6983      	ldr	r3, [r0, #24]
 80077bc:	b90b      	cbnz	r3, 80077c2 <__swbuf_r+0x12>
 80077be:	f000 f9f3 	bl	8007ba8 <__sinit>
 80077c2:	4b21      	ldr	r3, [pc, #132]	; (8007848 <__swbuf_r+0x98>)
 80077c4:	429c      	cmp	r4, r3
 80077c6:	d12b      	bne.n	8007820 <__swbuf_r+0x70>
 80077c8:	686c      	ldr	r4, [r5, #4]
 80077ca:	69a3      	ldr	r3, [r4, #24]
 80077cc:	60a3      	str	r3, [r4, #8]
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	071a      	lsls	r2, r3, #28
 80077d2:	d52f      	bpl.n	8007834 <__swbuf_r+0x84>
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	b36b      	cbz	r3, 8007834 <__swbuf_r+0x84>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	6820      	ldr	r0, [r4, #0]
 80077dc:	1ac0      	subs	r0, r0, r3
 80077de:	6963      	ldr	r3, [r4, #20]
 80077e0:	b2f6      	uxtb	r6, r6
 80077e2:	4283      	cmp	r3, r0
 80077e4:	4637      	mov	r7, r6
 80077e6:	dc04      	bgt.n	80077f2 <__swbuf_r+0x42>
 80077e8:	4621      	mov	r1, r4
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 f948 	bl	8007a80 <_fflush_r>
 80077f0:	bb30      	cbnz	r0, 8007840 <__swbuf_r+0x90>
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	60a3      	str	r3, [r4, #8]
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	6022      	str	r2, [r4, #0]
 80077fe:	701e      	strb	r6, [r3, #0]
 8007800:	6963      	ldr	r3, [r4, #20]
 8007802:	3001      	adds	r0, #1
 8007804:	4283      	cmp	r3, r0
 8007806:	d004      	beq.n	8007812 <__swbuf_r+0x62>
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	07db      	lsls	r3, r3, #31
 800780c:	d506      	bpl.n	800781c <__swbuf_r+0x6c>
 800780e:	2e0a      	cmp	r6, #10
 8007810:	d104      	bne.n	800781c <__swbuf_r+0x6c>
 8007812:	4621      	mov	r1, r4
 8007814:	4628      	mov	r0, r5
 8007816:	f000 f933 	bl	8007a80 <_fflush_r>
 800781a:	b988      	cbnz	r0, 8007840 <__swbuf_r+0x90>
 800781c:	4638      	mov	r0, r7
 800781e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <__swbuf_r+0x9c>)
 8007822:	429c      	cmp	r4, r3
 8007824:	d101      	bne.n	800782a <__swbuf_r+0x7a>
 8007826:	68ac      	ldr	r4, [r5, #8]
 8007828:	e7cf      	b.n	80077ca <__swbuf_r+0x1a>
 800782a:	4b09      	ldr	r3, [pc, #36]	; (8007850 <__swbuf_r+0xa0>)
 800782c:	429c      	cmp	r4, r3
 800782e:	bf08      	it	eq
 8007830:	68ec      	ldreq	r4, [r5, #12]
 8007832:	e7ca      	b.n	80077ca <__swbuf_r+0x1a>
 8007834:	4621      	mov	r1, r4
 8007836:	4628      	mov	r0, r5
 8007838:	f000 f81e 	bl	8007878 <__swsetup_r>
 800783c:	2800      	cmp	r0, #0
 800783e:	d0cb      	beq.n	80077d8 <__swbuf_r+0x28>
 8007840:	f04f 37ff 	mov.w	r7, #4294967295
 8007844:	e7ea      	b.n	800781c <__swbuf_r+0x6c>
 8007846:	bf00      	nop
 8007848:	08008640 	.word	0x08008640
 800784c:	08008660 	.word	0x08008660
 8007850:	08008620 	.word	0x08008620

08007854 <_write_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d07      	ldr	r5, [pc, #28]	; (8007874 <_write_r+0x20>)
 8007858:	4604      	mov	r4, r0
 800785a:	4608      	mov	r0, r1
 800785c:	4611      	mov	r1, r2
 800785e:	2200      	movs	r2, #0
 8007860:	602a      	str	r2, [r5, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	f7fd fb95 	bl	8004f92 <_write>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_write_r+0x1e>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_write_r+0x1e>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20001358 	.word	0x20001358

08007878 <__swsetup_r>:
 8007878:	4b32      	ldr	r3, [pc, #200]	; (8007944 <__swsetup_r+0xcc>)
 800787a:	b570      	push	{r4, r5, r6, lr}
 800787c:	681d      	ldr	r5, [r3, #0]
 800787e:	4606      	mov	r6, r0
 8007880:	460c      	mov	r4, r1
 8007882:	b125      	cbz	r5, 800788e <__swsetup_r+0x16>
 8007884:	69ab      	ldr	r3, [r5, #24]
 8007886:	b913      	cbnz	r3, 800788e <__swsetup_r+0x16>
 8007888:	4628      	mov	r0, r5
 800788a:	f000 f98d 	bl	8007ba8 <__sinit>
 800788e:	4b2e      	ldr	r3, [pc, #184]	; (8007948 <__swsetup_r+0xd0>)
 8007890:	429c      	cmp	r4, r3
 8007892:	d10f      	bne.n	80078b4 <__swsetup_r+0x3c>
 8007894:	686c      	ldr	r4, [r5, #4]
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800789c:	0719      	lsls	r1, r3, #28
 800789e:	d42c      	bmi.n	80078fa <__swsetup_r+0x82>
 80078a0:	06dd      	lsls	r5, r3, #27
 80078a2:	d411      	bmi.n	80078c8 <__swsetup_r+0x50>
 80078a4:	2309      	movs	r3, #9
 80078a6:	6033      	str	r3, [r6, #0]
 80078a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	e03e      	b.n	8007932 <__swsetup_r+0xba>
 80078b4:	4b25      	ldr	r3, [pc, #148]	; (800794c <__swsetup_r+0xd4>)
 80078b6:	429c      	cmp	r4, r3
 80078b8:	d101      	bne.n	80078be <__swsetup_r+0x46>
 80078ba:	68ac      	ldr	r4, [r5, #8]
 80078bc:	e7eb      	b.n	8007896 <__swsetup_r+0x1e>
 80078be:	4b24      	ldr	r3, [pc, #144]	; (8007950 <__swsetup_r+0xd8>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	bf08      	it	eq
 80078c4:	68ec      	ldreq	r4, [r5, #12]
 80078c6:	e7e6      	b.n	8007896 <__swsetup_r+0x1e>
 80078c8:	0758      	lsls	r0, r3, #29
 80078ca:	d512      	bpl.n	80078f2 <__swsetup_r+0x7a>
 80078cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ce:	b141      	cbz	r1, 80078e2 <__swsetup_r+0x6a>
 80078d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078d4:	4299      	cmp	r1, r3
 80078d6:	d002      	beq.n	80078de <__swsetup_r+0x66>
 80078d8:	4630      	mov	r0, r6
 80078da:	f7ff fd6b 	bl	80073b4 <_free_r>
 80078de:	2300      	movs	r3, #0
 80078e0:	6363      	str	r3, [r4, #52]	; 0x34
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078e8:	81a3      	strh	r3, [r4, #12]
 80078ea:	2300      	movs	r3, #0
 80078ec:	6063      	str	r3, [r4, #4]
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f043 0308 	orr.w	r3, r3, #8
 80078f8:	81a3      	strh	r3, [r4, #12]
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	b94b      	cbnz	r3, 8007912 <__swsetup_r+0x9a>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007908:	d003      	beq.n	8007912 <__swsetup_r+0x9a>
 800790a:	4621      	mov	r1, r4
 800790c:	4630      	mov	r0, r6
 800790e:	f000 fa23 	bl	8007d58 <__smakebuf_r>
 8007912:	89a0      	ldrh	r0, [r4, #12]
 8007914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007918:	f010 0301 	ands.w	r3, r0, #1
 800791c:	d00a      	beq.n	8007934 <__swsetup_r+0xbc>
 800791e:	2300      	movs	r3, #0
 8007920:	60a3      	str	r3, [r4, #8]
 8007922:	6963      	ldr	r3, [r4, #20]
 8007924:	425b      	negs	r3, r3
 8007926:	61a3      	str	r3, [r4, #24]
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	b943      	cbnz	r3, 800793e <__swsetup_r+0xc6>
 800792c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007930:	d1ba      	bne.n	80078a8 <__swsetup_r+0x30>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	0781      	lsls	r1, r0, #30
 8007936:	bf58      	it	pl
 8007938:	6963      	ldrpl	r3, [r4, #20]
 800793a:	60a3      	str	r3, [r4, #8]
 800793c:	e7f4      	b.n	8007928 <__swsetup_r+0xb0>
 800793e:	2000      	movs	r0, #0
 8007940:	e7f7      	b.n	8007932 <__swsetup_r+0xba>
 8007942:	bf00      	nop
 8007944:	20000088 	.word	0x20000088
 8007948:	08008640 	.word	0x08008640
 800794c:	08008660 	.word	0x08008660
 8007950:	08008620 	.word	0x08008620

08007954 <_close_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d06      	ldr	r5, [pc, #24]	; (8007970 <_close_r+0x1c>)
 8007958:	2300      	movs	r3, #0
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	f7fd fb33 	bl	8004fca <_close>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_close_r+0x1a>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_close_r+0x1a>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20001358 	.word	0x20001358

08007974 <__sflush_r>:
 8007974:	898a      	ldrh	r2, [r1, #12]
 8007976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	0710      	lsls	r0, r2, #28
 800797e:	460c      	mov	r4, r1
 8007980:	d458      	bmi.n	8007a34 <__sflush_r+0xc0>
 8007982:	684b      	ldr	r3, [r1, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dc05      	bgt.n	8007994 <__sflush_r+0x20>
 8007988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	dc02      	bgt.n	8007994 <__sflush_r+0x20>
 800798e:	2000      	movs	r0, #0
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007996:	2e00      	cmp	r6, #0
 8007998:	d0f9      	beq.n	800798e <__sflush_r+0x1a>
 800799a:	2300      	movs	r3, #0
 800799c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079a0:	682f      	ldr	r7, [r5, #0]
 80079a2:	602b      	str	r3, [r5, #0]
 80079a4:	d032      	beq.n	8007a0c <__sflush_r+0x98>
 80079a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	075a      	lsls	r2, r3, #29
 80079ac:	d505      	bpl.n	80079ba <__sflush_r+0x46>
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	1ac0      	subs	r0, r0, r3
 80079b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079b4:	b10b      	cbz	r3, 80079ba <__sflush_r+0x46>
 80079b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b8:	1ac0      	subs	r0, r0, r3
 80079ba:	2300      	movs	r3, #0
 80079bc:	4602      	mov	r2, r0
 80079be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c0:	6a21      	ldr	r1, [r4, #32]
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b0      	blx	r6
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	d106      	bne.n	80079da <__sflush_r+0x66>
 80079cc:	6829      	ldr	r1, [r5, #0]
 80079ce:	291d      	cmp	r1, #29
 80079d0:	d82c      	bhi.n	8007a2c <__sflush_r+0xb8>
 80079d2:	4a2a      	ldr	r2, [pc, #168]	; (8007a7c <__sflush_r+0x108>)
 80079d4:	40ca      	lsrs	r2, r1
 80079d6:	07d6      	lsls	r6, r2, #31
 80079d8:	d528      	bpl.n	8007a2c <__sflush_r+0xb8>
 80079da:	2200      	movs	r2, #0
 80079dc:	6062      	str	r2, [r4, #4]
 80079de:	04d9      	lsls	r1, r3, #19
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	d504      	bpl.n	80079f0 <__sflush_r+0x7c>
 80079e6:	1c42      	adds	r2, r0, #1
 80079e8:	d101      	bne.n	80079ee <__sflush_r+0x7a>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	b903      	cbnz	r3, 80079f0 <__sflush_r+0x7c>
 80079ee:	6560      	str	r0, [r4, #84]	; 0x54
 80079f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f2:	602f      	str	r7, [r5, #0]
 80079f4:	2900      	cmp	r1, #0
 80079f6:	d0ca      	beq.n	800798e <__sflush_r+0x1a>
 80079f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079fc:	4299      	cmp	r1, r3
 80079fe:	d002      	beq.n	8007a06 <__sflush_r+0x92>
 8007a00:	4628      	mov	r0, r5
 8007a02:	f7ff fcd7 	bl	80073b4 <_free_r>
 8007a06:	2000      	movs	r0, #0
 8007a08:	6360      	str	r0, [r4, #52]	; 0x34
 8007a0a:	e7c1      	b.n	8007990 <__sflush_r+0x1c>
 8007a0c:	6a21      	ldr	r1, [r4, #32]
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b0      	blx	r6
 8007a14:	1c41      	adds	r1, r0, #1
 8007a16:	d1c7      	bne.n	80079a8 <__sflush_r+0x34>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0c4      	beq.n	80079a8 <__sflush_r+0x34>
 8007a1e:	2b1d      	cmp	r3, #29
 8007a20:	d001      	beq.n	8007a26 <__sflush_r+0xb2>
 8007a22:	2b16      	cmp	r3, #22
 8007a24:	d101      	bne.n	8007a2a <__sflush_r+0xb6>
 8007a26:	602f      	str	r7, [r5, #0]
 8007a28:	e7b1      	b.n	800798e <__sflush_r+0x1a>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	e7ad      	b.n	8007990 <__sflush_r+0x1c>
 8007a34:	690f      	ldr	r7, [r1, #16]
 8007a36:	2f00      	cmp	r7, #0
 8007a38:	d0a9      	beq.n	800798e <__sflush_r+0x1a>
 8007a3a:	0793      	lsls	r3, r2, #30
 8007a3c:	680e      	ldr	r6, [r1, #0]
 8007a3e:	bf08      	it	eq
 8007a40:	694b      	ldreq	r3, [r1, #20]
 8007a42:	600f      	str	r7, [r1, #0]
 8007a44:	bf18      	it	ne
 8007a46:	2300      	movne	r3, #0
 8007a48:	eba6 0807 	sub.w	r8, r6, r7
 8007a4c:	608b      	str	r3, [r1, #8]
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	dd9c      	ble.n	800798e <__sflush_r+0x1a>
 8007a54:	6a21      	ldr	r1, [r4, #32]
 8007a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a58:	4643      	mov	r3, r8
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b0      	blx	r6
 8007a60:	2800      	cmp	r0, #0
 8007a62:	dc06      	bgt.n	8007a72 <__sflush_r+0xfe>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6a:	81a3      	strh	r3, [r4, #12]
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e78e      	b.n	8007990 <__sflush_r+0x1c>
 8007a72:	4407      	add	r7, r0
 8007a74:	eba8 0800 	sub.w	r8, r8, r0
 8007a78:	e7e9      	b.n	8007a4e <__sflush_r+0xda>
 8007a7a:	bf00      	nop
 8007a7c:	20400001 	.word	0x20400001

08007a80 <_fflush_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	690b      	ldr	r3, [r1, #16]
 8007a84:	4605      	mov	r5, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	b913      	cbnz	r3, 8007a90 <_fflush_r+0x10>
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	b118      	cbz	r0, 8007a9a <_fflush_r+0x1a>
 8007a92:	6983      	ldr	r3, [r0, #24]
 8007a94:	b90b      	cbnz	r3, 8007a9a <_fflush_r+0x1a>
 8007a96:	f000 f887 	bl	8007ba8 <__sinit>
 8007a9a:	4b14      	ldr	r3, [pc, #80]	; (8007aec <_fflush_r+0x6c>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	d11b      	bne.n	8007ad8 <_fflush_r+0x58>
 8007aa0:	686c      	ldr	r4, [r5, #4]
 8007aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0ef      	beq.n	8007a8a <_fflush_r+0xa>
 8007aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aac:	07d0      	lsls	r0, r2, #31
 8007aae:	d404      	bmi.n	8007aba <_fflush_r+0x3a>
 8007ab0:	0599      	lsls	r1, r3, #22
 8007ab2:	d402      	bmi.n	8007aba <_fflush_r+0x3a>
 8007ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ab6:	f000 f915 	bl	8007ce4 <__retarget_lock_acquire_recursive>
 8007aba:	4628      	mov	r0, r5
 8007abc:	4621      	mov	r1, r4
 8007abe:	f7ff ff59 	bl	8007974 <__sflush_r>
 8007ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ac4:	07da      	lsls	r2, r3, #31
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	d4e0      	bmi.n	8007a8c <_fflush_r+0xc>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	059b      	lsls	r3, r3, #22
 8007ace:	d4dd      	bmi.n	8007a8c <_fflush_r+0xc>
 8007ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ad2:	f000 f908 	bl	8007ce6 <__retarget_lock_release_recursive>
 8007ad6:	e7d9      	b.n	8007a8c <_fflush_r+0xc>
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <_fflush_r+0x70>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	d101      	bne.n	8007ae2 <_fflush_r+0x62>
 8007ade:	68ac      	ldr	r4, [r5, #8]
 8007ae0:	e7df      	b.n	8007aa2 <_fflush_r+0x22>
 8007ae2:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <_fflush_r+0x74>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	bf08      	it	eq
 8007ae8:	68ec      	ldreq	r4, [r5, #12]
 8007aea:	e7da      	b.n	8007aa2 <_fflush_r+0x22>
 8007aec:	08008640 	.word	0x08008640
 8007af0:	08008660 	.word	0x08008660
 8007af4:	08008620 	.word	0x08008620

08007af8 <std>:
 8007af8:	2300      	movs	r3, #0
 8007afa:	b510      	push	{r4, lr}
 8007afc:	4604      	mov	r4, r0
 8007afe:	e9c0 3300 	strd	r3, r3, [r0]
 8007b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b06:	6083      	str	r3, [r0, #8]
 8007b08:	8181      	strh	r1, [r0, #12]
 8007b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b0c:	81c2      	strh	r2, [r0, #14]
 8007b0e:	6183      	str	r3, [r0, #24]
 8007b10:	4619      	mov	r1, r3
 8007b12:	2208      	movs	r2, #8
 8007b14:	305c      	adds	r0, #92	; 0x5c
 8007b16:	f7ff fc45 	bl	80073a4 <memset>
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <std+0x38>)
 8007b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <std+0x3c>)
 8007b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <std+0x40>)
 8007b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <std+0x44>)
 8007b28:	6224      	str	r4, [r4, #32]
 8007b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	bf00      	nop
 8007b30:	080076b1 	.word	0x080076b1
 8007b34:	080076d3 	.word	0x080076d3
 8007b38:	0800770b 	.word	0x0800770b
 8007b3c:	0800772f 	.word	0x0800772f

08007b40 <_cleanup_r>:
 8007b40:	4901      	ldr	r1, [pc, #4]	; (8007b48 <_cleanup_r+0x8>)
 8007b42:	f000 b8af 	b.w	8007ca4 <_fwalk_reent>
 8007b46:	bf00      	nop
 8007b48:	08007a81 	.word	0x08007a81

08007b4c <__sfmoreglue>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	2268      	movs	r2, #104	; 0x68
 8007b50:	1e4d      	subs	r5, r1, #1
 8007b52:	4355      	muls	r5, r2
 8007b54:	460e      	mov	r6, r1
 8007b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b5a:	f7ff fc97 	bl	800748c <_malloc_r>
 8007b5e:	4604      	mov	r4, r0
 8007b60:	b140      	cbz	r0, 8007b74 <__sfmoreglue+0x28>
 8007b62:	2100      	movs	r1, #0
 8007b64:	e9c0 1600 	strd	r1, r6, [r0]
 8007b68:	300c      	adds	r0, #12
 8007b6a:	60a0      	str	r0, [r4, #8]
 8007b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b70:	f7ff fc18 	bl	80073a4 <memset>
 8007b74:	4620      	mov	r0, r4
 8007b76:	bd70      	pop	{r4, r5, r6, pc}

08007b78 <__sfp_lock_acquire>:
 8007b78:	4801      	ldr	r0, [pc, #4]	; (8007b80 <__sfp_lock_acquire+0x8>)
 8007b7a:	f000 b8b3 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007b7e:	bf00      	nop
 8007b80:	20001355 	.word	0x20001355

08007b84 <__sfp_lock_release>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__sfp_lock_release+0x8>)
 8007b86:	f000 b8ae 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	20001355 	.word	0x20001355

08007b90 <__sinit_lock_acquire>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__sinit_lock_acquire+0x8>)
 8007b92:	f000 b8a7 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007b96:	bf00      	nop
 8007b98:	20001356 	.word	0x20001356

08007b9c <__sinit_lock_release>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <__sinit_lock_release+0x8>)
 8007b9e:	f000 b8a2 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	20001356 	.word	0x20001356

08007ba8 <__sinit>:
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	4604      	mov	r4, r0
 8007bac:	f7ff fff0 	bl	8007b90 <__sinit_lock_acquire>
 8007bb0:	69a3      	ldr	r3, [r4, #24]
 8007bb2:	b11b      	cbz	r3, 8007bbc <__sinit+0x14>
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	f7ff bff0 	b.w	8007b9c <__sinit_lock_release>
 8007bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <__sinit+0x68>)
 8007bc4:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <__sinit+0x6c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	bf04      	itt	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	61a3      	streq	r3, [r4, #24]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f820 	bl	8007c18 <__sfp>
 8007bd8:	6060      	str	r0, [r4, #4]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f81c 	bl	8007c18 <__sfp>
 8007be0:	60a0      	str	r0, [r4, #8]
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f818 	bl	8007c18 <__sfp>
 8007be8:	2200      	movs	r2, #0
 8007bea:	60e0      	str	r0, [r4, #12]
 8007bec:	2104      	movs	r1, #4
 8007bee:	6860      	ldr	r0, [r4, #4]
 8007bf0:	f7ff ff82 	bl	8007af8 <std>
 8007bf4:	68a0      	ldr	r0, [r4, #8]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	2109      	movs	r1, #9
 8007bfa:	f7ff ff7d 	bl	8007af8 <std>
 8007bfe:	68e0      	ldr	r0, [r4, #12]
 8007c00:	2202      	movs	r2, #2
 8007c02:	2112      	movs	r1, #18
 8007c04:	f7ff ff78 	bl	8007af8 <std>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	61a3      	str	r3, [r4, #24]
 8007c0c:	e7d2      	b.n	8007bb4 <__sinit+0xc>
 8007c0e:	bf00      	nop
 8007c10:	0800861c 	.word	0x0800861c
 8007c14:	08007b41 	.word	0x08007b41

08007c18 <__sfp>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	f7ff ffac 	bl	8007b78 <__sfp_lock_acquire>
 8007c20:	4b1e      	ldr	r3, [pc, #120]	; (8007c9c <__sfp+0x84>)
 8007c22:	681e      	ldr	r6, [r3, #0]
 8007c24:	69b3      	ldr	r3, [r6, #24]
 8007c26:	b913      	cbnz	r3, 8007c2e <__sfp+0x16>
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff ffbd 	bl	8007ba8 <__sinit>
 8007c2e:	3648      	adds	r6, #72	; 0x48
 8007c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	d503      	bpl.n	8007c40 <__sfp+0x28>
 8007c38:	6833      	ldr	r3, [r6, #0]
 8007c3a:	b30b      	cbz	r3, 8007c80 <__sfp+0x68>
 8007c3c:	6836      	ldr	r6, [r6, #0]
 8007c3e:	e7f7      	b.n	8007c30 <__sfp+0x18>
 8007c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c44:	b9d5      	cbnz	r5, 8007c7c <__sfp+0x64>
 8007c46:	4b16      	ldr	r3, [pc, #88]	; (8007ca0 <__sfp+0x88>)
 8007c48:	60e3      	str	r3, [r4, #12]
 8007c4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8007c50:	f000 f847 	bl	8007ce2 <__retarget_lock_init_recursive>
 8007c54:	f7ff ff96 	bl	8007b84 <__sfp_lock_release>
 8007c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c60:	6025      	str	r5, [r4, #0]
 8007c62:	61a5      	str	r5, [r4, #24]
 8007c64:	2208      	movs	r2, #8
 8007c66:	4629      	mov	r1, r5
 8007c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c6c:	f7ff fb9a 	bl	80073a4 <memset>
 8007c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c78:	4620      	mov	r0, r4
 8007c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c7c:	3468      	adds	r4, #104	; 0x68
 8007c7e:	e7d9      	b.n	8007c34 <__sfp+0x1c>
 8007c80:	2104      	movs	r1, #4
 8007c82:	4638      	mov	r0, r7
 8007c84:	f7ff ff62 	bl	8007b4c <__sfmoreglue>
 8007c88:	4604      	mov	r4, r0
 8007c8a:	6030      	str	r0, [r6, #0]
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1d5      	bne.n	8007c3c <__sfp+0x24>
 8007c90:	f7ff ff78 	bl	8007b84 <__sfp_lock_release>
 8007c94:	230c      	movs	r3, #12
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	e7ee      	b.n	8007c78 <__sfp+0x60>
 8007c9a:	bf00      	nop
 8007c9c:	0800861c 	.word	0x0800861c
 8007ca0:	ffff0001 	.word	0xffff0001

08007ca4 <_fwalk_reent>:
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca8:	4606      	mov	r6, r0
 8007caa:	4688      	mov	r8, r1
 8007cac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cb0:	2700      	movs	r7, #0
 8007cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8007cba:	d505      	bpl.n	8007cc8 <_fwalk_reent+0x24>
 8007cbc:	6824      	ldr	r4, [r4, #0]
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	d1f7      	bne.n	8007cb2 <_fwalk_reent+0xe>
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc8:	89ab      	ldrh	r3, [r5, #12]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d907      	bls.n	8007cde <_fwalk_reent+0x3a>
 8007cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	d003      	beq.n	8007cde <_fwalk_reent+0x3a>
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	4630      	mov	r0, r6
 8007cda:	47c0      	blx	r8
 8007cdc:	4307      	orrs	r7, r0
 8007cde:	3568      	adds	r5, #104	; 0x68
 8007ce0:	e7e9      	b.n	8007cb6 <_fwalk_reent+0x12>

08007ce2 <__retarget_lock_init_recursive>:
 8007ce2:	4770      	bx	lr

08007ce4 <__retarget_lock_acquire_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_release_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <_lseek_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d07      	ldr	r5, [pc, #28]	; (8007d08 <_lseek_r+0x20>)
 8007cec:	4604      	mov	r4, r0
 8007cee:	4608      	mov	r0, r1
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f7fd f98e 	bl	8005018 <_lseek>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_lseek_r+0x1e>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_lseek_r+0x1e>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20001358 	.word	0x20001358

08007d0c <__swhatbuf_r>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	460e      	mov	r6, r1
 8007d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d14:	2900      	cmp	r1, #0
 8007d16:	b096      	sub	sp, #88	; 0x58
 8007d18:	4614      	mov	r4, r2
 8007d1a:	461d      	mov	r5, r3
 8007d1c:	da08      	bge.n	8007d30 <__swhatbuf_r+0x24>
 8007d1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	602a      	str	r2, [r5, #0]
 8007d26:	061a      	lsls	r2, r3, #24
 8007d28:	d410      	bmi.n	8007d4c <__swhatbuf_r+0x40>
 8007d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d2e:	e00e      	b.n	8007d4e <__swhatbuf_r+0x42>
 8007d30:	466a      	mov	r2, sp
 8007d32:	f000 fb5d 	bl	80083f0 <_fstat_r>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	dbf1      	blt.n	8007d1e <__swhatbuf_r+0x12>
 8007d3a:	9a01      	ldr	r2, [sp, #4]
 8007d3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d44:	425a      	negs	r2, r3
 8007d46:	415a      	adcs	r2, r3
 8007d48:	602a      	str	r2, [r5, #0]
 8007d4a:	e7ee      	b.n	8007d2a <__swhatbuf_r+0x1e>
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	2000      	movs	r0, #0
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	b016      	add	sp, #88	; 0x58
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d58 <__smakebuf_r>:
 8007d58:	898b      	ldrh	r3, [r1, #12]
 8007d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d5c:	079d      	lsls	r5, r3, #30
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	d507      	bpl.n	8007d74 <__smakebuf_r+0x1c>
 8007d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	6163      	str	r3, [r4, #20]
 8007d70:	b002      	add	sp, #8
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
 8007d74:	ab01      	add	r3, sp, #4
 8007d76:	466a      	mov	r2, sp
 8007d78:	f7ff ffc8 	bl	8007d0c <__swhatbuf_r>
 8007d7c:	9900      	ldr	r1, [sp, #0]
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7ff fb83 	bl	800748c <_malloc_r>
 8007d86:	b948      	cbnz	r0, 8007d9c <__smakebuf_r+0x44>
 8007d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8c:	059a      	lsls	r2, r3, #22
 8007d8e:	d4ef      	bmi.n	8007d70 <__smakebuf_r+0x18>
 8007d90:	f023 0303 	bic.w	r3, r3, #3
 8007d94:	f043 0302 	orr.w	r3, r3, #2
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	e7e3      	b.n	8007d64 <__smakebuf_r+0xc>
 8007d9c:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <__smakebuf_r+0x7c>)
 8007d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	6020      	str	r0, [r4, #0]
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	6163      	str	r3, [r4, #20]
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	6120      	str	r0, [r4, #16]
 8007db2:	b15b      	cbz	r3, 8007dcc <__smakebuf_r+0x74>
 8007db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 fb2b 	bl	8008414 <_isatty_r>
 8007dbe:	b128      	cbz	r0, 8007dcc <__smakebuf_r+0x74>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	89a0      	ldrh	r0, [r4, #12]
 8007dce:	4305      	orrs	r5, r0
 8007dd0:	81a5      	strh	r5, [r4, #12]
 8007dd2:	e7cd      	b.n	8007d70 <__smakebuf_r+0x18>
 8007dd4:	08007b41 	.word	0x08007b41

08007dd8 <__malloc_lock>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__malloc_lock+0x8>)
 8007dda:	f7ff bf83 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007dde:	bf00      	nop
 8007de0:	20001354 	.word	0x20001354

08007de4 <__malloc_unlock>:
 8007de4:	4801      	ldr	r0, [pc, #4]	; (8007dec <__malloc_unlock+0x8>)
 8007de6:	f7ff bf7e 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007dea:	bf00      	nop
 8007dec:	20001354 	.word	0x20001354

08007df0 <__sfputc_r>:
 8007df0:	6893      	ldr	r3, [r2, #8]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	b410      	push	{r4}
 8007df8:	6093      	str	r3, [r2, #8]
 8007dfa:	da08      	bge.n	8007e0e <__sfputc_r+0x1e>
 8007dfc:	6994      	ldr	r4, [r2, #24]
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	db01      	blt.n	8007e06 <__sfputc_r+0x16>
 8007e02:	290a      	cmp	r1, #10
 8007e04:	d103      	bne.n	8007e0e <__sfputc_r+0x1e>
 8007e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e0a:	f7ff bcd1 	b.w	80077b0 <__swbuf_r>
 8007e0e:	6813      	ldr	r3, [r2, #0]
 8007e10:	1c58      	adds	r0, r3, #1
 8007e12:	6010      	str	r0, [r2, #0]
 8007e14:	7019      	strb	r1, [r3, #0]
 8007e16:	4608      	mov	r0, r1
 8007e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <__sfputs_r>:
 8007e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e20:	4606      	mov	r6, r0
 8007e22:	460f      	mov	r7, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	18d5      	adds	r5, r2, r3
 8007e28:	42ac      	cmp	r4, r5
 8007e2a:	d101      	bne.n	8007e30 <__sfputs_r+0x12>
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e007      	b.n	8007e40 <__sfputs_r+0x22>
 8007e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e34:	463a      	mov	r2, r7
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff ffda 	bl	8007df0 <__sfputc_r>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d1f3      	bne.n	8007e28 <__sfputs_r+0xa>
 8007e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e44 <_vfiprintf_r>:
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	460d      	mov	r5, r1
 8007e4a:	b09d      	sub	sp, #116	; 0x74
 8007e4c:	4614      	mov	r4, r2
 8007e4e:	4698      	mov	r8, r3
 8007e50:	4606      	mov	r6, r0
 8007e52:	b118      	cbz	r0, 8007e5c <_vfiprintf_r+0x18>
 8007e54:	6983      	ldr	r3, [r0, #24]
 8007e56:	b90b      	cbnz	r3, 8007e5c <_vfiprintf_r+0x18>
 8007e58:	f7ff fea6 	bl	8007ba8 <__sinit>
 8007e5c:	4b89      	ldr	r3, [pc, #548]	; (8008084 <_vfiprintf_r+0x240>)
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	d11b      	bne.n	8007e9a <_vfiprintf_r+0x56>
 8007e62:	6875      	ldr	r5, [r6, #4]
 8007e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e66:	07d9      	lsls	r1, r3, #31
 8007e68:	d405      	bmi.n	8007e76 <_vfiprintf_r+0x32>
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	059a      	lsls	r2, r3, #22
 8007e6e:	d402      	bmi.n	8007e76 <_vfiprintf_r+0x32>
 8007e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e72:	f7ff ff37 	bl	8007ce4 <__retarget_lock_acquire_recursive>
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	071b      	lsls	r3, r3, #28
 8007e7a:	d501      	bpl.n	8007e80 <_vfiprintf_r+0x3c>
 8007e7c:	692b      	ldr	r3, [r5, #16]
 8007e7e:	b9eb      	cbnz	r3, 8007ebc <_vfiprintf_r+0x78>
 8007e80:	4629      	mov	r1, r5
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff fcf8 	bl	8007878 <__swsetup_r>
 8007e88:	b1c0      	cbz	r0, 8007ebc <_vfiprintf_r+0x78>
 8007e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e8c:	07dc      	lsls	r4, r3, #31
 8007e8e:	d50e      	bpl.n	8007eae <_vfiprintf_r+0x6a>
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	b01d      	add	sp, #116	; 0x74
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	4b7b      	ldr	r3, [pc, #492]	; (8008088 <_vfiprintf_r+0x244>)
 8007e9c:	429d      	cmp	r5, r3
 8007e9e:	d101      	bne.n	8007ea4 <_vfiprintf_r+0x60>
 8007ea0:	68b5      	ldr	r5, [r6, #8]
 8007ea2:	e7df      	b.n	8007e64 <_vfiprintf_r+0x20>
 8007ea4:	4b79      	ldr	r3, [pc, #484]	; (800808c <_vfiprintf_r+0x248>)
 8007ea6:	429d      	cmp	r5, r3
 8007ea8:	bf08      	it	eq
 8007eaa:	68f5      	ldreq	r5, [r6, #12]
 8007eac:	e7da      	b.n	8007e64 <_vfiprintf_r+0x20>
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	0598      	lsls	r0, r3, #22
 8007eb2:	d4ed      	bmi.n	8007e90 <_vfiprintf_r+0x4c>
 8007eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eb6:	f7ff ff16 	bl	8007ce6 <__retarget_lock_release_recursive>
 8007eba:	e7e9      	b.n	8007e90 <_vfiprintf_r+0x4c>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eca:	2330      	movs	r3, #48	; 0x30
 8007ecc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008090 <_vfiprintf_r+0x24c>
 8007ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed4:	f04f 0901 	mov.w	r9, #1
 8007ed8:	4623      	mov	r3, r4
 8007eda:	469a      	mov	sl, r3
 8007edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee0:	b10a      	cbz	r2, 8007ee6 <_vfiprintf_r+0xa2>
 8007ee2:	2a25      	cmp	r2, #37	; 0x25
 8007ee4:	d1f9      	bne.n	8007eda <_vfiprintf_r+0x96>
 8007ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eea:	d00b      	beq.n	8007f04 <_vfiprintf_r+0xc0>
 8007eec:	465b      	mov	r3, fp
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ff93 	bl	8007e1e <__sfputs_r>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f000 80aa 	beq.w	8008052 <_vfiprintf_r+0x20e>
 8007efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f00:	445a      	add	r2, fp
 8007f02:	9209      	str	r2, [sp, #36]	; 0x24
 8007f04:	f89a 3000 	ldrb.w	r3, [sl]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80a2 	beq.w	8008052 <_vfiprintf_r+0x20e>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f18:	f10a 0a01 	add.w	sl, sl, #1
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f24:	931a      	str	r3, [sp, #104]	; 0x68
 8007f26:	4654      	mov	r4, sl
 8007f28:	2205      	movs	r2, #5
 8007f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2e:	4858      	ldr	r0, [pc, #352]	; (8008090 <_vfiprintf_r+0x24c>)
 8007f30:	f7f8 f976 	bl	8000220 <memchr>
 8007f34:	9a04      	ldr	r2, [sp, #16]
 8007f36:	b9d8      	cbnz	r0, 8007f70 <_vfiprintf_r+0x12c>
 8007f38:	06d1      	lsls	r1, r2, #27
 8007f3a:	bf44      	itt	mi
 8007f3c:	2320      	movmi	r3, #32
 8007f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f42:	0713      	lsls	r3, r2, #28
 8007f44:	bf44      	itt	mi
 8007f46:	232b      	movmi	r3, #43	; 0x2b
 8007f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f50:	2b2a      	cmp	r3, #42	; 0x2a
 8007f52:	d015      	beq.n	8007f80 <_vfiprintf_r+0x13c>
 8007f54:	9a07      	ldr	r2, [sp, #28]
 8007f56:	4654      	mov	r4, sl
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f04f 0c0a 	mov.w	ip, #10
 8007f5e:	4621      	mov	r1, r4
 8007f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f64:	3b30      	subs	r3, #48	; 0x30
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d94e      	bls.n	8008008 <_vfiprintf_r+0x1c4>
 8007f6a:	b1b0      	cbz	r0, 8007f9a <_vfiprintf_r+0x156>
 8007f6c:	9207      	str	r2, [sp, #28]
 8007f6e:	e014      	b.n	8007f9a <_vfiprintf_r+0x156>
 8007f70:	eba0 0308 	sub.w	r3, r0, r8
 8007f74:	fa09 f303 	lsl.w	r3, r9, r3
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	46a2      	mov	sl, r4
 8007f7e:	e7d2      	b.n	8007f26 <_vfiprintf_r+0xe2>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	1d19      	adds	r1, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9103      	str	r1, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfbb      	ittet	lt
 8007f8c:	425b      	neglt	r3, r3
 8007f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f92:	9307      	strge	r3, [sp, #28]
 8007f94:	9307      	strlt	r3, [sp, #28]
 8007f96:	bfb8      	it	lt
 8007f98:	9204      	strlt	r2, [sp, #16]
 8007f9a:	7823      	ldrb	r3, [r4, #0]
 8007f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f9e:	d10c      	bne.n	8007fba <_vfiprintf_r+0x176>
 8007fa0:	7863      	ldrb	r3, [r4, #1]
 8007fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa4:	d135      	bne.n	8008012 <_vfiprintf_r+0x1ce>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	1d1a      	adds	r2, r3, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	9203      	str	r2, [sp, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfb8      	it	lt
 8007fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fb6:	3402      	adds	r4, #2
 8007fb8:	9305      	str	r3, [sp, #20]
 8007fba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80080a0 <_vfiprintf_r+0x25c>
 8007fbe:	7821      	ldrb	r1, [r4, #0]
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	f7f8 f92c 	bl	8000220 <memchr>
 8007fc8:	b140      	cbz	r0, 8007fdc <_vfiprintf_r+0x198>
 8007fca:	2340      	movs	r3, #64	; 0x40
 8007fcc:	eba0 000a 	sub.w	r0, r0, sl
 8007fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fd4:	9b04      	ldr	r3, [sp, #16]
 8007fd6:	4303      	orrs	r3, r0
 8007fd8:	3401      	adds	r4, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe0:	482c      	ldr	r0, [pc, #176]	; (8008094 <_vfiprintf_r+0x250>)
 8007fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fe6:	2206      	movs	r2, #6
 8007fe8:	f7f8 f91a 	bl	8000220 <memchr>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d03f      	beq.n	8008070 <_vfiprintf_r+0x22c>
 8007ff0:	4b29      	ldr	r3, [pc, #164]	; (8008098 <_vfiprintf_r+0x254>)
 8007ff2:	bb1b      	cbnz	r3, 800803c <_vfiprintf_r+0x1f8>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	3307      	adds	r3, #7
 8007ff8:	f023 0307 	bic.w	r3, r3, #7
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	9303      	str	r3, [sp, #12]
 8008000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008002:	443b      	add	r3, r7
 8008004:	9309      	str	r3, [sp, #36]	; 0x24
 8008006:	e767      	b.n	8007ed8 <_vfiprintf_r+0x94>
 8008008:	fb0c 3202 	mla	r2, ip, r2, r3
 800800c:	460c      	mov	r4, r1
 800800e:	2001      	movs	r0, #1
 8008010:	e7a5      	b.n	8007f5e <_vfiprintf_r+0x11a>
 8008012:	2300      	movs	r3, #0
 8008014:	3401      	adds	r4, #1
 8008016:	9305      	str	r3, [sp, #20]
 8008018:	4619      	mov	r1, r3
 800801a:	f04f 0c0a 	mov.w	ip, #10
 800801e:	4620      	mov	r0, r4
 8008020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008024:	3a30      	subs	r2, #48	; 0x30
 8008026:	2a09      	cmp	r2, #9
 8008028:	d903      	bls.n	8008032 <_vfiprintf_r+0x1ee>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0c5      	beq.n	8007fba <_vfiprintf_r+0x176>
 800802e:	9105      	str	r1, [sp, #20]
 8008030:	e7c3      	b.n	8007fba <_vfiprintf_r+0x176>
 8008032:	fb0c 2101 	mla	r1, ip, r1, r2
 8008036:	4604      	mov	r4, r0
 8008038:	2301      	movs	r3, #1
 800803a:	e7f0      	b.n	800801e <_vfiprintf_r+0x1da>
 800803c:	ab03      	add	r3, sp, #12
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	462a      	mov	r2, r5
 8008042:	4b16      	ldr	r3, [pc, #88]	; (800809c <_vfiprintf_r+0x258>)
 8008044:	a904      	add	r1, sp, #16
 8008046:	4630      	mov	r0, r6
 8008048:	f3af 8000 	nop.w
 800804c:	4607      	mov	r7, r0
 800804e:	1c78      	adds	r0, r7, #1
 8008050:	d1d6      	bne.n	8008000 <_vfiprintf_r+0x1bc>
 8008052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008054:	07d9      	lsls	r1, r3, #31
 8008056:	d405      	bmi.n	8008064 <_vfiprintf_r+0x220>
 8008058:	89ab      	ldrh	r3, [r5, #12]
 800805a:	059a      	lsls	r2, r3, #22
 800805c:	d402      	bmi.n	8008064 <_vfiprintf_r+0x220>
 800805e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008060:	f7ff fe41 	bl	8007ce6 <__retarget_lock_release_recursive>
 8008064:	89ab      	ldrh	r3, [r5, #12]
 8008066:	065b      	lsls	r3, r3, #25
 8008068:	f53f af12 	bmi.w	8007e90 <_vfiprintf_r+0x4c>
 800806c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800806e:	e711      	b.n	8007e94 <_vfiprintf_r+0x50>
 8008070:	ab03      	add	r3, sp, #12
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	462a      	mov	r2, r5
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <_vfiprintf_r+0x258>)
 8008078:	a904      	add	r1, sp, #16
 800807a:	4630      	mov	r0, r6
 800807c:	f000 f880 	bl	8008180 <_printf_i>
 8008080:	e7e4      	b.n	800804c <_vfiprintf_r+0x208>
 8008082:	bf00      	nop
 8008084:	08008640 	.word	0x08008640
 8008088:	08008660 	.word	0x08008660
 800808c:	08008620 	.word	0x08008620
 8008090:	08008680 	.word	0x08008680
 8008094:	0800868a 	.word	0x0800868a
 8008098:	00000000 	.word	0x00000000
 800809c:	08007e1f 	.word	0x08007e1f
 80080a0:	08008686 	.word	0x08008686

080080a4 <_printf_common>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	4616      	mov	r6, r2
 80080aa:	4699      	mov	r9, r3
 80080ac:	688a      	ldr	r2, [r1, #8]
 80080ae:	690b      	ldr	r3, [r1, #16]
 80080b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080b4:	4293      	cmp	r3, r2
 80080b6:	bfb8      	it	lt
 80080b8:	4613      	movlt	r3, r2
 80080ba:	6033      	str	r3, [r6, #0]
 80080bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080c0:	4607      	mov	r7, r0
 80080c2:	460c      	mov	r4, r1
 80080c4:	b10a      	cbz	r2, 80080ca <_printf_common+0x26>
 80080c6:	3301      	adds	r3, #1
 80080c8:	6033      	str	r3, [r6, #0]
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	0699      	lsls	r1, r3, #26
 80080ce:	bf42      	ittt	mi
 80080d0:	6833      	ldrmi	r3, [r6, #0]
 80080d2:	3302      	addmi	r3, #2
 80080d4:	6033      	strmi	r3, [r6, #0]
 80080d6:	6825      	ldr	r5, [r4, #0]
 80080d8:	f015 0506 	ands.w	r5, r5, #6
 80080dc:	d106      	bne.n	80080ec <_printf_common+0x48>
 80080de:	f104 0a19 	add.w	sl, r4, #25
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	6832      	ldr	r2, [r6, #0]
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	42ab      	cmp	r3, r5
 80080ea:	dc26      	bgt.n	800813a <_printf_common+0x96>
 80080ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080f0:	1e13      	subs	r3, r2, #0
 80080f2:	6822      	ldr	r2, [r4, #0]
 80080f4:	bf18      	it	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	0692      	lsls	r2, r2, #26
 80080fa:	d42b      	bmi.n	8008154 <_printf_common+0xb0>
 80080fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008100:	4649      	mov	r1, r9
 8008102:	4638      	mov	r0, r7
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d01e      	beq.n	8008148 <_printf_common+0xa4>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	68e5      	ldr	r5, [r4, #12]
 800810e:	6832      	ldr	r2, [r6, #0]
 8008110:	f003 0306 	and.w	r3, r3, #6
 8008114:	2b04      	cmp	r3, #4
 8008116:	bf08      	it	eq
 8008118:	1aad      	subeq	r5, r5, r2
 800811a:	68a3      	ldr	r3, [r4, #8]
 800811c:	6922      	ldr	r2, [r4, #16]
 800811e:	bf0c      	ite	eq
 8008120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008124:	2500      	movne	r5, #0
 8008126:	4293      	cmp	r3, r2
 8008128:	bfc4      	itt	gt
 800812a:	1a9b      	subgt	r3, r3, r2
 800812c:	18ed      	addgt	r5, r5, r3
 800812e:	2600      	movs	r6, #0
 8008130:	341a      	adds	r4, #26
 8008132:	42b5      	cmp	r5, r6
 8008134:	d11a      	bne.n	800816c <_printf_common+0xc8>
 8008136:	2000      	movs	r0, #0
 8008138:	e008      	b.n	800814c <_printf_common+0xa8>
 800813a:	2301      	movs	r3, #1
 800813c:	4652      	mov	r2, sl
 800813e:	4649      	mov	r1, r9
 8008140:	4638      	mov	r0, r7
 8008142:	47c0      	blx	r8
 8008144:	3001      	adds	r0, #1
 8008146:	d103      	bne.n	8008150 <_printf_common+0xac>
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008150:	3501      	adds	r5, #1
 8008152:	e7c6      	b.n	80080e2 <_printf_common+0x3e>
 8008154:	18e1      	adds	r1, r4, r3
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	2030      	movs	r0, #48	; 0x30
 800815a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800815e:	4422      	add	r2, r4
 8008160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008168:	3302      	adds	r3, #2
 800816a:	e7c7      	b.n	80080fc <_printf_common+0x58>
 800816c:	2301      	movs	r3, #1
 800816e:	4622      	mov	r2, r4
 8008170:	4649      	mov	r1, r9
 8008172:	4638      	mov	r0, r7
 8008174:	47c0      	blx	r8
 8008176:	3001      	adds	r0, #1
 8008178:	d0e6      	beq.n	8008148 <_printf_common+0xa4>
 800817a:	3601      	adds	r6, #1
 800817c:	e7d9      	b.n	8008132 <_printf_common+0x8e>
	...

08008180 <_printf_i>:
 8008180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008184:	7e0f      	ldrb	r7, [r1, #24]
 8008186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008188:	2f78      	cmp	r7, #120	; 0x78
 800818a:	4691      	mov	r9, r2
 800818c:	4680      	mov	r8, r0
 800818e:	460c      	mov	r4, r1
 8008190:	469a      	mov	sl, r3
 8008192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008196:	d807      	bhi.n	80081a8 <_printf_i+0x28>
 8008198:	2f62      	cmp	r7, #98	; 0x62
 800819a:	d80a      	bhi.n	80081b2 <_printf_i+0x32>
 800819c:	2f00      	cmp	r7, #0
 800819e:	f000 80d8 	beq.w	8008352 <_printf_i+0x1d2>
 80081a2:	2f58      	cmp	r7, #88	; 0x58
 80081a4:	f000 80a3 	beq.w	80082ee <_printf_i+0x16e>
 80081a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081b0:	e03a      	b.n	8008228 <_printf_i+0xa8>
 80081b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081b6:	2b15      	cmp	r3, #21
 80081b8:	d8f6      	bhi.n	80081a8 <_printf_i+0x28>
 80081ba:	a101      	add	r1, pc, #4	; (adr r1, 80081c0 <_printf_i+0x40>)
 80081bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081c0:	08008219 	.word	0x08008219
 80081c4:	0800822d 	.word	0x0800822d
 80081c8:	080081a9 	.word	0x080081a9
 80081cc:	080081a9 	.word	0x080081a9
 80081d0:	080081a9 	.word	0x080081a9
 80081d4:	080081a9 	.word	0x080081a9
 80081d8:	0800822d 	.word	0x0800822d
 80081dc:	080081a9 	.word	0x080081a9
 80081e0:	080081a9 	.word	0x080081a9
 80081e4:	080081a9 	.word	0x080081a9
 80081e8:	080081a9 	.word	0x080081a9
 80081ec:	08008339 	.word	0x08008339
 80081f0:	0800825d 	.word	0x0800825d
 80081f4:	0800831b 	.word	0x0800831b
 80081f8:	080081a9 	.word	0x080081a9
 80081fc:	080081a9 	.word	0x080081a9
 8008200:	0800835b 	.word	0x0800835b
 8008204:	080081a9 	.word	0x080081a9
 8008208:	0800825d 	.word	0x0800825d
 800820c:	080081a9 	.word	0x080081a9
 8008210:	080081a9 	.word	0x080081a9
 8008214:	08008323 	.word	0x08008323
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	1d1a      	adds	r2, r3, #4
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	602a      	str	r2, [r5, #0]
 8008220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008228:	2301      	movs	r3, #1
 800822a:	e0a3      	b.n	8008374 <_printf_i+0x1f4>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	6829      	ldr	r1, [r5, #0]
 8008230:	0606      	lsls	r6, r0, #24
 8008232:	f101 0304 	add.w	r3, r1, #4
 8008236:	d50a      	bpl.n	800824e <_printf_i+0xce>
 8008238:	680e      	ldr	r6, [r1, #0]
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	2e00      	cmp	r6, #0
 800823e:	da03      	bge.n	8008248 <_printf_i+0xc8>
 8008240:	232d      	movs	r3, #45	; 0x2d
 8008242:	4276      	negs	r6, r6
 8008244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008248:	485e      	ldr	r0, [pc, #376]	; (80083c4 <_printf_i+0x244>)
 800824a:	230a      	movs	r3, #10
 800824c:	e019      	b.n	8008282 <_printf_i+0x102>
 800824e:	680e      	ldr	r6, [r1, #0]
 8008250:	602b      	str	r3, [r5, #0]
 8008252:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008256:	bf18      	it	ne
 8008258:	b236      	sxthne	r6, r6
 800825a:	e7ef      	b.n	800823c <_printf_i+0xbc>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	6820      	ldr	r0, [r4, #0]
 8008260:	1d19      	adds	r1, r3, #4
 8008262:	6029      	str	r1, [r5, #0]
 8008264:	0601      	lsls	r1, r0, #24
 8008266:	d501      	bpl.n	800826c <_printf_i+0xec>
 8008268:	681e      	ldr	r6, [r3, #0]
 800826a:	e002      	b.n	8008272 <_printf_i+0xf2>
 800826c:	0646      	lsls	r6, r0, #25
 800826e:	d5fb      	bpl.n	8008268 <_printf_i+0xe8>
 8008270:	881e      	ldrh	r6, [r3, #0]
 8008272:	4854      	ldr	r0, [pc, #336]	; (80083c4 <_printf_i+0x244>)
 8008274:	2f6f      	cmp	r7, #111	; 0x6f
 8008276:	bf0c      	ite	eq
 8008278:	2308      	moveq	r3, #8
 800827a:	230a      	movne	r3, #10
 800827c:	2100      	movs	r1, #0
 800827e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008282:	6865      	ldr	r5, [r4, #4]
 8008284:	60a5      	str	r5, [r4, #8]
 8008286:	2d00      	cmp	r5, #0
 8008288:	bfa2      	ittt	ge
 800828a:	6821      	ldrge	r1, [r4, #0]
 800828c:	f021 0104 	bicge.w	r1, r1, #4
 8008290:	6021      	strge	r1, [r4, #0]
 8008292:	b90e      	cbnz	r6, 8008298 <_printf_i+0x118>
 8008294:	2d00      	cmp	r5, #0
 8008296:	d04d      	beq.n	8008334 <_printf_i+0x1b4>
 8008298:	4615      	mov	r5, r2
 800829a:	fbb6 f1f3 	udiv	r1, r6, r3
 800829e:	fb03 6711 	mls	r7, r3, r1, r6
 80082a2:	5dc7      	ldrb	r7, [r0, r7]
 80082a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082a8:	4637      	mov	r7, r6
 80082aa:	42bb      	cmp	r3, r7
 80082ac:	460e      	mov	r6, r1
 80082ae:	d9f4      	bls.n	800829a <_printf_i+0x11a>
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d10b      	bne.n	80082cc <_printf_i+0x14c>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	07de      	lsls	r6, r3, #31
 80082b8:	d508      	bpl.n	80082cc <_printf_i+0x14c>
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	6861      	ldr	r1, [r4, #4]
 80082be:	4299      	cmp	r1, r3
 80082c0:	bfde      	ittt	le
 80082c2:	2330      	movle	r3, #48	; 0x30
 80082c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082cc:	1b52      	subs	r2, r2, r5
 80082ce:	6122      	str	r2, [r4, #16]
 80082d0:	f8cd a000 	str.w	sl, [sp]
 80082d4:	464b      	mov	r3, r9
 80082d6:	aa03      	add	r2, sp, #12
 80082d8:	4621      	mov	r1, r4
 80082da:	4640      	mov	r0, r8
 80082dc:	f7ff fee2 	bl	80080a4 <_printf_common>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d14c      	bne.n	800837e <_printf_i+0x1fe>
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	b004      	add	sp, #16
 80082ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ee:	4835      	ldr	r0, [pc, #212]	; (80083c4 <_printf_i+0x244>)
 80082f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082f4:	6829      	ldr	r1, [r5, #0]
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80082fc:	6029      	str	r1, [r5, #0]
 80082fe:	061d      	lsls	r5, r3, #24
 8008300:	d514      	bpl.n	800832c <_printf_i+0x1ac>
 8008302:	07df      	lsls	r7, r3, #31
 8008304:	bf44      	itt	mi
 8008306:	f043 0320 	orrmi.w	r3, r3, #32
 800830a:	6023      	strmi	r3, [r4, #0]
 800830c:	b91e      	cbnz	r6, 8008316 <_printf_i+0x196>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	f023 0320 	bic.w	r3, r3, #32
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	2310      	movs	r3, #16
 8008318:	e7b0      	b.n	800827c <_printf_i+0xfc>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	f043 0320 	orr.w	r3, r3, #32
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	2378      	movs	r3, #120	; 0x78
 8008324:	4828      	ldr	r0, [pc, #160]	; (80083c8 <_printf_i+0x248>)
 8008326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800832a:	e7e3      	b.n	80082f4 <_printf_i+0x174>
 800832c:	0659      	lsls	r1, r3, #25
 800832e:	bf48      	it	mi
 8008330:	b2b6      	uxthmi	r6, r6
 8008332:	e7e6      	b.n	8008302 <_printf_i+0x182>
 8008334:	4615      	mov	r5, r2
 8008336:	e7bb      	b.n	80082b0 <_printf_i+0x130>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	6826      	ldr	r6, [r4, #0]
 800833c:	6961      	ldr	r1, [r4, #20]
 800833e:	1d18      	adds	r0, r3, #4
 8008340:	6028      	str	r0, [r5, #0]
 8008342:	0635      	lsls	r5, r6, #24
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	d501      	bpl.n	800834c <_printf_i+0x1cc>
 8008348:	6019      	str	r1, [r3, #0]
 800834a:	e002      	b.n	8008352 <_printf_i+0x1d2>
 800834c:	0670      	lsls	r0, r6, #25
 800834e:	d5fb      	bpl.n	8008348 <_printf_i+0x1c8>
 8008350:	8019      	strh	r1, [r3, #0]
 8008352:	2300      	movs	r3, #0
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	4615      	mov	r5, r2
 8008358:	e7ba      	b.n	80082d0 <_printf_i+0x150>
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	1d1a      	adds	r2, r3, #4
 800835e:	602a      	str	r2, [r5, #0]
 8008360:	681d      	ldr	r5, [r3, #0]
 8008362:	6862      	ldr	r2, [r4, #4]
 8008364:	2100      	movs	r1, #0
 8008366:	4628      	mov	r0, r5
 8008368:	f7f7 ff5a 	bl	8000220 <memchr>
 800836c:	b108      	cbz	r0, 8008372 <_printf_i+0x1f2>
 800836e:	1b40      	subs	r0, r0, r5
 8008370:	6060      	str	r0, [r4, #4]
 8008372:	6863      	ldr	r3, [r4, #4]
 8008374:	6123      	str	r3, [r4, #16]
 8008376:	2300      	movs	r3, #0
 8008378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837c:	e7a8      	b.n	80082d0 <_printf_i+0x150>
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	462a      	mov	r2, r5
 8008382:	4649      	mov	r1, r9
 8008384:	4640      	mov	r0, r8
 8008386:	47d0      	blx	sl
 8008388:	3001      	adds	r0, #1
 800838a:	d0ab      	beq.n	80082e4 <_printf_i+0x164>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	079b      	lsls	r3, r3, #30
 8008390:	d413      	bmi.n	80083ba <_printf_i+0x23a>
 8008392:	68e0      	ldr	r0, [r4, #12]
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	4298      	cmp	r0, r3
 8008398:	bfb8      	it	lt
 800839a:	4618      	movlt	r0, r3
 800839c:	e7a4      	b.n	80082e8 <_printf_i+0x168>
 800839e:	2301      	movs	r3, #1
 80083a0:	4632      	mov	r2, r6
 80083a2:	4649      	mov	r1, r9
 80083a4:	4640      	mov	r0, r8
 80083a6:	47d0      	blx	sl
 80083a8:	3001      	adds	r0, #1
 80083aa:	d09b      	beq.n	80082e4 <_printf_i+0x164>
 80083ac:	3501      	adds	r5, #1
 80083ae:	68e3      	ldr	r3, [r4, #12]
 80083b0:	9903      	ldr	r1, [sp, #12]
 80083b2:	1a5b      	subs	r3, r3, r1
 80083b4:	42ab      	cmp	r3, r5
 80083b6:	dcf2      	bgt.n	800839e <_printf_i+0x21e>
 80083b8:	e7eb      	b.n	8008392 <_printf_i+0x212>
 80083ba:	2500      	movs	r5, #0
 80083bc:	f104 0619 	add.w	r6, r4, #25
 80083c0:	e7f5      	b.n	80083ae <_printf_i+0x22e>
 80083c2:	bf00      	nop
 80083c4:	08008691 	.word	0x08008691
 80083c8:	080086a2 	.word	0x080086a2

080083cc <_read_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d07      	ldr	r5, [pc, #28]	; (80083ec <_read_r+0x20>)
 80083d0:	4604      	mov	r4, r0
 80083d2:	4608      	mov	r0, r1
 80083d4:	4611      	mov	r1, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7fc fdbc 	bl	8004f58 <_read>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_read_r+0x1e>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_read_r+0x1e>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20001358 	.word	0x20001358

080083f0 <_fstat_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_fstat_r+0x20>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	602b      	str	r3, [r5, #0]
 80083fe:	f7fc fdf0 	bl	8004fe2 <_fstat>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d102      	bne.n	800840c <_fstat_r+0x1c>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	b103      	cbz	r3, 800840c <_fstat_r+0x1c>
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	bd38      	pop	{r3, r4, r5, pc}
 800840e:	bf00      	nop
 8008410:	20001358 	.word	0x20001358

08008414 <_isatty_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	; (8008430 <_isatty_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7fc fdef 	bl	8005002 <_isatty>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_isatty_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_isatty_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20001358 	.word	0x20001358

08008434 <_init>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr

08008440 <_fini>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr
